{
    "openapi": "3.0.0",
    "info": {
        "title": "Secuconnect API",
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "https://connect.secucard.com/api/v2"
        }
    ],
    "paths": {
        "/Document/Uploads?multipart": {
            "post": {
                "tags": [
                    "Document Uploads"
                ],
                "summary": "POST Document/Uploads",
                "description": "Store uploaded file",
                "operationId": "Document/Uploads/documentUploadsMultipartPost",
                "parameters": [
                    {
                        "name": "multipart",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Input data format",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/fileToUpload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document uploaded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentUploadsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Document/Uploads": {
            "post": {
                "tags": [
                    "Document Uploads"
                ],
                "summary": "POST Document/Uploads",
                "description": "Store uploaded file",
                "operationId": "Document/Uploads/documentUploadsPost",
                "requestBody": {
                    "description": "Content",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentUploadsDTOContent"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document uploaded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentUploadsBaseProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Contracts": {
            "get": {
                "tags": [
                    "General Contracts"
                ],
                "summary": "GET General/Contracts",
                "description": "Get a list of general contracts",
                "operationId": "General/Contracts/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of general contracts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralContractsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Contracts/{generalContractId}": {
            "get": {
                "tags": [
                    "General Contracts"
                ],
                "summary": "GET General/Contracts/{generalContractId}",
                "description": "Get one general contract for a specific id",
                "operationId": "General/Contracts/getOne",
                "parameters": [
                    {
                        "name": "generalContractId",
                        "in": "path",
                        "description": "General contract id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns general contract for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralContractsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Contracts/{generalContractId}/getAvailablePaymentMethods": {
            "post": {
                "tags": [
                    "General Contracts"
                ],
                "summary": "POST General/Contracts/{generalContractId}/getAvailablePaymentMethods",
                "description": "Get available payment methods for given contract",
                "operationId": "General/Contracts/getAvailablePaymentMethods",
                "parameters": [
                    {
                        "name": "generalContractId",
                        "in": "path",
                        "description": "Contract identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "options",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetAvailablePaymentMethodsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "General methods possible for given contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Merchants": {
            "get": {
                "tags": [
                    "General Merchants"
                ],
                "summary": "GET General/Merchants",
                "description": "Get a list of general merchants",
                "operationId": "General/Merchants/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of general merchants",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralMerchantsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Merchants/{generalMerchantId}": {
            "get": {
                "tags": [
                    "General Merchants"
                ],
                "summary": "GET General/Merchants/{generalMerchantId}",
                "description": "Get one general merchant for a specific id",
                "operationId": "General/Merchants/getOne",
                "parameters": [
                    {
                        "name": "generalMerchantId",
                        "in": "path",
                        "description": "General merchant id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns general merchant for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralMerchantsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Merchants/{generalMerchantId}/getPublicData/{generalContractId}": {
            "post": {
                "tags": [
                    "General Merchants"
                ],
                "summary": "POST General/Merchants/{generalMerchantId}/getPublicData/{generalContractId}",
                "description": "Get Public Data of a Merchant",
                "operationId": "General/Stores/getPublicData",
                "parameters": [
                    {
                        "name": "generalMerchantId",
                        "in": "path",
                        "description": "Merchant identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generalContractId",
                        "in": "path",
                        "description": "Contract identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "General store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralMerchantsPublicDataModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Stores": {
            "get": {
                "tags": [
                    "General Stores"
                ],
                "summary": "GET General/Stores",
                "description": "Get a list of general stores",
                "operationId": "General/Stores/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of general stores",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralStoresList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "General Stores"
                ],
                "summary": "POST General/Stores",
                "description": "Create general store",
                "operationId": "General/Stores/addStore",
                "requestBody": {
                    "description": "General store properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeneralStoresDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "General store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralStoresProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Stores/{generalStoreId}": {
            "get": {
                "tags": [
                    "General Stores"
                ],
                "summary": "GET General/Stores/{generalStoreId}",
                "description": "Get one general store for a specific id",
                "operationId": "General/Stores/getOne",
                "parameters": [
                    {
                        "name": "generalStoreId",
                        "in": "path",
                        "description": "General store id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns general store for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralStoresProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "General Stores"
                ],
                "summary": "PUT General/Stores/{generalStoreId}",
                "description": "Update general store",
                "operationId": "General/Stores/updateStore",
                "parameters": [
                    {
                        "name": "generalStoreId",
                        "in": "path",
                        "description": "General store id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "General store properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeneralStoresDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated general store",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GeneralStoresProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Stores/{generalStoreId}/checkin": {
            "post": {
                "tags": [
                    "General Stores"
                ],
                "summary": "POST General/Stores/{generalStoreId}/checkin",
                "description": "Check in",
                "operationId": "General/Stores/checkIn",
                "parameters": [
                    {
                        "name": "generalStoreId",
                        "in": "path",
                        "description": "General store id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "General store properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeneralStoresDTOType"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returned value is true or false",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Stores/{generalStoreId}/assign/{googleKey}": {
            "post": {
                "tags": [
                    "General Stores"
                ],
                "summary": "POST General/Stores/{generalStoreId}/assign/{googleKey}",
                "description": "Assign some object to general store",
                "operationId": "General/Stores/assignGoogleKey",
                "parameters": [
                    {
                        "name": "generalStoreId",
                        "in": "path",
                        "description": "General store id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "googleKey",
                        "in": "path",
                        "description": "Google key",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If a general store hasn't assigned earlier, the returned value is true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/General/Stores/{generalStoreId}/setDefault": {
            "post": {
                "tags": [
                    "General Stores"
                ],
                "summary": "POST General/Stores/{generalStoreId}/setDefault",
                "description": "Set default flag on general store",
                "operationId": "General/Stores/setDefault",
                "parameters": [
                    {
                        "name": "generalStoreId",
                        "in": "path",
                        "description": "General store id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Reason",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GeneralStoresDTOReason"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "In the most cases returned value is true",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cardgroups": {
            "get": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "GET Loyalty/Cardgroups",
                "description": "Get a list of loyalty card groups",
                "operationId": "Loyalty/Cardgroups/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of loyalty card groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardgroupsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "POST Loyalty/Cardgroups",
                "description": "Add loyalty card group",
                "operationId": "Loyalty/Cardgroups/addCardGroup",
                "requestBody": {
                    "description": "Loyalty card group properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCardgroupsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Added loyalty card group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cardgroups/{loyaltyCardGroupId}": {
            "get": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "GET Loyalty/Cardgroups/{loyaltyCardGroupId}",
                "description": "Get loyalty card group for a specific id",
                "operationId": "Loyalty/Cardgroups/getOne",
                "parameters": [
                    {
                        "name": "loyaltyCardGroupId",
                        "in": "path",
                        "description": "Search one by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns loyalty card group for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "PUT Loyalty/Cardgroups/{loyaltyCardGroupId}",
                "description": "Update loyalty card group",
                "operationId": "Loyalty/Cardgroups/updateCardGroup",
                "parameters": [
                    {
                        "name": "loyaltyCardGroupId",
                        "in": "path",
                        "description": "Loyalty card group id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Loyalty card group properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCardgroupsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated loyalty card group",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled": {
            "post": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "POST Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled",
                "description": "Check whether passcode check is enabled",
                "operationId": "Loyalty/Cardgroups/checkPassCodeEnabled",
                "parameters": [
                    {
                        "name": "loyaltyCardGroupId",
                        "in": "path",
                        "description": "Loyalty card group id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Check passcode details",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCardgroupsDTOCheckPasscodeEnabled"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Checked successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cards": {
            "get": {
                "tags": [
                    "Loyalty Cards"
                ],
                "summary": "GET Loyalty/Cards",
                "description": "Get a list of loyalty cards",
                "operationId": "Loyalty/Cards/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of loyalty cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cards/{loyaltyCardId}": {
            "get": {
                "tags": [
                    "Loyalty Cards"
                ],
                "summary": "GET Loyalty/Cards/{loyaltyCardId}",
                "description": "Get loyalty card for a specific id",
                "operationId": "Loyalty/Cards/getOne",
                "parameters": [
                    {
                        "name": "loyaltyCardId",
                        "in": "path",
                        "description": "Search one loyalty card by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns loyalty card for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}": {
            "post": {
                "tags": [
                    "Loyalty Cards"
                ],
                "summary": "POST Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}",
                "description": "Assign loyalty card to specific user account",
                "operationId": "Loyalty/Cards/assignUser",
                "parameters": [
                    {
                        "name": "loyaltyCardId",
                        "in": "path",
                        "description": "Loyalty card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generalAccountId",
                        "in": "path",
                        "description": "General account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Loyalty card pin for the specific card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CardPin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns true if loyalty card was assigned to user successful, false in other case",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Loyalty Cards"
                ],
                "summary": "DELETE Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}",
                "description": "Remove assigned loyalty card from specific user account",
                "operationId": "Loyalty/Cards/removeAssignedUser",
                "parameters": [
                    {
                        "name": "loyaltyCardId",
                        "in": "path",
                        "description": "Loyalty card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "generalAccountId",
                        "in": "path",
                        "description": "General account id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns true if loyalty card assign was removed from user successful, false in other case",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Customers": {
            "get": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "GET Loyalty/Customers",
                "description": "Get a list of loyalty customers",
                "operationId": "Loyalty/Customers/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of loyalty customers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "POST Loyalty/Customers",
                "description": "Add loyalty customer",
                "operationId": "Loyalty/Customers/addCustomer",
                "requestBody": {
                    "description": "loyalty Customer container properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCustomersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created loyalty Customer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Customers/{loyaltyCustomerId}": {
            "get": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "GET Loyalty/Customers/{loyaltyCustomerId}",
                "description": "Get loyalty customer for a specific id",
                "operationId": "Loyalty/Customers/getOne",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Search one loyalty customer by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns loyalty customer for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "PUT Loyalty/Customers/{loyaltyCustomerId}",
                "description": "Function to update customer's data",
                "operationId": "Loyalty/Customers/updateCustomer",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "loyalty Customer Id CUS_XXX",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "loyalty Customer container properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCustomersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created loyalty Customer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "DELETE Loyalty/Customers/{loyaltyCustomerId}",
                "description": "Remove assigned loyalty customer",
                "operationId": "Loyalty/Customers/removeCustomer",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Loyalty customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns true if loyalty customer was removed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersRemoved"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}": {
            "post": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "POST Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}",
                "description": "Assigns LoyaltyPaymentContainer to customer",
                "operationId": "Loyalty/Customers/assignPaymentContainer",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Loyalty customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyPaymentContainerId",
                        "in": "path",
                        "description": "LoyaltyPaymentContainer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "loyalty Customers data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "DELETE Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}",
                "description": "Removes an assigned LoyaltyPaymentContainer from customer",
                "operationId": "Loyalty/Customers/removeAssignedPaymentContainer",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Loyalty customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyPaymentContainerId",
                        "in": "path",
                        "description": "LoyaltyPaymentContainer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "loyalty Customers data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/": {
            "post": {
                "tags": [
                    "Loyalty Customers"
                ],
                "summary": "POST Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/",
                "description": "check if there are duplicated customers for a given merchant",
                "operationId": "Loyalty/Customers/checkForDuplicates",
                "parameters": [
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Loyalty customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns duplicated customers and customers without merchantcard",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customers_without_merchantcard_and_duplicated_customers"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards": {
            "get": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "GET Loyalty/MerchantCards",
                "description": "Get a list of loyalty merchant cards",
                "operationId": "Loyalty/MerchantCards/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of loyalty merchant cards",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards",
                "description": "Add new loyalty merchant card",
                "operationId": "Loyalty/MerchantCards/addMerchantCard",
                "requestBody": {
                    "description": "Loyalty merchant card properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}": {
            "get": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "GET Loyalty/MerchantCards/{loyaltyMerchantCardId}",
                "description": "Get loyalty merchant card for a specific id",
                "operationId": "Loyalty/MerchantCards/getOne",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Search one by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns loyalty merchant card for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}",
                "description": "Update loyalty merchant card",
                "operationId": "Loyalty/MerchantCards/updateMerchantCard",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Loyalty merchant card properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "DELETE Loyalty/MerchantCards/{loyaltyMerchantCardId}",
                "description": "Delete loyalty merchant card",
                "operationId": "Loyalty/MerchantCards/removeMerchantCard",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}": {
            "put": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}",
                "description": "Update loyalty card group",
                "operationId": "Loyalty/MerchantCards/updateCardGroupOfMerchantCard",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyCardGroupId",
                        "in": "path",
                        "description": "Loyalty card group id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer",
                "description": "Register new customer for a card",
                "operationId": "Loyalty/MerchantCards/registerCustomer",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Loyalty customer properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyCustomersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}",
                "description": "Set loyalty customer for a loyalty merchant card",
                "operationId": "Loyalty/MerchantCards/setCustomer",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyCustomerId",
                        "in": "path",
                        "description": "Loyalty customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock": {
            "get": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock",
                "description": "Get loyalty merchant card lock information for a specific id",
                "operationId": "Loyalty/MerchantCards/getLock",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns lock details for a specific merchant card id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOLock"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock",
                "description": "Lock merchant card",
                "operationId": "Loyalty/MerchantCards/lock",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about lock",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOLock"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Loyalty merchant card after lock",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock",
                "description": "Unlock merchant card",
                "operationId": "Loyalty/MerchantCards/unlock",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about unlock",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOLock"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Loyalty merchant card after unlock",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}": {
            "get": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}",
                "description": "Get virtual terminal data for merchant",
                "operationId": "Loyalty/MerchantCards/getVirtualTerminalData",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyMerchantId",
                        "in": "path",
                        "description": "Merchant id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns virtual terminal data for merchant",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VirtualTerminalDataModel"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Returns disabled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction",
                "description": "Execute transaction from SDK",
                "operationId": "Loyalty/MerchantCards/executeTransaction",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Transaction properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOTransaction"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsProductWithReceiptModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc",
                "description": "Check CSC",
                "operationId": "Loyalty/MerchantCards/checkCsc",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOCsc"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If CSC is correct returned value is true, false in other case",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard",
                "description": "Function to check the merchant card",
                "operationId": "Loyalty/MerchantCards/validateMerchantCard",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOValidateMerchantCard"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "returns informations about Merchantcard",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsValidateMerchantCard"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode",
                "description": "Function to save new given passcode for given merchantcard identified by cardnumber",
                "operationId": "Loyalty/MerchantCards/newPassCode",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTONewPasscode"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If new passcode was saved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode",
                "description": "Function to reset a passcode for given merchantcard",
                "operationId": "Loyalty/MerchantCards/resetPassCode",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOResetPasscode"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If passcode was reseted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode",
                "description": "Function to check the Passcode card with cardnumber",
                "operationId": "Loyalty/MerchantCards/checkPassCode",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOCheckPasscode"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If passcode was reseted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/resultBoolean"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}",
                "description": "Function to create multiple merchantcards for given merchant with given cardgroup",
                "operationId": "Loyalty/MerchantCards/createMerchantcards",
                "parameters": [
                    {
                        "name": "generalMerchantId",
                        "in": "path",
                        "description": "General merchant id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "loyaltyCardgroupId",
                        "in": "path",
                        "description": "Loyalty card group id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Cards amount",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOCardsAmount"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Loyalty merchant card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/MerchantCards/{loyaltyMerchantCardId}/getCardBalanceReceipt": {
            "post": {
                "tags": [
                    "Loyalty Merchantcards"
                ],
                "summary": "POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/getCardBalanceReceipt",
                "description": "Get card balance receipt and information about limit data and passcode protection",
                "operationId": "Loyalty/MerchantCards/CardBalanceReceipt",
                "parameters": [
                    {
                        "name": "loyaltyMerchantCardId",
                        "in": "path",
                        "description": "Loyalty merchant card id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about card & current terminal",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOCardBalanceReceipt"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The receipt and additional information about the card",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyMerchantcardsCardBalanceReceipt"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID": {
            "get": {
                "tags": [
                    "Loyalty Cardgroups"
                ],
                "summary": "GET Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID",
                "description": "Get cardgroups by merchant id",
                "operationId": "Loyalty/Sales/getCardgroupsByMerchantId",
                "parameters": [
                    {
                        "name": "generalMerchantId",
                        "in": "path",
                        "description": "Search by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns an array of cardgroups for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Transactions": {
            "get": {
                "tags": [
                    "Loyalty Transactions"
                ],
                "summary": "GET Loyalty/Transactions",
                "description": "Get a list of loyalty transactions",
                "operationId": "Loyalty/Transactions/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of loyalty card groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyTransactionsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Loyalty/Transactions/{loyaltyTransactionId}": {
            "get": {
                "tags": [
                    "Loyalty Transactions"
                ],
                "summary": "GET Loyalty/Transactions/{loyaltyTransactionId}",
                "description": "Get loyalty transaction for a specific id",
                "operationId": "Loyalty/Transactions/getOne",
                "parameters": [
                    {
                        "name": "loyaltyTransactionId",
                        "in": "path",
                        "description": "Search one by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns loyalty card group for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoyaltyTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Containers": {
            "get": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "GET Payment/Containers",
                "description": "Get a list of payment containers",
                "operationId": "Payment/Containers/paymentContainersGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment containers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContainersList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "POST Payment/Containers",
                "description": "Add new containers",
                "operationId": "Payment/Containers/paymentContainersPost",
                "requestBody": {
                    "description": "Payment container properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContainersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created payment container",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContainersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Containers/{paymentContainerId}": {
            "get": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "GET Payment/Containers/{paymentContainerId}",
                "description": "Get all payment containers",
                "operationId": "Payment/Containers/paymentContainersGetById",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Search one by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns payment container for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContainersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "PUT Payment/Containers/{paymentContainerId}",
                "description": "Update payment container",
                "operationId": "Payment/Containers/paymentContainersIdPut",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment container properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContainersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment container",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContainersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "DELETE Payment/Containers/{paymentContainerId}",
                "description": "Delete payment container",
                "operationId": "Payment/Containers/paymentContainersIdDelete",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted payment container",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentContainersProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Containers/{paymentContainerId}/Uploadmandate": {
            "post": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "POST Payment/Containers/<id>/Uploadmandate",
                "description": "Submit a signed B2B mandate",
                "operationId": "Payment/Containers/uploadMandate",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Signed B2B mandate properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadMandateDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created issue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadMandateProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Containers/{paymentContainerId}/mandate": {
            "post": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "POST Payment/Containers/<id>/mandate",
                "description": "Get an B2B mandate form",
                "operationId": "Payment/Containers/mandate",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Get an B2B mandate form properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MandateDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created issue",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MandateProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}": {
            "post": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "POST Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}",
                "description": "Assign an existing payment container to ...",
                "operationId": "Payment/Containers/paymentContainersIdAssignSecondaryIdPost",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secondaryPaymentContainerId",
                        "in": "path",
                        "description": "Id to which container will be assigned",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Affected container",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContainersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment Containers"
                ],
                "summary": "DELETE Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}",
                "description": "Removes an existing payment container assignment",
                "operationId": "Payment/Containers/paymentContainersIdAssignSecondaryIdDelete",
                "parameters": [
                    {
                        "name": "paymentContainerId",
                        "in": "path",
                        "description": "Payment container id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secondaryPaymentContainerId",
                        "in": "path",
                        "description": "Id for which container is currently assigned to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Affected container",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentContainersProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Contracts": {
            "get": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "GET Payment/Contracts",
                "description": "Get a list of payment contracts",
                "operationId": "Payment/Contracts/paymentContractsGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment contracts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "POST Payment/Contracts",
                "description": "Add new contract",
                "operationId": "Payment/Contracts/paymentContractsPost",
                "requestBody": {
                    "description": "Payment contracts properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContractsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created payment contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Contracts/{paymentContractId}": {
            "get": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "GET Payment/Contracts/{paymentContractId}",
                "description": "Get all payment contracts",
                "operationId": "Payment/Contracts/paymentContractsGetById",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Search one by provided id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns payment contract for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "PUT Payment/Contracts/{paymentContractId}",
                "description": "Update payment contract",
                "operationId": "Payment/Contracts/paymentContractsIdPut",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Payment contract id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment contracts properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContractsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "DELETE Payment/Contracts/{paymentContractId}",
                "description": "Delete payment contract",
                "operationId": "Payment/Contracts/paymentContractsIdDelete",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Payment contract id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted payment contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentContractsProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Contracts/{paymentContractId}/paymentMethods": {
            "get": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "GET Payment/Contracts/{paymentContractId}/paymentMethods",
                "description": "Get available payment methods for given contract",
                "operationId": "Payment/Contracts/paymentContractsIdPaymentMethodsGet",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Contract identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment methods possible for given contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StringList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Contracts/{paymentContractId}/clone": {
            "post": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "POST Payment/Contracts/{paymentContractId}/clone",
                "description": "Clone an existing payment contract",
                "operationId": "Payment/Contracts/clone",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Contract identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment contract clone properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContractsDTOClone"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Contracts/{paymentContractId}/requestId": {
            "post": {
                "tags": [
                    "Payment Contracts"
                ],
                "summary": "POST Payment/Contracts/{paymentContractId}/requestId",
                "description": "This method clones your payment contract, so that you can use this to separate the merchants of your marketplace. (Needs to be activated))",
                "operationId": "Payment/Contracts/requestId",
                "parameters": [
                    {
                        "name": "paymentContractId",
                        "in": "path",
                        "description": "Contract identifier of the parent",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment contract request id properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentContractsDTORequestId"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Proper response after cloning your payment contract",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentContractsRequestIdResult"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Customers": {
            "get": {
                "tags": [
                    "Payment Customers"
                ],
                "summary": "GET Payment/Customers",
                "description": "Get a list of payment customers",
                "operationId": "Payment/Containers/paymentCustomersGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment customers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCustomersList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Customers"
                ],
                "summary": "POST Payment/Customers",
                "description": "Add new customer",
                "operationId": "Payment/Containers/paymentCustomersPost",
                "requestBody": {
                    "description": "Payment customer properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentCustomersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created payment customer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Customers/{paymentCustomerId}": {
            "get": {
                "tags": [
                    "Payment Customers"
                ],
                "summary": "GET Payment/Customers/{paymentCustomerId}",
                "description": "Get all payment customers",
                "operationId": "Payment/Customers/paymentCustomersGetById",
                "parameters": [
                    {
                        "name": "paymentCustomerId",
                        "in": "path",
                        "description": "Payment customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns payment customer for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Customers"
                ],
                "summary": "PUT Payment/Customers/{paymentCustomerId}",
                "description": "Update payment customer",
                "operationId": "Payment/Customers/paymentCustomersIdPut",
                "parameters": [
                    {
                        "name": "paymentCustomerId",
                        "in": "path",
                        "description": "Payment customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment customer properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentCustomersDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment customer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCustomersProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Payment Customers"
                ],
                "summary": "DELETE Payment/Customers/{paymentCustomerId}",
                "description": "Delete payment customer",
                "operationId": "Payment/Customers/paymentCustomersIdDelete",
                "parameters": [
                    {
                        "name": "paymentCustomerId",
                        "in": "path",
                        "description": "Payment customer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted payment customer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentCustomersProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Plans": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "GET Payment/Plans",
                "description": "Get a list of payment plans",
                "operationId": "Payment/Containers/paymentPlansGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment plans",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "POST Payment/Plans",
                "description": "Add new plan",
                "operationId": "Payment/Containers/paymentPlansPost",
                "requestBody": {
                    "description": "Payment plan properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlansDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created payment plan",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Plans/{paymentPlanId}": {
            "get": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "GET Payment/Plans/{paymentPlanId}",
                "description": "Get payment plan by id",
                "operationId": "Payment/Plans/paymentPlansGetById",
                "parameters": [
                    {
                        "name": "paymentPlanId",
                        "in": "path",
                        "description": "Payment plan id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns payment plan for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "PUT Payment/Plans/{paymentPlanId}",
                "description": "Get payment plan by id",
                "operationId": "PaymentPlansApiInterface::updatePlans",
                "parameters": [
                    {
                        "name": "paymentPlanId",
                        "in": "path",
                        "description": "Payment plan id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment plans properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlansDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns payment plan for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Payment Plans"
                ],
                "summary": "PATCH Payment/Plans/{paymentPlanId}",
                "description": "Get payment plan by id",
                "operationId": "PaymentPlansApiInterface::patchPlans",
                "parameters": [
                    {
                        "name": "paymentPlanId",
                        "in": "path",
                        "description": "Payment plan id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payment plans properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPlansDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns payment plan for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPlansProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}": {
            "post": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}",
                "description": "Assign external invoice pdf",
                "operationId": "assignExternalInvoicePdf",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "Document id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Request body for assigning external invoice pdf",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionDTOExternalInvoicePdf"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document details",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionExternalInvoicePdf"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/cancel": {
            "post": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "POST Payment/{paymentMethod}/{paymentId}/cancel",
                "description": "Function to cancel the payment transaction",
                "operationId": "cancelPaymentTransactionById",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Cancel payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionCancelDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Canceled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentCancelResult"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/capture": {
            "post": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "POST Payment/{paymentMethod}/{paymentId}/capture",
                "description": "Function to cancel the payment transaction",
                "operationId": "capturePaymentTransactionById",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Capture payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionCaptureDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/basket": {
            "put": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "PUT Payment/{paymentMethod}/{paymentId}/basket",
                "description": "Update a basket of an existing payment transaction",
                "operationId": "updateBasketByPaymentId",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Update basket input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionUpdateBasketDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/accrual": {
            "put": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "PUT Payment/{paymentMethod}/{paymentId}/accrual",
                "description": "Update the accrual flag of an existing payment transaction",
                "operationId": "reverseAccrualByPaymentId",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Reverse accrual input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionReverseAccrualDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/{paymentMethod}/{paymentId}/shippingInformation": {
            "put": {
                "tags": [
                    "Payment Secupay Creditcards",
                    "Payment Secupay Debits",
                    "Payment Secupay Invoices",
                    "Payment Secupay Prepays",
                    "Payment Secupay Sofort"
                ],
                "summary": "PUT Payment/{paymentMethod}/{paymentId}/shippingInformation",
                "description": "Update the accrual flag of an existing payment transaction",
                "operationId": "setShippingInformationByPaymentId",
                "parameters": [
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "Payment id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Shipping information propertie",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionSetShippingInformationDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaycreditcards/{paymentCreditCardsId}": {
            "get": {
                "tags": [
                    "Payment Secupay Creditcards"
                ],
                "summary": "GET Payment/Secupaycreditcards/{paymentCreditCardsId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupaycreditcards/paymentSecupayCreditcardsGetById",
                "parameters": [
                    {
                        "name": "paymentCreditCardsId",
                        "in": "path",
                        "description": "Payment credit cards id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaycreditcards": {
            "post": {
                "tags": [
                    "Payment Secupay Creditcards"
                ],
                "summary": "POST Payment/Secupaycreditcards",
                "description": "Start a credit card payment transaction",
                "operationId": "Payment/Secupaycreditcards/paymentSecupaycreditcardsPost",
                "requestBody": {
                    "description": "Credit card payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaydebits/{paymentDebitId}": {
            "get": {
                "tags": [
                    "Payment Secupay Debits"
                ],
                "summary": "GET Payment/Secupaydebits/{paymentDebitId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupaydebits/paymentSecupayDebitsGetById",
                "parameters": [
                    {
                        "name": "paymentDebitId",
                        "in": "path",
                        "description": "Payment debit id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaydebits": {
            "post": {
                "tags": [
                    "Payment Secupay Debits"
                ],
                "summary": "POST Payment/Secupaydebits",
                "description": "Start a debit payment transaction",
                "operationId": "Payment/Secupaydebits/paymentSecupaydebitsPost",
                "requestBody": {
                    "description": "Debit payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Started debit payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupayinvoices/{paymentInvoiceId}": {
            "get": {
                "tags": [
                    "Payment Secupay Invoices"
                ],
                "summary": "GET Payment/Secupayinvoices/{paymentInvoiceId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupayinvoices/paymentSecupayInvoicesGetById",
                "parameters": [
                    {
                        "name": "paymentInvoiceId",
                        "in": "path",
                        "description": "Payment transaction ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupayinvoices": {
            "post": {
                "tags": [
                    "Payment Secupay Invoices"
                ],
                "summary": "POST Payment/Secupayinvoices",
                "description": "Start a invoice payment transaction",
                "operationId": "Payment/Secupayinvoices/paymentSecupayinvoicesPost",
                "requestBody": {
                    "description": "Invoice payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Started invoice payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaypayout/{paymentPayoutId}": {
            "get": {
                "tags": [
                    "Payment Secupay Payout"
                ],
                "summary": "GET Payment/Secupaypayout/{paymentPayoutId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupaypayout/getSecupaypayout",
                "parameters": [
                    {
                        "name": "paymentPayoutId",
                        "in": "path",
                        "description": "Payment payout id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayPayoutProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaypayout": {
            "post": {
                "tags": [
                    "Payment Secupay Payout"
                ],
                "summary": "POST Payment/Secupaypayout",
                "description": "Start a payout transaction",
                "operationId": "Payment/Secupaypayout/paymentSecupaypayoutPost",
                "requestBody": {
                    "description": "Payout payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayPayoutDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Started prepay payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayPayoutProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupayprepays/{paymentPrepayId}": {
            "get": {
                "tags": [
                    "Payment Secupay Prepays"
                ],
                "summary": "GET Payment/Secupayprepays/{paymentPrepayId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupayprepays/paymentSecupayPrepaysGetById",
                "parameters": [
                    {
                        "name": "paymentPrepayId",
                        "in": "path",
                        "description": "Payment prepay id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupayprepays": {
            "post": {
                "tags": [
                    "Payment Secupay Prepays"
                ],
                "summary": "POST Payment/Secupayprepays",
                "description": "Start a prepay payment transaction",
                "operationId": "Payment/Secupayprepays/paymentSecupayprepaysPost",
                "requestBody": {
                    "description": "Prepay payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Started prepay payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaysofort/{paymentPrepayId}": {
            "get": {
                "tags": [
                    "Payment Secupay Sofort"
                ],
                "summary": "GET Payment/Secupaysofort/{paymentPrepayId}",
                "description": "Get the details of a payment transaction",
                "operationId": "Payment/Secupaysofort/paymentSecupaySofortGetById",
                "parameters": [
                    {
                        "name": "paymentPrepayId",
                        "in": "path",
                        "description": "Payment prepay id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Secupaysofort": {
            "post": {
                "tags": [
                    "Payment Secupay Sofort"
                ],
                "summary": "POST Payment/Secupaysofort",
                "description": "Start a prepay payment transaction",
                "operationId": "Payment/Secupaysofort/paymentSecupaysofortPost",
                "requestBody": {
                    "description": "Prepay payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Started prepay payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Subscriptions": {
            "get": {
                "tags": [
                    "Payment Subscriptions"
                ],
                "summary": "GET Payment/Subscriptions",
                "description": "Get a list of payment subscriptions",
                "operationId": "Payment/Containers/paymentSubscriptionsGet",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentSubscriptionsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Subscriptions/{paymentSubscriptionId}": {
            "get": {
                "tags": [
                    "Payment Subscriptions"
                ],
                "summary": "GET Payment/Subscriptions/{paymentSubscriptionId}",
                "description": "Get payment subscription by id",
                "operationId": "Payment/Subscriptions/paymentSubscriptionGetById",
                "parameters": [
                    {
                        "name": "paymentSubscriptionId",
                        "in": "path",
                        "description": "Payment subscription id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns payment subscription for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentSubscriptionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions": {
            "get": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "GET Payment/Transactions",
                "description": "Get a list of payment transactions",
                "operationId": "Payment/Transactions/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of payment transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTransactionsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "POST Payment/Transactions",
                "description": "Create a payment transaction",
                "operationId": "Payment/Transaction/addTransaction",
                "requestBody": {
                    "description": "Create payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a payment transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions/{paymentTransactionId}": {
            "get": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "GET Payment/Transactions/{paymentTransactionId}",
                "description": "Get all payment transactions",
                "operationId": "Payment/Transactions/getOne",
                "parameters": [
                    {
                        "name": "paymentTransactionId",
                        "in": "path",
                        "description": "Payment transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list with all payment transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions/{paymentTransactionId}/cancel": {
            "post": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "POST Payment/Transactions/{paymentTransactionId}/cancel",
                "description": "Cancel a payment transaction",
                "operationId": "Payment/Transactions/cancel",
                "parameters": [
                    {
                        "name": "paymentTransactionId",
                        "in": "path",
                        "description": "Payment transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Cancel payment transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentTransactionCancelDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Canceled payment transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions/{paymentTransactionId}/shippingUrl": {
            "get": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "GET Payment/Transactions/{paymentTransactionId}/shippingUrl",
                "description": "Get the url where you can fill the shipping information",
                "operationId": "Payment/Transactions/getShippingUrl",
                "parameters": [
                    {
                        "name": "paymentTransactionId",
                        "in": "path",
                        "description": "Payment transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The url of the shipping information form",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTransactionsShippingUrl"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions/{paymentTransactionId}/revokeAccrual": {
            "post": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "POST Payment/Transactions/{paymentTransactionId}/revokeAccrual",
                "description": "Revoke the accrual flag of a payment transaction",
                "operationId": "Payment/Transactions/revokeAccrual",
                "parameters": [
                    {
                        "name": "paymentTransactionId",
                        "in": "path",
                        "description": "Payment transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated payment transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Payment/Transactions/{paymentTransactionId}/OldFormat": {
            "get": {
                "tags": [
                    "Payment Transactions"
                ],
                "summary": "GET Payment/Transactions/{paymentTransactionId}/OldFormat",
                "description": "Get old format for specific payment transactions",
                "operationId": "getPaymentTransactionsOldFormat",
                "parameters": [
                    {
                        "name": "paymentTransactionId",
                        "in": "path",
                        "description": "Payment ID (PCI_...) or hash",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return old format for transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecupayTransactionProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Prepaid/Contracts/{prepaidContractId}/mappingZvt": {
            "post": {
                "tags": [
                    "Prepaid Contracts Product"
                ],
                "summary": "POST Prepaid/Contracts/me/mappingZvt",
                "description": "Gets prepaid item id from product id which is configured in prepaid contracts",
                "operationId": "Prepaid/Contracts/mappingZvt",
                "parameters": [
                    {
                        "name": "prepaidContractId",
                        "in": "path",
                        "description": "Prepaid contract id",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "default": "me"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Prepaid transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrepaidZvtDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created new prepaid transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrepaidMappingZvt"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Prepaid/Items": {
            "get": {
                "tags": [
                    "Prepaid Items"
                ],
                "summary": "GET Prepaid/Items",
                "description": "Get a list of prepaid items",
                "operationId": "Prepaid/Items/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of prepaid items",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrepaidItemsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Prepaid/Items/{prepaidItemId}": {
            "get": {
                "tags": [
                    "Prepaid Items"
                ],
                "summary": "GET Prepaid/Items/{prepaidItemId}",
                "description": "Get one prepaid item for a specific id",
                "operationId": "Prepaid/Items/getOne",
                "parameters": [
                    {
                        "name": "prepaidItemId",
                        "in": "path",
                        "description": "Prepaid item id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns prepaid item for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrepaidItemsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Prepaid/Sales": {
            "post": {
                "tags": [
                    "Prepaid Sales Product"
                ],
                "summary": "POST Prepaid/Sales",
                "description": "Create new prepaid transaction",
                "operationId": "Prepaid/Sales/addSale",
                "requestBody": {
                    "description": "Prepaid transaction input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PrepaidSalesProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created new prepaid transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PrepaidSalesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Services/Uploadidents": {
            "post": {
                "tags": [
                    "Services Uploadidents Product"
                ],
                "summary": "POST Services/Uploadidents",
                "description": "Create new upload ident",
                "operationId": "Services/Uploadidents/addUploadidents",
                "requestBody": {
                    "description": "Upload idents input properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadidentsProductDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created new upload ident",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadidentsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Devices": {
            "get": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "GET Smart/Devices",
                "description": "Get a list of smart devices",
                "operationId": "Smart/Devices/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of smart devices",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "POST Smart/Devices",
                "description": "Create new smart device",
                "operationId": "Smart/Devices/addDevice",
                "requestBody": {
                    "description": "Smart device properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartDevicesDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created smart device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Devices/{smartDeviceId}": {
            "get": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "GET Smart/Devices/{smartDeviceId}",
                "description": "Get one smart device for a specific id",
                "operationId": "Smart/Devices/getOne",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns smart device for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "PUT Smart/Devices/{smartDeviceId}",
                "description": "Update smart device",
                "operationId": "Smart/Devices/updateDevice",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Smart device properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartDevicesDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated smart device",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Devices/{smartDeviceId}/routing/type/{type}": {
            "get": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "GET Smart/Devices/{smartDeviceId}/routing/type/{type}",
                "description": "Get requested smart device if it is assigned to a single routing",
                "operationId": "Smart/Devices/getRouting",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "Smart Device Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested smart device which is assigned to a routing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Devices/{smartDeviceId}/pin": {
            "put": {
                "tags": [
                    "Smart Devices"
                ],
                "summary": "PUT /Smart/Devices/{smartDeviceId}/pin",
                "description": "Update Smart Device Pin to authenticate device",
                "operationId": "Smart/Devices/updatePin",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Smart device properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartDeviceUserPin"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "current smart device object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartDevicesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Routings": {
            "get": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "GET Smart/Routings",
                "description": "Get a list of smart routings",
                "operationId": "Smart/Routings/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of smart routings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "POST Smart/Routings",
                "description": "Create new smart routing",
                "operationId": "Smart/Routings/addRouting",
                "requestBody": {
                    "description": "Smart routing properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartRoutingsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created smart routing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Routings/{smartRoutingId}": {
            "get": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "GET Smart/Routings/{smartRoutingId}",
                "description": "Get one smart routing for a specific id",
                "operationId": "Smart/Routings/getOne",
                "parameters": [
                    {
                        "name": "smartRoutingId",
                        "in": "path",
                        "description": "Smart routing id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns smart routing for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "PUT Smart/Routings/{smartRoutingId}",
                "description": "Update specific smart routing",
                "operationId": "Smart/Routings/updateRouting",
                "parameters": [
                    {
                        "name": "smartRoutingId",
                        "in": "path",
                        "description": "Smart routing id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Smart routing properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartRoutingsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated smart routing object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "DELETE Smart/Routings/{smartRoutingId}",
                "description": "Remove specific smart roting",
                "operationId": "Smart/Routings/removeRouting",
                "parameters": [
                    {
                        "name": "smartRoutingId",
                        "in": "path",
                        "description": "Smart routing id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns deleted smart routing for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}": {
            "post": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "POST Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}",
                "description": "Assign the specific smart device to the specific smart routing",
                "operationId": "Smart/Routings/assignDeviceToRouting",
                "parameters": [
                    {
                        "name": "smartRoutingId",
                        "in": "path",
                        "description": "Smart routing id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Smart routing assignment properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartRoutingPriority"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created smart routing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Smart Routings"
                ],
                "summary": "DELETE Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}",
                "description": "Remove smart routing assignment",
                "operationId": "Smart/Routings/removeSmartRoutingAssignment",
                "parameters": [
                    {
                        "name": "smartRoutingId",
                        "in": "path",
                        "description": "Smart routing id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Smart routing with an updated list of assigned smart devices",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartRoutingsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Templates": {
            "get": {
                "tags": [
                    "Smart Templates"
                ],
                "summary": "GET Smart/Templates",
                "description": "Get a list of smart templates",
                "operationId": "Smart/Templates/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of smart templates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTemplatesList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Templates/{smartTemplateId}": {
            "get": {
                "tags": [
                    "Smart Templates"
                ],
                "summary": "GET Smart/Templates/{smartTemplateId}",
                "description": "Get one smart template for a specific id",
                "operationId": "Smart/Templates/getOne",
                "parameters": [
                    {
                        "name": "smartTemplateId",
                        "in": "path",
                        "description": "Smart template id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns smart template for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTemplatesProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions": {
            "get": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "GET Smart/Transactions",
                "description": "Get a list of smart transactions",
                "operationId": "Smart/Transactions/getAll",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/count"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/fields"
                    },
                    {
                        "$ref": "#/components/parameters/query"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of smart transactions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsList"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions",
                "description": "Create new smart transaction",
                "operationId": "Smart/Transactions/addTransaction",
                "requestBody": {
                    "description": "Smart transaction properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartTransactionsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Newly created smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}": {
            "get": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "GET Smart/Transactions/{smartTransactionId}",
                "description": "Get one smart transaction for a specific id",
                "operationId": "Smart/Transactions/getOne",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns smart transaction for a specific id",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "PUT Smart/Transactions/{smartTransactionId}",
                "description": "Update smart transaction",
                "operationId": "Smart/Transactions/updateTransaction",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Smart transaction properties",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartTransactionsDTO"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/cancel": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartTransactionId}/cancel",
                "description": "Method to cancel the transaction with given idn",
                "operationId": "Smart/Transactions/cancelTransaction",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/start/{paymentMethod}": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartTransactionId}/start/{paymentMethod}",
                "description": "Start smart transaction with given payment method",
                "operationId": "Smart/Transactions/startTransaction",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information which customer and container will be used to this operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartTransactionsPrepare"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/canceltrx": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartTransactionId}/canceltrx",
                "description": "Starts Cancel 'Cash' transaction on Terminal with 'receipt_number' ('Beleg-Nr.')",
                "operationId": "Smart/Transactions/cancelTrx",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartDeviceId}/diagnosis": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartDeviceId}/diagnosis",
                "description": "Starts extended Diagnose on Terminal, this method is normally called by SDK's from cash register",
                "operationId": "Smart/Transactions/diagnose",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartDeviceId}/endOfDay": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartDeviceId}/endOfDay",
                "description": "Starts End of Day Report on Terminal, this method is normally called by SDK's from cash register",
                "operationId": "Smart/Transactions/startEndOfDayReport",
                "parameters": [
                    {
                        "name": "smartDeviceId",
                        "in": "path",
                        "description": "Smart device id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/preTransaction": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/{smartTransactionId}/preTransaction",
                "description": "Function that checks balance of merchantcard from ident and if possible creates bonus product items for basket",
                "operationId": "Smart/Transactions/preTransaction",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about missing sum and bonus products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsPreTransactionModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/prepare/{paymentMethod}": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/stx_xxx/prepare/{paymentMethod}",
                "description": "Create and score payment transaction assigned to given smart transaction",
                "operationId": "Smart/Transactions/prepare",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentMethod",
                        "in": "path",
                        "description": "Payment method",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information which customer and container will be used to this operation",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartTransactionsPrepare"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Smart/Transactions/{smartTransactionId}/setDelivery": {
            "post": {
                "tags": [
                    "Smart Transactions"
                ],
                "summary": "POST Smart/Transactions/stx_xxx/setDelivery",
                "description": "Set delivery options to given smart transaction",
                "operationId": "Smart/Transactions/setDelivery",
                "parameters": [
                    {
                        "name": "smartTransactionId",
                        "in": "path",
                        "description": "Smart transaction id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Information about the delivery status",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SmartTransactionsSetDeliveryModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Smart transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SmartTransactionsProductModel"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Response related to the error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductExceptionPayload"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ResultTrueOrFalse": {
                "properties": {
                    "result": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ResultAlwaysTrue": {
                "properties": {
                    "result": {
                        "description": "Result (will always be equal to true)",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ProductInstanceUID": {
                "description": "Object type and ID",
                "properties": {
                    "object": {
                        "description": "Object type",
                        "type": "string"
                    },
                    "id": {
                        "description": "Object ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProductInstanceID": {
                "description": "Product instance id",
                "properties": {
                    "id": {
                        "description": "Object ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Address": {
                "description": "Postal address",
                "properties": {
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "street": {
                        "description": "Street name without house number",
                        "type": "string",
                        "example": "Musterstr."
                    },
                    "street_number": {
                        "description": "House number incl. supplement",
                        "type": "string",
                        "example": [
                            "55",
                            "55a",
                            "55-57",
                            "55-57 a-b"
                        ]
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "Musterstadt"
                    },
                    "postal_code": {
                        "description": "Postal code / ZIP code",
                        "type": "string",
                        "example": "09999"
                    },
                    "country": {
                        "$ref": "#/components/schemas/IsoCountryCode"
                    },
                    "additional_address_data": {
                        "description": "Additional address line, like c/o, or an appartment number",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentInformation": {
                "description": "Bank details for withdrawals",
                "properties": {
                    "iban": {
                        "description": "International Bank Account Number (IBAN)",
                        "type": "string"
                    },
                    "bic": {
                        "description": "Bank Identifier Code (BIC), or formerly SWIFT code",
                        "type": "string"
                    },
                    "owner": {
                        "description": "Account owner name",
                        "type": "string"
                    },
                    "bankname": {
                        "description": "Bank name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BankAccountDescriptor": {
                "description": "Bank details for money transfers",
                "properties": {
                    "iban": {
                        "description": "International Bank Account Number (IBAN)",
                        "type": "string"
                    },
                    "bic": {
                        "description": "Bank Identifier Code (BIC), or formerly SWIFT code",
                        "type": "string"
                    },
                    "owner": {
                        "description": "Account owner name",
                        "type": "string"
                    },
                    "bankname": {
                        "description": "Bank name",
                        "type": "string"
                    },
                    "purpose": {
                        "description": "Purpose to use",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CreditCardDescriptor": {
                "description": "Credit card details",
                "properties": {
                    "owner": {
                        "description": "Card holder",
                        "type": "string"
                    },
                    "pan": {
                        "description": "Truncated Primary Account Number (PAN)",
                        "type": "string"
                    },
                    "expiration_date": {
                        "description": "Date and time when the card will expire; the system must pass 2023-07-01T00:00:00 if the card is valid thru 06/23",
                        "type": "string",
                        "example": "2023-07-01T00:00:00"
                    },
                    "issuer": {
                        "description": "Card brand or scheme like VISA, or MasterCard",
                        "type": "string",
                        "example": "2023-07-01T00:00:00"
                    },
                    "transact_container": {
                        "description": "transact container",
                        "type": "string"
                    },
                    "transact_skey_pubkey": {
                        "description": "transact public key",
                        "type": "string"
                    },
                    "transact_skey_keyname": {
                        "description": "transact key name",
                        "type": "string"
                    },
                    "transact_hash": {
                        "description": "transact hash",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProductExceptionPayload": {
                "description": "Payload of exceptions returned by the API",
                "properties": {
                    "status": {
                        "description": "Request status (always 'error')",
                        "type": "string",
                        "example": "error"
                    },
                    "error": {
                        "description": "Error type identifier",
                        "type": "string"
                    },
                    "error_details": {
                        "description": "Error details",
                        "type": "string"
                    },
                    "error_user": {
                        "description": "Error details in German",
                        "type": "string"
                    },
                    "code": {
                        "description": "HTTP code corresponding to error",
                        "type": "string"
                    },
                    "supportId": {
                        "description": "ID by which support team can relate error with action(s) that caused it",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Contact": {
                "properties": {
                    "forename": {
                        "description": "First name",
                        "type": "string",
                        "example": "Max"
                    },
                    "surname": {
                        "description": "Last name",
                        "type": "string",
                        "example": "Mustermann"
                    },
                    "companyname": {
                        "description": "Company name",
                        "type": "string",
                        "example": "Musterfirma GmbH"
                    },
                    "salutation": {
                        "description": "Salutation",
                        "type": "string",
                        "example": "Herr"
                    },
                    "gender": {
                        "description": "Gender",
                        "type": "string",
                        "example": "male"
                    },
                    "title": {
                        "description": "Title or academic degree",
                        "type": "string",
                        "example": "Dr."
                    },
                    "email": {
                        "description": "E-mail address",
                        "type": "string",
                        "example": "m.mustermann@example.com"
                    },
                    "phone": {
                        "description": "Landline number",
                        "type": "string",
                        "example": "+49 555 555555-0"
                    },
                    "mobile": {
                        "description": "Mobile phone number",
                        "type": "string",
                        "example": "+49 155 5555555"
                    },
                    "fax": {
                        "description": "Fax number",
                        "type": "string",
                        "example": "+49 555 555555-99"
                    },
                    "dob": {
                        "description": "Date of birth",
                        "type": "string",
                        "example": "1975-05-25T00:00:00"
                    },
                    "picture": {
                        "description": "The document ID of an user picture; s. Document service",
                        "type": "string",
                        "example": "DUP_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                    },
                    "url_website": {
                        "description": "URL to company website",
                        "type": "string",
                        "example": "https://www.example.com/"
                    },
                    "birthplace": {
                        "description": "Birthplace",
                        "type": "string",
                        "example": ""
                    },
                    "nationality": {
                        "$ref": "#/components/schemas/IsoCountryCode"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    }
                },
                "type": "object"
            },
            "GeoAddress": {
                "properties": {
                    "type": {
                        "description": "Address type",
                        "type": "string"
                    },
                    "address_components": {
                        "description": "Address components",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AddressComponents"
                        }
                    },
                    "address_formatted": {
                        "description": "Address formatted",
                        "type": "string"
                    },
                    "geometry": {
                        "$ref": "#/components/schemas/GeoAddressGeometry"
                    }
                },
                "type": "object"
            },
            "GeoAddressGeometry": {
                "description": "Geometry",
                "properties": {
                    "lat": {
                        "description": "Latitude",
                        "type": "string"
                    },
                    "lon": {
                        "description": "Longitude",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AddressComponents": {
                "description": "Address component like street, postal code, or ountry",
                "properties": {
                    "long_name": {
                        "description": "Long name",
                        "type": "string"
                    },
                    "short_name": {
                        "description": "Short name",
                        "type": "string"
                    },
                    "types": {
                        "description": "Types",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "ParentModel": {
                "properties": {
                    "object": {
                        "$ref": "#/components/schemas/ObjectType"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ObjectId"
                    },
                    "type": {
                        "description": "Parent object subtype number",
                        "type": "string",
                        "example": "21"
                    }
                },
                "type": "object"
            },
            "AssignedBy": {
                "properties": {
                    "object": {
                        "$ref": "#/components/schemas/ObjectType"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ObjectId"
                    },
                    "owner": {
                        "description": "Owner",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object"
            },
            "InvitedBy": {
                "properties": {
                    "object": {
                        "$ref": "#/components/schemas/ObjectType"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ObjectId"
                    },
                    "invited": {
                        "description": "Invited",
                        "type": "string",
                        "example": "..."
                    }
                },
                "type": "object"
            },
            "Store": {
                "properties": {
                    "object": {
                        "description": "Store object type",
                        "type": "string"
                    },
                    "id": {
                        "description": "Store object ID",
                        "type": "string",
                        "format": "id"
                    },
                    "name": {
                        "description": "Store name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OpenHours": {
                "description": "Opening hours",
                "properties": {
                    "open": {
                        "$ref": "#/components/schemas/DayTime"
                    },
                    "close": {
                        "$ref": "#/components/schemas/DayTime"
                    }
                },
                "type": "object"
            },
            "DayTime": {
                "description": "Day and time",
                "properties": {
                    "day": {
                        "description": "Day",
                        "type": "integer",
                        "example": "2020-09-14"
                    },
                    "time": {
                        "description": "Time",
                        "type": "string",
                        "example": "19:00:00"
                    }
                },
                "type": "object"
            },
            "ItemGroup": {
                "description": "E-goods product category, e. g. all cards for a vendor",
                "properties": {
                    "object": {
                        "description": "Object type",
                        "type": "string"
                    },
                    "id": {
                        "description": "Object ID",
                        "type": "string",
                        "format": "id"
                    },
                    "description": {
                        "description": "Short name, e. g. the vendor name",
                        "type": "string"
                    },
                    "logo": {
                        "description": "Document upload ID of vendor",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether the category is available",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "resultBoolean": {
                "properties": {
                    "result": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "StringList": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "ObjectType": {
                "description": "Object type",
                "type": "string",
                "readOnly": true,
                "example": "module.type"
            },
            "ObjectId": {
                "description": "Object ID",
                "type": "string",
                "format": "id",
                "readOnly": true,
                "example": "OBJ_MNTPQ9IFD3V482Y6VMHJXERBYS4J1G"
            },
            "BaseProductModel": {
                "properties": {
                    "object": {
                        "$ref": "#/components/schemas/ObjectType"
                    },
                    "id": {
                        "$ref": "#/components/schemas/ObjectId"
                    }
                },
                "type": "object"
            },
            "ParentObj": {
                "properties": {
                    "object": {
                        "description": "Parent object type",
                        "type": "string"
                    },
                    "id": {
                        "description": "Parent object ID",
                        "type": "string",
                        "format": "id"
                    },
                    "trans_id": {
                        "description": "Transaction ID",
                        "type": "integer"
                    },
                    "ref_type_id": {
                        "description": "Ref type ID",
                        "type": "integer"
                    },
                    "relation_type": {
                        "description": "Relation type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Currency": {
                "description": "ISO-4217 alpha-3 currency code",
                "type": "string",
                "default": "EUR",
                "pattern": "^[A-Z]{3}$"
            },
            "MoneyAmount": {
                "description": "Amount in minor currency unit (e. g. Euro Cent)",
                "type": "integer",
                "example": 1995
            },
            "EanOrGtin": {
                "description": "European Article Number (EAN) or Global Trade Item Number (GTIN)",
                "type": "string",
                "pattern": "^\\d+$",
                "example": "4990123456789"
            },
            "TaxRate": {
                "description": "Tax rate in percent",
                "type": "integer",
                "example": [
                    19,
                    16
                ]
            },
            "IsoDateTime": {
                "description": "ISO-8601 formatted date and time, incl. timezone",
                "type": "string",
                "example": "2020-09-04T18:09:51+02:00"
            },
            "CreatedField": {
                "properties": {
                    "created": {
                        "$ref": "#/components/schemas/IsoDateTime"
                    }
                },
                "type": "object"
            },
            "UpdatedField": {
                "properties": {
                    "updated": {
                        "$ref": "#/components/schemas/IsoDateTime"
                    }
                },
                "type": "object"
            },
            "IsoCountryCode": {
                "description": "ISO-3166 alpha-2 country code",
                "type": "string",
                "example": "DE"
            },
            "DocumentUploadsDTOContent": {
                "properties": {
                    "content": {
                        "description": "Content",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DocumentUploadsBaseProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    }
                ]
            },
            "DocumentUploadsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DocumentUploadsBaseProductModel"
                    },
                    {
                        "properties": {
                            "type": {
                                "description": "Type",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name",
                                "type": "string"
                            },
                            "size": {
                                "description": "Size",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "fileToUpload": {
                "description": "File to upload",
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "example": "/path/to/file.txt"
                    }
                },
                "type": "object"
            },
            "GeneralContractsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "parent": {
                                "$ref": "#/components/schemas/ParentModel"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "pay_in_advance_account": {
                                "$ref": "#/components/schemas/BankAccountDescriptor"
                            },
                            "payment_link_options": {
                                "$ref": "#/components/schemas/PaymentLinkOptions"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "GetAvailablePaymentMethodsDTO": {
                "required": [
                    "currency",
                    "is_demo"
                ],
                "properties": {
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "is_demo": {
                        "description": "Demo mode. Such transactions are not actually processed.",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object"
            },
            "GeneralContractsList": {
                "properties": {
                    "count": {
                        "description": "Number of matching General Contracts",
                        "type": "integer"
                    },
                    "data": {
                        "description": "GeneralContractsList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralContractsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentLinkOptions": {
                "properties": {
                    "background": {
                        "$ref": "#/components/schemas/BackgroundImageOption"
                    }
                },
                "type": "object"
            },
            "BackgroundImageOption": {
                "properties": {
                    "enabled": {
                        "description": "Indicator if background image for Payment Link is enabled",
                        "type": "boolean"
                    },
                    "image_url": {
                        "description": "The URL to background image for Payment Link",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "id_old": {
                                "description": "ID in secupay Frontend",
                                "type": "integer",
                                "format": "id",
                                "readOnly": true,
                                "example": "2345678"
                            },
                            "type": {
                                "description": "User type ID - unverified shop (1); internet\nshop (11); kaufmännischer Netzbetrieb (KNB, 45); secucard merchant (46);\nApp Center user (63), checkout provider (64)",
                                "type": "string",
                                "example": "21"
                            },
                            "user": {
                                "$ref": "#/components/schemas/GeneralMerchantsUser"
                            },
                            "parent": {
                                "$ref": "#/components/schemas/ParentModel"
                            },
                            "assigned_by": {
                                "description": "Assigned by",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssignedBy"
                                }
                            },
                            "invited_by": {
                                "description": "Invited by",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InvitedBy"
                                }
                            },
                            "legal_details": {
                                "description": "Legal details like terms of use, privacy policy, or imprint",
                                "type": "object",
                                "items": {
                                    "$ref": "#/components/schemas/GeneralMerchantsLegalDetails"
                                }
                            },
                            "urls": {
                                "description": "URLs",
                                "type": "object",
                                "items": {
                                    "$ref": "#/components/schemas/GeneralMerchantsUrls"
                                }
                            },
                            "store_name": {
                                "description": "Store name",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "GeneralMerchantsDTO": {
                "properties": {
                    "salutation": {
                        "description": "Salutation {'Frau', 'Herr', 'Firma', 'Divers'}",
                        "type": "string",
                        "example": "Firma"
                    },
                    "companyname": {
                        "description": "Company name",
                        "type": "string",
                        "example": "Musterfirma GmbH"
                    },
                    "forename": {
                        "description": "First name",
                        "type": "string",
                        "example": "Max"
                    },
                    "surname": {
                        "description": "Last name",
                        "type": "string",
                        "example": "Mustermann"
                    },
                    "dob": {
                        "description": "Date of birth",
                        "type": "string"
                    },
                    "homepage": {
                        "description": "Merchant homepage or shop URL",
                        "type": "string",
                        "example": "https://shop.example.com/"
                    },
                    "email": {
                        "description": "Merchant email address",
                        "type": "string",
                        "example": "m.mustermann@example.com"
                    },
                    "phone": {
                        "description": "Merchant phone number",
                        "type": "string",
                        "example": "+49 555 5555555-0"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "payment_data": {
                        "$ref": "#/components/schemas/PaymentInformation"
                    },
                    "legal_details": {
                        "description": "Legal details, like terms of use, privacy policy, or imprint",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralMerchantsLegalDetails"
                        }
                    },
                    "urls": {
                        "description": "URLs",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralMerchantsUrls"
                        }
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsUser": {
                "properties": {
                    "object": {
                        "description": "Object of General Merchant user",
                        "type": "string",
                        "example": "general.merchant"
                    },
                    "id": {
                        "description": "ID of General Merchant user",
                        "type": "string",
                        "example": "GCR_xxx"
                    },
                    "name": {
                        "description": "Name of General Merchant user",
                        "type": "string",
                        "example": "Max Mustermann"
                    },
                    "companyname": {
                        "description": "Company name of General Merchant user",
                        "type": "string",
                        "example": "Musterfirma GmbH"
                    },
                    "address": {
                        "description": "Address of General Merchant user",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeoAddress"
                        }
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsLegalDetails": {
                "properties": {
                    "url": {
                        "description": "URL",
                        "type": "string",
                        "example": "https://shop.example.com/privacy+policy"
                    },
                    "type": {
                        "description": "Document type: 'imprint', 'revocation' (cancellation policy), 'terms' (terms of use), 'policy' (privacy policy), or 'logo' ",
                        "type": "string",
                        "example": "policy"
                    },
                    "content_type": {
                        "description": "MIME type",
                        "type": "string",
                        "example": "application/pdf"
                    },
                    "language": {
                        "description": "Language code {'de', 'en', ...}",
                        "type": "string",
                        "example": "de"
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsUrls": {
                "properties": {
                    "type": {
                        "description": "Type of URL - {'url_success', 'url_failure', 'url_abort', 'url_error', 'url_checkout'}",
                        "type": "string",
                        "example": "url_success"
                    },
                    "url": {
                        "description": "URL",
                        "type": "string",
                        "example": "https://shop.example.com/basket?reason=payment_failed"
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing General Merchants",
                        "type": "integer",
                        "example": 1
                    },
                    "data": {
                        "description": "GeneralMerchantsList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralMerchantsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "GeneralMerchantsPublicDataModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "legal_details": {
                                "description": "Legal details like terms of use, privacy policy, or imprint",
                                "type": "object",
                                "items": {
                                    "$ref": "#/components/schemas/GeneralMerchantsLegalDetails"
                                }
                            },
                            "company": {
                                "$ref": "#/components/schemas/GeneralMerchantsPublicDataCompany"
                            },
                            "merchant_urls": {
                                "description": "URLs",
                                "type": "object",
                                "items": {
                                    "$ref": "#/components/schemas/GeneralMerchantsUrls"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "GeneralMerchantsPublicDataCompany": {
                "properties": {
                    "companyname": {
                        "description": "Company name of General Merchant user",
                        "type": "string",
                        "example": "Musterfirma GmbH"
                    },
                    "address": {
                        "$ref": "#/components/schemas/GeoAddress"
                    }
                },
                "type": "object"
            },
            "GeneralStoresProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "id_old": {
                                "description": "ID in secupay Frontend",
                                "type": "string",
                                "format": "id"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "store_name": {
                                "description": "Store name",
                                "type": "string"
                            },
                            "facebook_id": {
                                "description": "Facebook ID",
                                "type": "string"
                            },
                            "source": {
                                "description": "Source",
                                "type": "string"
                            },
                            "key": {
                                "description": "Key",
                                "type": "string"
                            },
                            "hash": {
                                "description": "Hash",
                                "type": "string"
                            },
                            "address_components": {
                                "description": "Address components",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AddressComponents"
                                }
                            },
                            "address_formatted": {
                                "description": "Formatted address",
                                "type": "string"
                            },
                            "phone_number_formatted": {
                                "description": "Formatted phone number",
                                "type": "string"
                            },
                            "geometry": {
                                "$ref": "#/components/schemas/GeoAddressGeometry"
                            },
                            "name": {
                                "description": "Store name",
                                "type": "string"
                            },
                            "name_raw": {
                                "description": "Raw store name",
                                "type": "string"
                            },
                            "photo_main": {
                                "description": "Main photo",
                                "type": "string"
                            },
                            "photo": {
                                "description": "All photos",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "category_main": {
                                "description": "Main category",
                                "type": "string"
                            },
                            "category": {
                                "description": "All categories",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "url_googleplus": {
                                "description": "Google+ URL of the store",
                                "type": "string"
                            },
                            "url_website": {
                                "description": "Store website URL (e. g. a webpage of yours with the details of this store)",
                                "type": "string"
                            },
                            "open_hours": {
                                "description": "Opening hours per weekday",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OpenHours"
                                }
                            },
                            "open_now": {
                                "description": "Whether the store is just open",
                                "type": "boolean"
                            },
                            "open_time": {
                                "description": "Opening time",
                                "type": "string"
                            },
                            "utc_offset": {
                                "description": "UTC offset",
                                "type": "string"
                            },
                            "assigned_by": {
                                "description": "Assigned by",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/AssignedBy"
                                }
                            },
                            "invited_by": {
                                "description": "Invited by",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InvitedBy"
                                }
                            },
                            "has_beacon": {
                                "description": "Whether the store has a WiFi beacon",
                                "type": "boolean"
                            },
                            "acceptance_point": {
                                "description": "Whether the store is a secucard acceptance point",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "GeneralStoresDTOReason": {
                "properties": {
                    "reason": {
                        "description": "Reason",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GeneralStoresDTOType": {
                "properties": {
                    "type": {
                        "description": "Type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GeneralStoresDTO": {
                "properties": {
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "merchant": {
                        "description": "Merchant",
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "facebook_id": {
                        "description": "New facebook ID",
                        "type": "string"
                    },
                    "phone": {
                        "description": "New phone number",
                        "type": "string"
                    },
                    "url_website": {
                        "description": "New URL to general store website",
                        "type": "string"
                    },
                    "photo_main": {
                        "description": "New main photo",
                        "type": "string"
                    },
                    "photo": {
                        "description": "New photos",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "open_hours": {
                        "description": "Opening hours per weekday",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OpenHours"
                        }
                    }
                },
                "type": "object"
            },
            "GeneralStoresList": {
                "properties": {
                    "count": {
                        "description": "Number of existing general stores",
                        "type": "integer"
                    },
                    "data": {
                        "description": "GeneralStoresList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GeneralStoresProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "LoyaltyCardgroupsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "merchant": {
                                "$ref": "#/components/schemas/LoyaltyCardgroupsDTOMerchant"
                            },
                            "display_name": {
                                "description": "Loyalty card group display name",
                                "type": "string"
                            },
                            "display_name_raw": {
                                "description": "Loyalty card group display name raw",
                                "type": "string"
                            },
                            "stock_warn_limit": {
                                "description": "Loyalty card group stock warn limit",
                                "type": "string"
                            },
                            "picture": {
                                "description": "Loyalty card group picture",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyCardgroupsDTO": {
                "properties": {
                    "display_name": {
                        "description": "Display name",
                        "type": "string"
                    },
                    "display_name_raw": {
                        "description": "Display name raw",
                        "type": "string"
                    },
                    "stock_warn_limit": {
                        "description": "Stock warn limit",
                        "type": "string"
                    },
                    "picture": {
                        "description": "Picture",
                        "type": "string"
                    },
                    "merchant": {
                        "$ref": "#/components/schemas/LoyaltyCardgroupsDTOMerchant"
                    }
                },
                "type": "object"
            },
            "LoyaltyCardgroupsDTOMerchant": {
                "properties": {
                    "id": {
                        "description": "Merchant id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyCardgroupsDTOCheckPasscodeEnabled": {
                "properties": {
                    "action": {
                        "description": "Action type",
                        "type": "string"
                    },
                    "cardnumber": {
                        "description": "Secucard number",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyCardgroupsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing loyalty card groups",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "LoyaltyCardsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "properties": {
                            "account": {
                                "$ref": "#/components/schemas/LoyaltyCardsDTOAccount"
                            },
                            "cardnumber": {
                                "description": "Loyalty card number",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyCardsDTOAccount": {
                "properties": {
                    "object": {
                        "description": "LoyaltyCardsDTOAccount",
                        "type": "string"
                    },
                    "id": {
                        "description": "LoyaltyCardsDTOAccount",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CardPin": {
                "properties": {
                    "pin": {
                        "description": "Loyalty card pin consisting of four numbers",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyCardsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing loyalty cards",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoyaltyCardsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "LoyaltyCustomersProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "properties": {
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "contact": {
                                "$ref": "#/components/schemas/Contact"
                            },
                            "merchant_contact": {
                                "$ref": "#/components/schemas/Contact"
                            },
                            "account_contact": {
                                "$ref": "#/components/schemas/Contact"
                            },
                            "payment_container": {
                                "description": "payment container",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LoyaltyCustomersPaymentContainerModel"
                                }
                            },
                            "customernumber": {
                                "description": "Customer number",
                                "type": "string"
                            },
                            "note": {
                                "description": "Customer number",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyCustomersContactDTO": {
                "properties": {
                    "forename": {
                        "description": "Forename",
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone",
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/Address"
                    }
                },
                "type": "object"
            },
            "LoyaltyCustomersDTO": {
                "properties": {
                    "merchant": {
                        "description": "merchant",
                        "type": "string"
                    },
                    "merchant_contact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "age": {
                        "description": "Age",
                        "type": "integer"
                    },
                    "days_until_birthday": {
                        "description": "Number of days until birthday",
                        "type": "integer"
                    },
                    "customernumber": {
                        "description": "Customer number",
                        "type": "string"
                    },
                    "note": {
                        "description": "note",
                        "type": "string"
                    },
                    "additional_data": {
                        "description": "Consent for communication",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "LoyaltyCustomersPaymentContainerModel": {
                "properties": {
                    "object": {
                        "description": "LoyaltyCustomersPaymentContainerModel",
                        "type": "string"
                    },
                    "id": {
                        "description": "LoyaltyCustomersPaymentContainerModel",
                        "type": "string"
                    },
                    "type": {
                        "description": "LoyaltyCustomersPaymentContainerModel",
                        "type": "string"
                    },
                    "payment_information": {
                        "$ref": "#/components/schemas/BankAccountDescriptor"
                    },
                    "last_usage": {
                        "description": "Last Usage date",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyCustomersList": {
                "properties": {
                    "count": {
                        "description": "Number of existing loyalty customers",
                        "type": "integer"
                    },
                    "data": {
                        "description": "LoyaltyCustomersList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "customers_without_merchantcard_and_duplicated_customers": {
                "properties": {
                    "customers_without_merchantcard": {
                        "description": "customers without merchantcard",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "duplicated_customers": {
                        "description": "duplicated customers",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "LoyaltyCustomersRemoved": {
                "properties": {
                    "deleted": {
                        "description": "Result is true or false",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsProductModel": {
                "description": "Loyalty merchant card",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "card": {
                                "$ref": "#/components/schemas/LoyaltyCardsProductModel"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "created_for_merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "created_for_store": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "customer": {
                                "$ref": "#/components/schemas/LoyaltyCustomersProductModel"
                            },
                            "cardgroup": {
                                "$ref": "#/components/schemas/LoyaltyCardgroupsProductModel"
                            },
                            "payment_container": {
                                "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOPaymentContainer"
                            },
                            "balance": {
                                "description": "Loyalty merchant card balance",
                                "type": "integer"
                            },
                            "points": {
                                "description": "Loyalty merchant card points",
                                "type": "integer"
                            },
                            "bonus_balance": {
                                "description": "Loyalty merchant card bonus balance",
                                "type": "integer"
                            },
                            "cash_balance": {
                                "description": "Loyalty merchant card cash balance",
                                "type": "integer"
                            },
                            "stock_status": {
                                "description": "Loyalty merchant card stock status",
                                "type": "string"
                            },
                            "lock_status": {
                                "description": "Loyalty merchant card lock status",
                                "type": "string"
                            },
                            "last_usage": {
                                "description": "Loyalty merchant card last usage",
                                "type": "string"
                            },
                            "last_charge": {
                                "description": "Loyalty merchant card last charge",
                                "type": "string"
                            },
                            "is_base_card": {
                                "description": "Information whether loyalty merchant card is base card",
                                "type": "boolean"
                            },
                            "passcode": {
                                "description": "Loyalty merchant card passcode",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyMerchantcardsProductWithReceiptModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                    },
                    {
                        "properties": {
                            "receipt_header": {
                                "description": "Receipt header",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ReceiptType"
                                }
                            },
                            "receipt": {
                                "description": "Receipt",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ReceiptTypeValue"
                                }
                            },
                            "trans_id": {
                                "description": "Created TransactionId",
                                "type": "integer"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ReceiptTypeValue": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ReceiptType"
                    },
                    {
                        "properties": {
                            "value": {
                                "$ref": "#/components/schemas/ReceiptValue"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ReceiptType": {
                "properties": {
                    "type": {
                        "description": "Type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ReceiptValue": {
                "properties": {
                    "caption": {
                        "description": "Caption",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value",
                        "type": "string"
                    },
                    "text": {
                        "description": "Text",
                        "type": "string"
                    },
                    "decoration": {
                        "description": "Decoration",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsValidateMerchantCard": {
                "properties": {
                    "isValid": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "hasPasscode": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "isLocked": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsCardBalanceReceipt": {
                "properties": {
                    "valid": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "balance": {
                        "description": "The total cash balance of the card",
                        "type": "integer"
                    },
                    "points": {
                        "description": "The total points balance of the card",
                        "type": "integer"
                    },
                    "new_passcode": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "receipt_header": {
                        "description": "Receipt header",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptType"
                        }
                    },
                    "receipt": {
                        "description": "Receipt",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceiptTypeValue"
                        }
                    },
                    "amount_split_enabled": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "limit_allowed": {
                        "description": "Result has true or false value",
                        "type": "boolean"
                    },
                    "limit_str": {
                        "description": "A formatted string of the limit in euro with currency code",
                        "type": "string"
                    },
                    "limit": {
                        "description": "How much the card balance can be negative, zero means unlimited in case limit_allowed is true",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOPaymentContainer": {
                "properties": {
                    "object": {
                        "description": "Object of payment container",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of payment container",
                        "type": "string",
                        "format": "id"
                    },
                    "type": {
                        "description": "Type of payment container",
                        "type": "string"
                    },
                    "payment_information": {
                        "$ref": "#/components/schemas/PaymentInformation"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTO": {
                "properties": {
                    "merchant": {
                        "description": "General merchant id",
                        "type": "string"
                    },
                    "card": {
                        "description": "Loyalty card id",
                        "type": "string"
                    },
                    "payment_container": {
                        "description": "Loyalty payment container id",
                        "type": "string"
                    },
                    "created_by_merchant": {
                        "description": "Created by general merchant or not",
                        "type": "boolean"
                    },
                    "used_by_merchant": {
                        "description": "Used by general merchant or not",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOLock": {
                "properties": {
                    "lock_status": {
                        "description": "Lock status",
                        "type": "string"
                    },
                    "reason": {
                        "description": "Lock reason",
                        "type": "string"
                    },
                    "note": {
                        "description": "Lock note",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "VirtualTerminalDataModel": {
                "properties": {
                    "store": {
                        "description": "Store",
                        "type": "object"
                    },
                    "tid": {
                        "description": "Terminal id",
                        "type": "string"
                    },
                    "actions": {
                        "description": "Actions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "gift_terminal": {
                        "description": "Gift terminal",
                        "type": "integer"
                    },
                    "amount_split_enabled": {
                        "description": "Amount split enabled",
                        "type": "integer"
                    },
                    "disabled": {
                        "description": "Disabled",
                        "type": "integer",
                        "default": "0"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOCsc": {
                "properties": {
                    "cardnumber": {
                        "description": "Card number",
                        "type": "integer"
                    },
                    "csc": {
                        "description": "Card security code",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOTransaction": {
                "properties": {
                    "action": {
                        "description": "Action",
                        "type": "string"
                    },
                    "terminal_id": {
                        "description": "Terminal id",
                        "type": "string"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "tid": {
                        "description": "Tid",
                        "type": "string"
                    },
                    "store": {
                        "description": "Store id",
                        "type": "string"
                    },
                    "cardnumber": {
                        "description": "Card number",
                        "type": "integer"
                    },
                    "bonus_amount": {
                        "description": "Bonus amount",
                        "type": "integer"
                    },
                    "amount_split_allowed": {
                        "description": "Amount split allowed",
                        "type": "string"
                    },
                    "merchant_id": {
                        "description": "Merchant id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOValidateMerchantCard": {
                "properties": {
                    "merchant": {
                        "description": "General Merchant id",
                        "type": "string"
                    },
                    "cardnumber": {
                        "description": "Loyalty Card number",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTONewPasscode": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LoyaltyMerchantcardsDTOValidateMerchantCard"
                    },
                    {
                        "properties": {
                            "passcode": {
                                "description": "Loyalty Card passcode",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyMerchantcardsDTOCheckPasscode": {
                "properties": {
                    "cardnumber": {
                        "description": "Loyalty Card number",
                        "type": "integer"
                    },
                    "pin": {
                        "description": "Loyalty Card pin",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOResetPasscode": {
                "properties": {
                    "cardnumber": {
                        "description": "Loyalty Card number",
                        "type": "integer"
                    },
                    "passcode": {
                        "description": "Loyalty Card passcode",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOCardsAmount": {
                "properties": {
                    "cards_amount": {
                        "description": "Cards amount",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsDTOCardBalanceReceipt": {
                "properties": {
                    "cardnumber": {
                        "description": "Loyalty Card number",
                        "type": "integer"
                    },
                    "terminal_id": {
                        "description": "Terminal id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyMerchantcardsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing loyalty merchant cards",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "disabled": {
                "properties": {
                    "disabled": {
                        "description": "Disabled",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "raw_merchantcard_id": {
                "properties": {
                    "result": {
                        "description": "Result contains raw merchant card id or null",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "properties": {
                            "merchant": {
                                "$ref": "#/components/schemas/LoyaltyTransactionsDTOMerchant"
                            },
                            "cardgroup": {
                                "$ref": "#/components/schemas/LoyaltyTransactionsDTOCardgroup"
                            },
                            "store": {
                                "$ref": "#/components/schemas/LoyaltyTransactionsDTOStore"
                            },
                            "merchantcard": {
                                "$ref": "#/components/schemas/LoyaltyTransactionsDTOMerchantcard"
                            },
                            "card": {
                                "$ref": "#/components/schemas/LoyaltyTransactionsDTOCard"
                            },
                            "parents": {
                                "description": "LoyaltyTransactionsProductModel",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LoyaltyTransactionsDTORelatedTransactions"
                                }
                            },
                            "children": {
                                "description": "LoyaltyTransactionsProductModel",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/LoyaltyTransactionsDTORelatedTransactions"
                                }
                            },
                            "tid": {
                                "description": "The TID of the processed Smart Device",
                                "type": "string"
                            },
                            "status": {
                                "description": "The status text of the Loyalty Transaction",
                                "type": "string"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "balance": {
                                "description": "The balance of the merchantcard after this Loyalty Transaction",
                                "type": "integer"
                            },
                            "description": {
                                "description": "Loyalty Transaction type",
                                "type": "string"
                            },
                            "last_changee": {
                                "description": "Last change oif this transaction, most like a status change",
                                "type": "string"
                            },
                            "receipt": {
                                "description": "Receipt",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ReceiptTypeValue"
                                }
                            },
                            "is_cancelling": {
                                "description": "Indicator for a cancelling transaction (1 = full-cancel, 3 = partial-cancel)",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LoyaltyTransactionsDTOMerchant": {
                "properties": {
                    "id": {
                        "description": "Merchant id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsDTOCardgroup": {
                "properties": {
                    "id": {
                        "description": "Cardgroup id",
                        "type": "string"
                    },
                    "display_name": {
                        "description": "Cardgroup Name",
                        "type": "string"
                    },
                    "stock_warn_limit": {
                        "description": "Warn limit for Cardgroup stock",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsDTOStore": {
                "properties": {
                    "id": {
                        "description": "General Store id",
                        "type": "string"
                    },
                    "name": {
                        "description": "General Store Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsDTOMerchantcard": {
                "properties": {
                    "id": {
                        "description": "Merchantcard id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsDTOCard": {
                "properties": {
                    "id": {
                        "description": "Loyalty Card id",
                        "type": "string"
                    },
                    "cardnumber": {
                        "description": "Loyalty Card Cardnumber",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsDTORelatedTransactions": {
                "properties": {
                    "id": {
                        "description": "Loyalty Transaction id",
                        "type": "string"
                    },
                    "trans_id": {
                        "description": "Loyalty Transaction trans_id",
                        "type": "integer"
                    },
                    "ref_type_id": {
                        "description": "Indicator for relation type of Loyalty Transactions",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LoyaltyTransactionsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing loyalty transactions",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LoyaltyTransactionsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentContainersProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "contract": {
                                "$ref": "#/components/schemas/PaymentContractsProductModel"
                            },
                            "customer": {
                                "$ref": "#/components/schemas/PaymentCustomersProductModel"
                            },
                            "assign": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "type": {
                                "description": "Type of payment container",
                                "type": "string"
                            },
                            "public": {
                                "$ref": "#/components/schemas/OneOfPaymentContainersDTOModelPrivate"
                            },
                            "private": {
                                "$ref": "#/components/schemas/OneOfPaymentContainersDTOModelPrivate"
                            },
                            "mandate": {
                                "$ref": "#/components/schemas/PaymentContainerMandate"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentContainersDTO": {
                "properties": {
                    "customer": {
                        "description": "The customer of this payment container",
                        "properties": {
                            "id": {
                                "description": "Customer identifier",
                                "type": "string"
                            }
                        },
                        "type": "object",
                        "deprecated": true
                    },
                    "customer_id": {
                        "description": "Payment-Customer-ID",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of Payment Containers",
                        "type": "string"
                    },
                    "private": {
                        "$ref": "#/components/schemas/OneOfPaymentContainersDTOModelPrivate"
                    }
                },
                "type": "object"
            },
            "UploadMandateProductModel": {
                "properties": {
                    "service_issue_id": {
                        "description": "Newly created issue id",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UploadMandateDTO": {
                "properties": {
                    "document_id": {
                        "description": "Document id for assign",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MandateProductModel": {
                "properties": {
                    "mandate_url": {
                        "description": "Link to sepamandate B2B doc",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MandateDTO": {
                "properties": {
                    "customer_id": {
                        "description": "Customer id",
                        "type": "string"
                    },
                    "type": {
                        "description": "Mandate type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentContainerMandate": {
                "properties": {
                    "sepa_mandate_id": {
                        "description": "Sepa mandate id",
                        "type": "string"
                    },
                    "iban": {
                        "description": "IBAN",
                        "type": "string"
                    },
                    "bic": {
                        "description": "BIC",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status",
                        "type": "string"
                    },
                    "identification": {
                        "description": "Identification",
                        "type": "string"
                    },
                    "creditor_id": {
                        "description": "Creditor ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentContainersList": {
                "properties": {
                    "count": {
                        "description": "Number of existing payment containers",
                        "type": "integer"
                    },
                    "data": {
                        "description": "PaymentContainersList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentContainersProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "OneOfPaymentContainersDTOModelPrivate": {
                "description": "Payment instrument data",
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "bank_account": "#/components/schemas/BankAccountDescriptor",
                        "credit_card": "#/components/schemas/CreditCardDescriptor"
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BankAccountDescriptor"
                    },
                    {
                        "$ref": "#/components/schemas/CreditCardDescriptor"
                    }
                ]
            },
            "PaymentContractsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "parent": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "pay_in_account": {
                                "$ref": "#/components/schemas/PaymentInformation"
                            },
                            "demo": {
                                "description": "Is this a demo contract",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentContractsDTO": {
                "properties": {
                    "merchant": {
                        "description": "Contracts Merchant",
                        "type": "string"
                    },
                    "internal_reference": {
                        "description": "The internal user id",
                        "type": "string"
                    },
                    "contract_id": {
                        "description": "Contracts id",
                        "type": "string"
                    },
                    "demo": {
                        "description": "Is this a demo contract",
                        "type": "string"
                    },
                    "url_push": {
                        "description": "An URL where your service listen for push notifications of the secuconnect service",
                        "type": "string"
                    },
                    "unique_order_id": {
                        "description": "Bool, default FALSE. If TRUE, an error message will be thrown if you try to create a new payment transaction with the same order_id of an previous transaction.",
                        "type": "boolean"
                    },
                    "scoring": {
                        "description": "Bool, default TRUE. If FALSE, the customer scoring is disabled for your payment contract",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PaymentContractsDTOClone": {
                "properties": {
                    "project": {
                        "description": "Name of the project (must be unique)",
                        "type": "string",
                        "example": "My super fancy project #1"
                    },
                    "payment_data": {
                        "$ref": "#/components/schemas/PaymentInformation"
                    },
                    "payin_account": {
                        "description": "Pay in account",
                        "type": "boolean",
                        "default": "false"
                    },
                    "url_push": {
                        "description": "The default URL where your service listen for push notifications of the secuconnect service",
                        "type": "string",
                        "example": "https://example.com/"
                    }
                },
                "type": "object"
            },
            "PaymentContractsDTORequestId": {
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/Contact"
                    },
                    "project": {
                        "description": "Name of the project (must be unique)",
                        "type": "string",
                        "example": "My super fancy project #1"
                    },
                    "payout_account": {
                        "$ref": "#/components/schemas/PaymentInformation"
                    },
                    "iframe_opts": {
                        "$ref": "#/components/schemas/PaymentContractsDTOIFrameOpts"
                    },
                    "payin_account": {
                        "description": "Pay in account",
                        "type": "boolean",
                        "default": "false"
                    },
                    "create_first_store": {
                        "description": "Create first store",
                        "type": "boolean",
                        "default": "false"
                    },
                    "store_name": {
                        "description": "Store name",
                        "type": "string"
                    },
                    "payout_purpose": {
                        "description": "Payout purpose",
                        "type": "string",
                        "example": "payout_purpose_example"
                    }
                },
                "type": "object"
            },
            "PaymentContractsDTOIFrameOpts": {
                "properties": {
                    "show_basket": {
                        "description": "Display the basket items to the customer during the checkout",
                        "type": "boolean",
                        "example": "true"
                    },
                    "basket_title": {
                        "description": "Default headline of the checkout page",
                        "type": "string",
                        "example": "Projext XY unterstützen"
                    },
                    "submit_button_title": {
                        "description": "Default naming of the Submit-Button",
                        "type": "string",
                        "example": "Zahlungspflichtig unterstützen"
                    },
                    "logo_base64": {
                        "description": "Logo base64-enconded",
                        "type": "string"
                    },
                    "cession": {
                        "description": "Cession ('formal', 'personal')",
                        "type": "string",
                        "default": "personal"
                    }
                },
                "type": "object"
            },
            "PaymentContractsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing payment contracts",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentContractsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentContractsRequestIdResult": {
                "properties": {
                    "contract": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "merchant": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "store": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "apikey": {
                        "description": "Returns the apikey of the created merchant",
                        "type": "string"
                    },
                    "payin_account": {
                        "$ref": "#/components/schemas/PaymentInformation"
                    }
                },
                "type": "object"
            },
            "PaymentCustomersProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "contract": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "contact": {
                                "$ref": "#/components/schemas/Contact"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentCustomersDTO": {
                "properties": {
                    "contact": {
                        "$ref": "#/components/schemas/Contact"
                    }
                },
                "type": "object"
            },
            "PaymentCustomersList": {
                "properties": {
                    "count": {
                        "description": "Number of existing payment customers",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentCustomersProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentPlansProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "description": {
                                "description": "Description of payment plan",
                                "type": "string"
                            },
                            "currency": {
                                "description": "ISO currency code",
                                "type": "string"
                            },
                            "paypal_plan_id": {
                                "description": "Payment plan id",
                                "type": "string"
                            },
                            "status": {
                                "description": "Payment plan status",
                                "type": "string"
                            },
                            "payment_methods": {
                                "description": "Payment methods",
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "paypal"
                                }
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/GeneralMerchantsProductModel"
                            },
                            "billing_cycles": {
                                "description": "Billing cycles",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/BillingCyclesItem"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "BillingCyclesItem": {
                "properties": {
                    "sequence": {
                        "description": "sequence",
                        "type": "integer"
                    },
                    "interval": {
                        "$ref": "#/components/schemas/PaymentPlanInterval"
                    },
                    "tenure_type": {
                        "description": "Tenure type",
                        "type": "string"
                    },
                    "total_cycles": {
                        "description": "Total cycles",
                        "type": "integer"
                    },
                    "price": {
                        "description": "Price",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PaymentPlanInterval": {
                "properties": {
                    "unit": {
                        "description": "Unit",
                        "type": "string"
                    },
                    "count": {
                        "description": "Count",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PaymentPlansDTO": {
                "properties": {
                    "description": {
                        "description": "Description of payment plan",
                        "type": "string"
                    },
                    "currency": {
                        "description": "ISO currency code",
                        "type": "string"
                    },
                    "paypal_plan_id": {
                        "description": "Payment plan id",
                        "type": "string"
                    },
                    "status": {
                        "description": "Payment plan status",
                        "type": "string"
                    },
                    "payment_methods": {
                        "description": "Payment methods",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "paypal"
                        }
                    },
                    "merchant": {
                        "$ref": "#/components/schemas/GeneralMerchantsProductModel"
                    },
                    "billing_cycles": {
                        "description": "Billing cycles",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BillingCyclesItem"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentPlansList": {
                "properties": {
                    "count": {
                        "description": "Number of existing plans",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentPlansProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "SecupayTransactionProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "trans_id": {
                                "description": "Transaction identifier",
                                "type": "integer"
                            },
                            "status": {
                                "description": "Transaction status",
                                "type": "string"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "purpose": {
                                "description": "The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.",
                                "type": "string"
                            },
                            "order_id": {
                                "description": "Specifying an order number. Depending on the contract setting, this must be unique for each payment.",
                                "type": "string"
                            },
                            "payment_id": {
                                "description": "Payment ID",
                                "type": "string"
                            },
                            "basket": {
                                "description": "A list of items that are being purchased.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SecupayBasketItem"
                                }
                            },
                            "transaction_status": {
                                "description": "Transaction status (number)",
                                "type": "string"
                            },
                            "accrual": {
                                "description": "Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.",
                                "type": "boolean"
                            },
                            "payment_action": {
                                "description": "Specifies whether a pre-authorization (\"authorization\") or instant payment ( \"sale\") is to be performed. Standard value here is \"sale\". The collection of the pre-authorized payment is made with the \"capture\" command.",
                                "type": "string"
                            },
                            "transfer_purpose": {
                                "description": "The purpose the payer needs to use for his transfer",
                                "type": "string"
                            },
                            "transfer_account": {
                                "$ref": "#/components/schemas/PaymentInformation"
                            },
                            "customer": {
                                "$ref": "#/components/schemas/PaymentCustomersProductModel"
                            },
                            "used_payment_instrument": {
                                "description": "The payment data which has the payer used (like bank account, credit card, ...). This data is always masked.",
                                "properties": {
                                    "type": {
                                        "description": "The type of the payment instrument data, like: 'bank_account' or 'credit_card'",
                                        "type": "string"
                                    },
                                    "data": {
                                        "$ref": "#/components/schemas/OneOfPaymentContainersDTOModelPrivate"
                                    }
                                },
                                "type": "object"
                            },
                            "redirect_url": {
                                "$ref": "#/components/schemas/SecupayRedirectUrl"
                            },
                            "subscription": {
                                "$ref": "#/components/schemas/SecupayTransactionProductDTOSubscription"
                            },
                            "iframe_url": {
                                "description": "The url of the payment checkout iframe",
                                "type": "string"
                            },
                            "container": {
                                "$ref": "#/components/schemas/PaymentContainersProductModel"
                            },
                            "sub_transactions": {
                                "description": "A list of sub transactions (for mixed basket)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SecupaySubTransactionProductModel"
                                }
                            },
                            "mandate": {
                                "$ref": "#/components/schemas/PaymentContainerMandate"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SecupayTransactionProductDTO": {
                "properties": {
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "purpose": {
                        "description": "The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.",
                        "type": "string"
                    },
                    "payment_methods": {
                        "description": "payment methods",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "twint"
                        }
                    },
                    "order_id": {
                        "description": "Specifying an order number. Depending on the contract setting, this must be unique for each payment.",
                        "type": "string"
                    },
                    "basket": {
                        "description": "A list of items that are being purchased.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecupayBasketItem"
                        }
                    },
                    "accrual": {
                        "description": "Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.",
                        "type": "boolean"
                    },
                    "payment_action": {
                        "description": "Specifies whether a pre-authorization (\"authorization\") or instant payment (\"sale\") is to be performed. Standard value here is \"sale\". The collection of the pre-authorized payment is made with the \"capture\" command.",
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/PaymentCustomersProductModel"
                    },
                    "redirect_url": {
                        "$ref": "#/components/schemas/SecupayRedirectUrl"
                    },
                    "contract": {
                        "description": "Contract id",
                        "type": "string"
                    },
                    "container": {
                        "description": "Container id",
                        "type": "string"
                    },
                    "opt_data": {
                        "description": "Options for customizing the checkout page",
                        "properties": {
                            "has_accepted_disclaimer": {
                                "description": "Customer accepted disclaimer",
                                "type": "string"
                            },
                            "language": {
                                "description": "Client language",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "subscription": {
                        "$ref": "#/components/schemas/SecupayTransactionProductDTOSubscription"
                    },
                    "demo": {
                        "description": "Demo",
                        "type": "boolean"
                    },
                    "experience": {
                        "description": "Customer experience score",
                        "properties": {
                            "positive": {
                                "description": "Score of positive experience (paid orders)",
                                "type": "integer"
                            },
                            "negative": {
                                "description": "Score of negative experience (open/unpaid orders)",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionProductDTOSubscription": {
                "description": "Recurring payments",
                "properties": {
                    "purpose": {
                        "description": "The purpose of the subscription",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of subscription, if exists",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SecupaySubTransactionProductModel": {
                "description": "SecupaySubTransactionProductModel",
                "properties": {
                    "id": {
                        "description": "id",
                        "type": "string"
                    },
                    "trans_id": {
                        "description": "trans_id",
                        "type": "integer"
                    },
                    "reference_id": {
                        "description": "reference_id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SecupayRedirectUrl": {
                "properties": {
                    "iframe_url": {
                        "description": "The url of the payment checkout iframe",
                        "type": "string"
                    },
                    "url_success": {
                        "description": "After successfully entering the cash data of the payer is returned to this page.",
                        "type": "string"
                    },
                    "url_failure": {
                        "description": "After canceling or on errors the payer will be redirected to this page and can select there an another payment method.",
                        "type": "string"
                    },
                    "url_push": {
                        "description": "The secupay system will be send status change notifications to this URL.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SecupayBaseBasketItem": {
                "description": "Item describing single position in basket in transaction",
                "properties": {
                    "item_type": {
                        "description": "Line type {'article', 'sub_transaction', 'stakeholder_payment', 'shipping', 'subscription'}",
                        "type": "string",
                        "default": "article"
                    },
                    "article_number": {
                        "description": "Your article number, storage key unit (SKU)",
                        "type": "string",
                        "example": "990815"
                    },
                    "quantity": {
                        "description": "Quantity of articles in item",
                        "type": "integer",
                        "example": "2"
                    },
                    "name": {
                        "description": "Descriptive article name",
                        "type": "string",
                        "example": "Veggie dog food, 5 kg"
                    },
                    "model": {
                        "description": "Model of item",
                        "type": "string",
                        "example": "Tomato potato"
                    },
                    "ean": {
                        "$ref": "#/components/schemas/EanOrGtin"
                    },
                    "tax": {
                        "description": "Tax rate in percent (integer values only)",
                        "type": "string"
                    },
                    "total": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "price": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "apikey": {
                        "description": "API key (only for stakeholder payments)",
                        "type": "string"
                    },
                    "plan_id": {
                        "description": "Subscription plan id",
                        "type": "string"
                    },
                    "start_at": {
                        "description": "Subscription start at date",
                        "type": "string"
                    },
                    "transaction_hash": {
                        "description": "Original transaction hash (only for payouts)",
                        "type": "string"
                    },
                    "contract_id": {
                        "description": "Contract ID (only for stakeholder payments)",
                        "type": "string"
                    },
                    "reference_id": {
                        "description": "Unique line identifier, used to maintain the basket before the transaction is executed",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SecupayBasketItem": {
                "description": "Item describing single position in basket in transaction",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SecupayBaseBasketItem"
                    },
                    {
                        "properties": {
                            "sub_basket": {
                                "description": "Mixed-Basket: All basket items for one merchant.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SecupayBasketItem"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SecupayTransactionDTOExternalInvoicePdf": {
                "properties": {
                    "update_existing": {
                        "description": "Update existing invoice PDF",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionExternalInvoicePdf": {
                "properties": {
                    "document": {
                        "description": "Information about the saved document",
                        "properties": {
                            "id": {
                                "description": "The Document File ID",
                                "type": "string"
                            },
                            "mime_type": {
                                "description": "The MIME Type",
                                "type": "string"
                            },
                            "name": {
                                "description": "The file name",
                                "type": "string"
                            },
                            "size": {
                                "description": "The size of the file in bytes",
                                "type": "integer"
                            },
                            "url": {
                                "description": "The download-url to this file",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionCancelDTO": {
                "properties": {
                    "contract": {
                        "$ref": "#/components/schemas/PaymentContractsProductModel"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "reduce_stakeholder_payment": {
                        "description": "Mixed-Basket: (percentage) reduce the stakeholder amount too",
                        "type": "boolean",
                        "default": "false"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionCaptureDTO": {
                "properties": {
                    "contract": {
                        "$ref": "#/components/schemas/PaymentContractsProductModel"
                    },
                    "shipping_information": {
                        "$ref": "#/components/schemas/SecupayTransactionSetShippingInformationDTO"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionUpdateBasketDTO": {
                "properties": {
                    "contract": {
                        "$ref": "#/components/schemas/PaymentContractsProductModel"
                    },
                    "basket": {
                        "description": "A list of items that are being purchased.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecupayBasketItem"
                        }
                    }
                },
                "type": "object"
            },
            "SecupayTransactionReverseAccrualDTO": {
                "properties": {
                    "accrual": {
                        "description": "Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE).",
                        "type": "boolean",
                        "default": "false"
                    }
                },
                "type": "object"
            },
            "SecupayTransactionSetShippingInformationDTO": {
                "properties": {
                    "carrier": {
                        "description": "Shipping provider name",
                        "type": "string"
                    },
                    "tracking_id": {
                        "description": "Tracking-ID",
                        "type": "string"
                    },
                    "invoice_number": {
                        "description": "Merchants invoice number",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentCancelResult": {
                "description": "Refund information",
                "properties": {
                    "new_trans_id": {
                        "description": "The transaction ID of the refund transaction",
                        "type": "integer",
                        "default": "0"
                    },
                    "demo": {
                        "description": "Demo",
                        "type": "boolean",
                        "default": "false"
                    },
                    "result": {
                        "$ref": "#/components/schemas/PaymentCancelResultDetails"
                    }
                },
                "type": "object"
            },
            "PaymentCancelResultDetails": {
                "description": "Refund information",
                "properties": {
                    "new_trans_id": {
                        "description": "The transaction ID of the refund transaction",
                        "type": "integer",
                        "default": "0"
                    },
                    "remaining_amount": {
                        "description": "The remaining amount in case of a partial refund/cancel",
                        "type": "integer",
                        "default": "0"
                    },
                    "refund_waiting_for_payment": {
                        "description": "If the merchant needs to transfer money back, this will be true",
                        "type": "boolean",
                        "default": "false"
                    }
                },
                "type": "object"
            },
            "SecupayPayoutProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "trans_id": {
                                "description": "ID of transaction",
                                "type": "integer"
                            },
                            "status": {
                                "description": "Transaction status",
                                "type": "string"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "purpose": {
                                "description": "The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.",
                                "type": "string"
                            },
                            "order_id": {
                                "description": "Specifying an order number. Depending on the contract setting, this must be unique for each payment.",
                                "type": "string"
                            },
                            "transaction_status": {
                                "description": "Transaction status (number)",
                                "type": "string"
                            },
                            "transaction_list": {
                                "description": "A list of transaction items",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SecupayTransactionListItem"
                                }
                            },
                            "transfer_purpose": {
                                "description": "The purpose the payer needs to use for his transfer",
                                "type": "string"
                            },
                            "transfer_account": {
                                "$ref": "#/components/schemas/PaymentInformation"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SecupayTransactionListItem": {
                "properties": {
                    "item_type": {
                        "description": "Category of item",
                        "type": "string",
                        "default": "transaction_payout"
                    },
                    "reference_id": {
                        "description": "Reference id - must be unique for the entire basket",
                        "type": "string"
                    },
                    "name": {
                        "description": "Item name",
                        "type": "string"
                    },
                    "transaction_hash": {
                        "description": "Id of transaction",
                        "type": "string",
                        "example": [
                            "pbkacphkbuem2772626"
                        ]
                    },
                    "transaction_id": {
                        "description": "Id of transaction",
                        "type": "string",
                        "example": [
                            "PCI_WR67G325XTG2R45JJDNBG048PW4BN4"
                        ]
                    },
                    "container_id": {
                        "description": "Payment Container ID",
                        "type": "string",
                        "example": [
                            "PCT_2BV27QVYR2N26P2S5H3G98G66X9JAJ"
                        ]
                    },
                    "total": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    }
                },
                "type": "object"
            },
            "SecupayPayoutDTO": {
                "properties": {
                    "redirect_url": {
                        "$ref": "#/components/schemas/SecupayRedirectUrl"
                    },
                    "contract": {
                        "description": "The contract ID",
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/PaymentCustomersProductModel"
                    },
                    "opt_data": {
                        "description": "Options for customizing the checkout page",
                        "properties": {
                            "language": {
                                "description": "Client language",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "purpose": {
                        "description": "The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.",
                        "type": "string"
                    },
                    "order_id": {
                        "description": "Specifying an order number. Depending on the contract setting, this must be unique for each payment.",
                        "type": "string"
                    },
                    "transaction_list": {
                        "description": "A list of transaction items",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SecupayTransactionListItem"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentSubscriptionsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "smart_transaction": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "contract": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "customer": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "container": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "plan": {
                                "$ref": "#/components/schemas/BaseProductModel"
                            },
                            "start_at": {
                                "description": "start at",
                                "type": "string"
                            },
                            "status": {
                                "description": "status",
                                "type": "string"
                            },
                            "paypal_subscription_id": {
                                "description": "paypal_subscription_id",
                                "type": "string"
                            },
                            "billing_cycles": {
                                "description": "Billing cycles",
                                "properties": {
                                    "cycle_executions": {
                                        "description": "cycle executions",
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/BillingCyclesItem"
                                        }
                                    },
                                    "next_billing_time": {
                                        "description": "next billing time",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentSubscriptionsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing subscriptions",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentSubscriptionsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentTransactionsProductModel": {
                "description": "The Payment Transaction manages the payment process, from authorization till the payment is really executed.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "platform": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/GeneralMerchantsProductModel"
                            },
                            "store": {
                                "$ref": "#/components/schemas/GeneralStoresProductModel"
                            },
                            "trans_id": {
                                "description": "Transaction ID in secupay Frontend",
                                "type": "integer"
                            },
                            "parents": {
                                "description": "Parent transactions",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ParentObj"
                                }
                            },
                            "product_id": {
                                "description": "Payment product ID",
                                "type": "integer"
                            },
                            "product": {
                                "description": "Payment product type",
                                "type": "string"
                            },
                            "product_raw": {
                                "description": "Payment product name",
                                "type": "string"
                            },
                            "zahlungsmittel_id": {
                                "description": "Internal ID of the payment instrument",
                                "type": "integer"
                            },
                            "contract_id": {
                                "description": "Merchant's contract ID",
                                "type": "integer"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "status": {
                                "description": "Transaction status ID",
                                "type": "integer"
                            },
                            "status_text": {
                                "description": "Transaction status description",
                                "type": "string"
                            },
                            "incoming_payment_date": {
                                "description": "Date when the payment was received",
                                "type": "string"
                            },
                            "details": {
                                "description": "Transaction details",
                                "properties": {
                                    "amount": {
                                        "$ref": "#/components/schemas/MoneyAmount"
                                    },
                                    "cleared": {
                                        "description": "Clearing status",
                                        "type": "string"
                                    },
                                    "status": {
                                        "description": "Transaction status ID",
                                        "type": "integer"
                                    },
                                    "status_text": {
                                        "description": "Transaction status description",
                                        "type": "string"
                                    },
                                    "status_simple": {
                                        "description": "Transaction simple-status ID",
                                        "type": "integer"
                                    },
                                    "status_text_simple": {
                                        "description": "Transaction simple-status description",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "Transaction description",
                                        "type": "string"
                                    },
                                    "description_raw": {
                                        "description": "Transaction description (plain text)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "customer": {
                                "description": "PaymentTransactionsProductModel",
                                "properties": {
                                    "companyname": {
                                        "description": "Customer company name",
                                        "type": "string"
                                    },
                                    "salutation": {
                                        "description": "Customer salutation",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "Customer title",
                                        "type": "string"
                                    },
                                    "forename": {
                                        "description": "Customer forename",
                                        "type": "string"
                                    },
                                    "surname": {
                                        "description": "Customer surname",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            },
                            "tid": {
                                "description": "Terminal-ID",
                                "type": "string"
                            },
                            "payment_data": {
                                "description": "Data of the used payment instrument",
                                "type": "string"
                            },
                            "store_name": {
                                "description": "Store name",
                                "type": "string"
                            },
                            "payout_date": {
                                "description": "Date when the payout was created",
                                "type": "string"
                            },
                            "invoice_number": {
                                "description": "Invoice number (from merchant)",
                                "type": "string"
                            },
                            "transaction_hash": {
                                "description": "Payment-ID",
                                "type": "string"
                            },
                            "reference_id": {
                                "description": "Reference ID",
                                "type": "string"
                            },
                            "account_owner": {
                                "description": "Name of the bank account owner",
                                "type": "string"
                            },
                            "accrual": {
                                "description": "Accrual Flag",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentTransactionsInstructions": {
                "properties": {
                    "lang": {
                        "description": "Language",
                        "type": "string"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    },
                    "payment": {
                        "$ref": "#/components/schemas/BankAccountDescriptor"
                    }
                },
                "type": "object"
            },
            "PaymentTransactionCancelDTO": {
                "properties": {
                    "reason": {
                        "description": "The reason of this cancel or refund",
                        "type": "string"
                    },
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "reduce_stakeholder_payment": {
                        "description": "Mixed-Basket: (percentage) reduce the stakeholder amount too",
                        "type": "boolean",
                        "default": "false"
                    },
                    "container_id": {
                        "description": "Payment Container ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentTransactionsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing payment transactions",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PaymentTransactionsCancelList": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                }
            },
            "PaymentTransactionsShippingUrl": {
                "properties": {
                    "url": {
                        "description": "The url of the shipping information form",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PrepaidMappingZvt": {
                "properties": {
                    "item": {
                        "description": "Prepaid item",
                        "properties": {
                            "id": {
                                "description": "prepaid item id",
                                "type": "integer"
                            }
                        },
                        "type": "object"
                    },
                    "vtc_id": {
                        "description": "Vtc id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PrepaidZvtDTO": {
                "properties": {
                    "amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "product_id": {
                        "description": "Product identifier",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PrepaidItemsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "properties": {
                            "retail_price": {
                                "description": "Retail price",
                                "type": "integer"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "description": {
                                "description": "Description",
                                "type": "string"
                            },
                            "logo": {
                                "description": "Logo",
                                "type": "string"
                            },
                            "commission": {
                                "description": "Commission",
                                "type": "integer"
                            },
                            "vtc_id": {
                                "description": "Vtc id",
                                "type": "string"
                            },
                            "itemgroup": {
                                "$ref": "#/components/schemas/ItemGroup"
                            },
                            "stock_limit_max": {
                                "description": "Stock limit max",
                                "type": "integer"
                            },
                            "stock_limit_min": {
                                "description": "Stock limit min",
                                "type": "integer"
                            },
                            "taxable": {
                                "description": "Taxable",
                                "type": "boolean"
                            },
                            "type": {
                                "description": "Type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PrepaidItemsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing prepaid items",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PrepaidItemsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "PrepaidSalesProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "properties": {
                            "status": {
                                "description": "Status",
                                "type": "string"
                            },
                            "stock": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "item": {
                                "$ref": "#/components/schemas/PrepaidSalesItem"
                            },
                            "itemgroup": {
                                "$ref": "#/components/schemas/ItemGroup"
                            },
                            "smart_device": {
                                "$ref": "#/components/schemas/PrepaidSalesSmartDevice"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "store": {
                                "$ref": "#/components/schemas/Store"
                            },
                            "contract": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "demo": {
                                "description": "Demo",
                                "type": "boolean"
                            },
                            "description": {
                                "description": "Description",
                                "type": "string"
                            },
                            "amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "currency": {
                                "$ref": "#/components/schemas/Currency"
                            },
                            "commission": {
                                "description": "Commission",
                                "type": "integer"
                            },
                            "commission_currency": {
                                "description": "Commission currency",
                                "type": "string"
                            },
                            "code": {
                                "description": "Code",
                                "type": "string"
                            },
                            "serial": {
                                "description": "Serial",
                                "type": "string"
                            },
                            "cardnumber": {
                                "description": "Card number",
                                "type": "string"
                            },
                            "expire_date": {
                                "description": "Expire date",
                                "type": "string"
                            },
                            "provider_delivery_number": {
                                "description": "Provider delivery number",
                                "type": "string"
                            },
                            "receipt_header": {
                                "description": "Receipt header",
                                "type": "string"
                            },
                            "receipt_customer": {
                                "description": "Receipt customer",
                                "type": "string"
                            },
                            "receipt_zvt": {
                                "description": "Receipt zvt",
                                "type": "string"
                            },
                            "receipt_dealer": {
                                "description": "Receipt dealer",
                                "type": "string"
                            },
                            "vtc_tid": {
                                "description": "Vtc tid",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PrepaidSalesItem": {
                "properties": {
                    "object": {
                        "description": "Object of item",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of item",
                        "type": "string",
                        "format": "id"
                    },
                    "description": {
                        "description": "Item description",
                        "type": "string"
                    },
                    "logo": {
                        "description": "Item logo",
                        "type": "string"
                    },
                    "type": {
                        "description": "Item type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PrepaidSalesSmartDevice": {
                "properties": {
                    "object": {
                        "description": "Object of smart device",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of smart device",
                        "type": "string"
                    },
                    "description": {
                        "description": "Smart device description",
                        "type": "string"
                    },
                    "vendor_uid": {
                        "description": "Smart device vendor uid",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PrepaidSalesProductDTO": {
                "properties": {
                    "item": {
                        "description": "prepaid sales transaction id",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UploadidentsProductModel": {
                "properties": {
                    "service_issue_id": {
                        "description": "Service issue id",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "UploadidentsProductDTO": {
                "properties": {
                    "merchant_id": {
                        "description": "Merchant ID",
                        "type": "string"
                    },
                    "payment_id": {
                        "description": "Payment ID",
                        "type": "string"
                    },
                    "contract_id": {
                        "description": "Contract ID",
                        "type": "string"
                    },
                    "apikey": {
                        "description": "Api Key",
                        "type": "string"
                    },
                    "service_issue_id": {
                        "description": "Service issue id",
                        "type": "integer"
                    },
                    "document_ids": {
                        "description": "List of documents ids",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "SmartDevicesProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "properties": {
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "store": {
                                "$ref": "#/components/schemas/Store"
                            },
                            "contract": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "vendor": {
                                "description": "Vendor",
                                "type": "string"
                            },
                            "vendor_uid": {
                                "description": "Vendor uid",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type",
                                "type": "string"
                            },
                            "device": {
                                "$ref": "#/components/schemas/SmartDevicesDevice"
                            },
                            "routing": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "user_pin": {
                                "description": "User pin",
                                "type": "string"
                            },
                            "products": {
                                "$ref": "#/components/schemas/SmartDevicesProducts"
                            },
                            "description": {
                                "description": "Description",
                                "type": "string"
                            },
                            "tid": {
                                "description": "TID",
                                "type": "string"
                            },
                            "idle_screen_register": {
                                "description": "Idle screen register",
                                "type": "string"
                            },
                            "idle_screen_terminal": {
                                "description": "Idle screen terminal",
                                "type": "string"
                            },
                            "online": {
                                "description": "Online",
                                "type": "boolean"
                            },
                            "refresh": {
                                "description": "Last refresh timestamp",
                                "type": "integer"
                            },
                            "terminal_type": {
                                "description": "Terminal type",
                                "type": "string"
                            },
                            "base_version": {
                                "description": "Base version",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartDevicesProducts": {
                "properties": {
                    "loyalty": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "smart": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "cashreg": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "collect": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "showcase": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "vtm": {
                        "$ref": "#/components/schemas/SmartDeviceProductsEnabled"
                    },
                    "prepaid": {
                        "$ref": "#/components/schemas/SmartDeviceProductsPrepaid"
                    }
                },
                "type": "object"
            },
            "SmartDeviceProductsEnabled": {
                "properties": {
                    "enabled": {
                        "description": "Enabled",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SmartDeviceProductsPrepaid": {
                "properties": {
                    "enabled": {
                        "description": "Enabled",
                        "type": "boolean"
                    },
                    "simulate_force": {
                        "description": "Simulate force",
                        "type": "boolean"
                    },
                    "demo_force": {
                        "description": "Demo force",
                        "type": "boolean"
                    },
                    "vtc_tid": {
                        "description": "Vtc tid",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartDevicesDevice": {
                "properties": {
                    "object": {
                        "description": "Object of device",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of device",
                        "type": "string"
                    },
                    "serial_number": {
                        "description": "Serial number",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartDevicesDTO": {
                "properties": {
                    "merchant": {
                        "description": "Merchant",
                        "type": "string"
                    },
                    "store": {
                        "description": "Store",
                        "type": "string"
                    },
                    "device": {
                        "description": "Device",
                        "type": "string"
                    },
                    "contract": {
                        "description": "Contract",
                        "type": "string"
                    },
                    "vendor": {
                        "description": "Vendor",
                        "type": "string"
                    },
                    "vendor_uid": {
                        "description": "Vendor uid",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description",
                        "type": "string"
                    },
                    "tid": {
                        "description": "TID",
                        "type": "string"
                    },
                    "products": {
                        "$ref": "#/components/schemas/SmartDevicesProducts"
                    },
                    "terminal_type": {
                        "description": "Terminal type",
                        "type": "string"
                    },
                    "base_version": {
                        "description": "Base version",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartDevicesList": {
                "properties": {
                    "count": {
                        "description": "Number of existing smart devices",
                        "type": "integer"
                    },
                    "data": {
                        "description": "SmartDevicesList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartDevicesProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartDeviceUserPin": {
                "properties": {
                    "user_pin": {
                        "description": "user code from authentication response",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartRoutingsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "merchant": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "store": {
                                "$ref": "#/components/schemas/Store"
                            },
                            "description": {
                                "description": "Description",
                                "type": "string"
                            },
                            "assign": {
                                "description": "Assign",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartRoutingsAssign"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartRoutingsAssign": {
                "properties": {
                    "object": {
                        "description": "Object of smart routing assign",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of smart routing assign",
                        "type": "string",
                        "format": "id"
                    },
                    "priority": {
                        "description": "Priority",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartRoutingsDTO": {
                "properties": {
                    "store": {
                        "description": "General store ID",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartRoutingsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing smart routings",
                        "type": "integer"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartRoutingsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartRoutingPriority": {
                "properties": {
                    "priority": {
                        "description": "Priority",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SmartTemplatesProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "name": {
                                "description": "Name of smart template",
                                "type": "string"
                            },
                            "description": {
                                "description": "Description of smart template",
                                "type": "string"
                            },
                            "default_language": {
                                "description": "Default Language configured for this template",
                                "type": "string"
                            },
                            "header": {
                                "description": "Header definition of smart template",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTemplatesComponentModel"
                                }
                            },
                            "footer": {
                                "description": "Footer definition of smart template",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTemplatesComponentModel"
                                }
                            },
                            "pages": {
                                "description": "Definition of different pages in smart template",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTemplatesComponentModel"
                                }
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartTemplatesComponentModel": {
                "properties": {
                    "id": {
                        "description": "Id of component item of the page",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of component item",
                        "type": "string"
                    },
                    "config": {
                        "description": "The component configuration",
                        "type": "object"
                    },
                    "condition": {
                        "description": "The component conditions to determine when this component should be shown",
                        "type": "object"
                    },
                    "elements": {
                        "description": "The elements inside the page component",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTemplatesElementModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTemplatesElementModel": {
                "properties": {
                    "id": {
                        "description": "Id of element item of the component",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The element type",
                        "type": "string"
                    },
                    "config": {
                        "description": "The element configuration",
                        "type": "object"
                    },
                    "condition": {
                        "description": "The element conditions to determine when this element should be shown",
                        "type": "object"
                    },
                    "accordion_elements": {
                        "description": "The accordion items to be shown in accordion element",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTemplatesAccordionItemModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTemplatesAccordionItemModel": {
                "properties": {
                    "id": {
                        "description": "Id of element item of the component",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The element type",
                        "type": "string"
                    },
                    "config": {
                        "description": "The element configuration",
                        "type": "object"
                    },
                    "condition": {
                        "description": "The element conditions to determine when this element should be shown",
                        "type": "object"
                    },
                    "elements": {
                        "description": "The child elements to be shown inside an accordion item",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTemplatesElementModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTemplatesList": {
                "properties": {
                    "count": {
                        "description": "Number of existing smart transactions",
                        "type": "integer"
                    },
                    "data": {
                        "description": "SmartTemplatesList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTemplatesProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTransactionsProductModel": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BaseProductModel"
                    },
                    {
                        "$ref": "#/components/schemas/CreatedField"
                    },
                    {
                        "$ref": "#/components/schemas/UpdatedField"
                    },
                    {
                        "properties": {
                            "status": {
                                "description": "Status of smart transaction",
                                "type": "string"
                            },
                            "merchant": {
                                "$ref": "#/components/schemas/SmartTransactionsMerchant"
                            },
                            "contract": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "provider_contract": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "customer": {
                                "$ref": "#/components/schemas/PaymentCustomersProductModel"
                            },
                            "shipping_address": {
                                "$ref": "#/components/schemas/PaymentCustomersProductModel"
                            },
                            "container": {
                                "$ref": "#/components/schemas/SmartTransactionsContainer"
                            },
                            "checkin": {
                                "$ref": "#/components/schemas/SmartTransactionsCheckin"
                            },
                            "merchantRef": {
                                "description": "Merchant reference",
                                "type": "string"
                            },
                            "transactionRef": {
                                "description": "Transaction reference",
                                "type": "string"
                            },
                            "store": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "device_source": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "device_destination": {
                                "$ref": "#/components/schemas/ProductInstanceUID"
                            },
                            "receipt_number": {
                                "description": "Receipt number",
                                "type": "integer"
                            },
                            "receipt": {
                                "description": "Receipt",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTransactionsReceipt"
                                }
                            },
                            "receipt_merchant": {
                                "description": "Receipt merchant",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTransactionsReceipt"
                                }
                            },
                            "receipt_merchant_print": {
                                "description": "Receipt merchant print",
                                "type": "boolean"
                            },
                            "basket_info": {
                                "$ref": "#/components/schemas/SmartTransactionsBasketInfo"
                            },
                            "basket": {
                                "$ref": "#/components/schemas/SmartTransactionsBasket"
                            },
                            "idents": {
                                "description": "Idents",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SmartTransactionsIdent"
                                }
                            },
                            "tax_rate": {
                                "$ref": "#/components/schemas/TaxRate"
                            },
                            "tax_amount": {
                                "$ref": "#/components/schemas/MoneyAmount"
                            },
                            "cashier": {
                                "description": "Cashier",
                                "type": "string"
                            },
                            "market": {
                                "description": "Market",
                                "type": "string"
                            },
                            "delivery_options": {
                                "$ref": "#/components/schemas/OneOfSmartTransactionsDeliveryOptionsModel"
                            },
                            "product": {
                                "description": "Product",
                                "type": "string"
                            },
                            "trans_id": {
                                "description": "Transaction id",
                                "type": "integer"
                            },
                            "payment_method": {
                                "description": "Payment method",
                                "type": "string",
                                "example": [
                                    "debit"
                                ]
                            },
                            "transactions": {
                                "description": "Payment Transactions",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/PaymentTransactionsProductModel"
                                }
                            },
                            "last_visited_page": {
                                "description": "Last visited page",
                                "type": "string"
                            },
                            "is_demo": {
                                "description": "Demo payment",
                                "type": "boolean"
                            },
                            "checkout_links": {
                                "$ref": "#/components/schemas/SmartTransactionsCheckoutLinks"
                            },
                            "intent": {
                                "description": "intent of transaction",
                                "type": "string"
                            },
                            "iframe_url": {
                                "description": "IFrame URL",
                                "type": "string"
                            },
                            "prepaid_sales": {
                                "$ref": "#/components/schemas/SmartTransactionsPrepaidSalesDetails"
                            },
                            "communications": {
                                "$ref": "#/components/schemas/SmartTransactionsCommunication"
                            },
                            "payment_links": {
                                "$ref": "#/components/schemas/SmartTransactionsPaymentLinks"
                            },
                            "application_context": {
                                "$ref": "#/components/schemas/SmartTransactionsApplicationContext"
                            },
                            "payment_instructions": {
                                "$ref": "#/components/schemas/PaymentInstructions"
                            },
                            "payment_context": {
                                "$ref": "#/components/schemas/PaymentContext"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "OneOfSmartTransactionsDeliveryOptionsModel": {
                "type": "object",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "collection": "#/components/schemas/SmartTransactionsCollectionModel",
                        "shipping": "#/components/schemas/SmartTransactionsShippingModel"
                    }
                },
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SmartTransactionsShippingModel"
                    },
                    {
                        "$ref": "#/components/schemas/SmartTransactionsCollectionModel"
                    }
                ]
            },
            "SmartTransactionsShippingModel": {
                "properties": {
                    "type": {
                        "description": "Type of delivery option",
                        "type": "string"
                    },
                    "shipped_at": {
                        "description": "Shipment Date",
                        "type": "string"
                    },
                    "shipped_by": {
                        "description": "Parcel Provider",
                        "type": "string"
                    },
                    "tracking_code": {
                        "description": "Tracking Code",
                        "type": "string"
                    },
                    "invoice_number": {
                        "description": "Invoice Number",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsTimeSlot": {
                "properties": {
                    "start_date": {
                        "description": "Start Date",
                        "type": "string"
                    },
                    "end_date": {
                        "description": "End Date",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsCollectionModel": {
                "properties": {
                    "type": {
                        "description": "Type of delivery option",
                        "type": "string"
                    },
                    "scheduled_slot": {
                        "$ref": "#/components/schemas/SmartTransactionsTimeSlot"
                    },
                    "store_id": {
                        "description": "Store ID",
                        "type": "string"
                    },
                    "delivered_at": {
                        "description": "Delivered at",
                        "type": "string"
                    },
                    "code": {
                        "description": "confirmation code to pickup the collection",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsCheckoutLinks": {
                "properties": {
                    "url_checkout": {
                        "description": "Smart Checkout URL",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsPreTransactionModel": {
                "properties": {
                    "missing_sum": {
                        "description": "missing sum",
                        "type": "integer"
                    },
                    "bonus_products": {
                        "description": "SmartTransactionsPreTransactionModel",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsBonusProducts"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBaseProduct": {
                "properties": {
                    "id": {
                        "description": "Bonus Product ID",
                        "type": "integer"
                    },
                    "tax": {
                        "$ref": "#/components/schemas/TaxRate"
                    },
                    "priceOne": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "quantity": {
                        "description": "amount of bonus products",
                        "type": "integer"
                    },
                    "desc": {
                        "description": "description",
                        "type": "string"
                    },
                    "articleNumber": {
                        "description": "article Number",
                        "type": "string"
                    },
                    "ean": {
                        "$ref": "#/components/schemas/EanOrGtin"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBonusProducts": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SmartTransactionsBaseProduct"
                    },
                    {
                        "properties": {
                            "serialNumber": {
                                "description": "The serialnumber of the scanned posa card",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartTransactionsCheckin": {
                "properties": {
                    "object": {
                        "description": "Object of smart transaction check in",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of smart transaction check in",
                        "type": "string",
                        "format": "id"
                    },
                    "email": {
                        "description": "Email",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsCommunication": {
                "properties": {
                    "action_type": {
                        "description": "action type",
                        "type": "string",
                        "example": "charge"
                    },
                    "template_id": {
                        "description": "template id",
                        "type": "string",
                        "example": "DTE_xxxx"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsPaymentLinks": {
                "properties": {
                    "prepaid": {
                        "description": "process with pay in advance",
                        "type": "string",
                        "example": "https://example.com/prepaid"
                    },
                    "debit": {
                        "description": "process with SEAP direct debit",
                        "type": "string",
                        "example": "https://example.com/debit"
                    },
                    "creditcard": {
                        "description": "process with credit card",
                        "type": "string",
                        "example": "https://example.com/creditcard"
                    },
                    "invoice": {
                        "description": "process with pay on invoice",
                        "type": "string",
                        "example": "https://example.com/invoice"
                    },
                    "paypal": {
                        "description": "process with PayPal",
                        "type": "string",
                        "example": "https://example.com/paypal"
                    },
                    "sofort": {
                        "description": "process with Sofort",
                        "type": "string",
                        "example": "https://example.com/sofort"
                    },
                    "general": {
                        "description": "process with selecting a payment method",
                        "type": "string",
                        "example": "https://example.com/general"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBasketInfo": {
                "properties": {
                    "sum": {
                        "description": "Sum",
                        "type": "integer"
                    },
                    "gratuity": {
                        "description": "Gratuity",
                        "type": "integer"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/Currency"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBasket": {
                "properties": {
                    "products": {
                        "description": "Products",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsBasketProduct"
                        }
                    },
                    "type": {
                        "description": "Basket Type",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBasketProduct": {
                "properties": {
                    "id": {
                        "description": "Product id",
                        "type": "integer"
                    },
                    "parent": {
                        "description": "Parent",
                        "type": "integer"
                    },
                    "item_type": {
                        "description": "Category of item",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Desc",
                        "type": "string"
                    },
                    "articleNumber": {
                        "description": "Article number",
                        "type": "string"
                    },
                    "serialNumber": {
                        "description": "The serialnumber of the scanned posa card",
                        "type": "string"
                    },
                    "ean": {
                        "$ref": "#/components/schemas/EanOrGtin"
                    },
                    "quantity": {
                        "description": "Quantity",
                        "type": "integer"
                    },
                    "priceOne": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "sum": {
                        "description": "it is the value of the sum of the product with all items in sub_basket",
                        "type": "integer"
                    },
                    "tax": {
                        "$ref": "#/components/schemas/TaxRate"
                    },
                    "reference_id": {
                        "description": "The reference_id must be unique, it's a Reference for to the reference_id of SmartTransactionsSubBasketProduct [example: SmartTransactionsBasketProduct->reference_id is 1000 then all SmartTransactionsSubBasketProduct must have unique reference_id like 1000.1, 1000.2 etc.]",
                        "type": "string"
                    },
                    "contract_id": {
                        "description": "contract id",
                        "type": "string"
                    },
                    "group": {
                        "description": "Group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsBasketProductGroup"
                        }
                    },
                    "sub_basket": {
                        "description": "sub basket Product",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsSubBasketProduct"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTransactionsSubBasketProduct": {
                "properties": {
                    "id": {
                        "description": "Product id",
                        "type": "integer"
                    },
                    "parent": {
                        "description": "Parent",
                        "type": "integer"
                    },
                    "item_type": {
                        "description": "Category of item",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Description of the sub-basket product",
                        "type": "string"
                    },
                    "articleNumber": {
                        "description": "Article number",
                        "type": "string"
                    },
                    "serialNumber": {
                        "description": "The serialnumber of the scanned posa card",
                        "type": "string"
                    },
                    "ean": {
                        "$ref": "#/components/schemas/EanOrGtin"
                    },
                    "quantity": {
                        "description": "Quantity",
                        "type": "integer"
                    },
                    "priceOne": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "sum": {
                        "description": "",
                        "type": "integer"
                    },
                    "tax": {
                        "$ref": "#/components/schemas/TaxRate"
                    },
                    "reference_id": {
                        "description": "The reference_id must be unique, it's Referring to the reference_id of SmartTransactionsBasketProduct [example: SmartTransactionsBasketProduct->reference_id is 1000 then all SmartTransactionsSubBasketProduct must have unique reference_id like 1000.1, 1000.2 etc.]",
                        "type": "string"
                    },
                    "contract_id": {
                        "description": "contract id",
                        "type": "string"
                    },
                    "group": {
                        "description": "Group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsBasketProductGroup"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTransactionsBasketProductGroup": {
                "properties": {
                    "id": {
                        "description": "Group id",
                        "type": "string"
                    },
                    "desc": {
                        "description": "Desc",
                        "type": "string"
                    },
                    "level": {
                        "description": "Level",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsIdent": {
                "properties": {
                    "object": {
                        "description": "Object of smart transaction ident",
                        "type": "string"
                    },
                    "id": {
                        "description": "Id of smart transaction ident",
                        "type": "string",
                        "format": "id"
                    },
                    "prefix": {
                        "description": "Prefix",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value",
                        "type": "string"
                    },
                    "valid": {
                        "description": "Valid",
                        "type": "boolean"
                    },
                    "merchantcard": {
                        "$ref": "#/components/schemas/LoyaltyMerchantcardsProductModel"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsMerchant": {
                "properties": {
                    "object": {
                        "description": "Object type of instance",
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of instance",
                        "type": "string"
                    },
                    "companyname": {
                        "description": "Company name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsContainer": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    {
                        "properties": {
                            "type": {
                                "description": "The container type",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartTransactionsReceipt": {
                "properties": {
                    "type": {
                        "description": "Type",
                        "type": "string"
                    },
                    "value": {
                        "$ref": "#/components/schemas/SmartTransactionsReceiptValue"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsReceiptValue": {
                "properties": {
                    "caption": {
                        "description": "Caption",
                        "type": "string"
                    },
                    "text": {
                        "description": "Text",
                        "type": "string"
                    },
                    "decoration": {
                        "description": "Decoration",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "description": "Name",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsPrepare": {
                "properties": {
                    "customer": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "container": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "method": {
                        "description": "Method",
                        "type": "string"
                    },
                    "callback_urls": {
                        "$ref": "#/components/schemas/SmartTransactionsPrepareCallbackUrls"
                    },
                    "email": {
                        "description": "Email",
                        "type": "string"
                    },
                    "device_source": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "mode": {
                        "description": "Mode",
                        "type": "string",
                        "deprecated": true
                    },
                    "is_paypal_basic": {
                        "description": "Is paypal basic or not",
                        "type": "boolean"
                    },
                    "is_demo": {
                        "description": "Is demo or not",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsPrepareCallbackUrls": {
                "properties": {
                    "success_url": {
                        "description": "Success URL",
                        "type": "string"
                    },
                    "failure_url": {
                        "description": "Failure URL",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsDTO": {
                "properties": {
                    "merchant": {
                        "description": "Merchant",
                        "type": "string"
                    },
                    "provider_contract": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "transactionRef": {
                        "description": "Transaction reference",
                        "type": "string"
                    },
                    "merchantRef": {
                        "description": "Merchant reference",
                        "type": "string"
                    },
                    "basket": {
                        "$ref": "#/components/schemas/SmartTransactionsBasket"
                    },
                    "basket_info": {
                        "$ref": "#/components/schemas/SmartTransactionsBasketInfo"
                    },
                    "idents": {
                        "description": "Idents",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsIdent"
                        }
                    },
                    "tax_amount": {
                        "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "tax_rate": {
                        "$ref": "#/components/schemas/TaxRate"
                    },
                    "market": {
                        "description": "Market",
                        "type": "string"
                    },
                    "cashier": {
                        "description": "Cashier",
                        "type": "string"
                    },
                    "product": {
                        "description": "Product",
                        "type": "string"
                    },
                    "device_source": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "trans_id": {
                        "description": "Transaction id",
                        "type": "integer"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/ProductInstanceID"
                    },
                    "last_visited_page": {
                        "description": "Last visited page",
                        "type": "string"
                    },
                    "customer": {
                        "$ref": "#/components/schemas/PaymentCustomersProductModel"
                    },
                    "shipping_address": {
                        "$ref": "#/components/schemas/PaymentCustomersProductModel"
                    },
                    "container": {
                        "$ref": "#/components/schemas/ProductInstanceUID"
                    },
                    "checkin": {
                        "$ref": "#/components/schemas/SmartTransactionsCheckin"
                    },
                    "payment_method": {
                        "description": "Payment method",
                        "type": "string",
                        "example": [
                            "debit"
                        ]
                    },
                    "is_demo": {
                        "description": "Demo payment",
                        "type": "boolean"
                    },
                    "intent": {
                        "description": "intent of transaction",
                        "type": "string"
                    },
                    "checkout_links": {
                        "$ref": "#/components/schemas/SmartTransactionsCheckoutLinks"
                    },
                    "delivery_options": {
                        "$ref": "#/components/schemas/OneOfSmartTransactionsDeliveryOptionsModel"
                    },
                    "communications": {
                        "$ref": "#/components/schemas/SmartTransactionsCommunication"
                    },
                    "application_context": {
                        "$ref": "#/components/schemas/SmartTransactionsApplicationContext"
                    },
                    "payment_context": {
                        "$ref": "#/components/schemas/PaymentContext"
                    }
                },
                "type": "object"
            },
            "SmartTransactionPreparePayloadDataModel": {
                "properties": {
                    "callback_urls": {
                        "description": "Callback urls",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "email": {
                        "description": "Email",
                        "type": "string"
                    },
                    "mode": {
                        "description": "Mode",
                        "type": "string"
                    },
                    "is_paypal_basic": {
                        "description": "Information whether a smart transaction is PayPal basic or not",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsList": {
                "properties": {
                    "count": {
                        "description": "Number of existing smart transactions",
                        "type": "integer"
                    },
                    "data": {
                        "description": "SmartTransactionsList",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsProductModel"
                        }
                    }
                },
                "type": "object"
            },
            "SmartTransactionsSetDeliveryModel": {
                "properties": {
                    "delivery_options": {
                        "$ref": "#/components/schemas/OneOfSmartTransactionsDeliveryOptionsModel"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsPrepaidSalesDetails": {
                "properties": {
                    "id": {
                        "description": "ID",
                        "type": "integer"
                    },
                    "status": {
                        "description": "Status",
                        "type": "string"
                    },
                    "error_details": {
                        "description": "Error Details",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsApplicationContext": {
                "properties": {
                    "locks": {
                        "$ref": "#/components/schemas/SmartTransactionsApplicationContextLocks"
                    },
                    "return_urls": {
                        "$ref": "#/components/schemas/SmartTransactionsApplicationContextReturnUrls"
                    },
                    "iframe_opts": {
                        "$ref": "#/components/schemas/SmartTransactionsApplicationContextIframeOpts"
                    },
                    "checkout_template": {
                        "description": "Smart Checkout Template ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsApplicationContextLocks": {
                "properties": {
                    "customer": {
                        "description": "look customer data",
                        "type": "boolean"
                    },
                    "shipping_address": {
                        "description": "look shipping address data",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SmartTransactionsApplicationContextReturnUrls": {
                "properties": {
                    "url_success": {
                        "description": "Success URL",
                        "type": "string"
                    },
                    "url_abort": {
                        "description": "Abort URL",
                        "type": "string"
                    },
                    "url_error": {
                        "description": "Error URL",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PaymentInstructions": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BankAccountDescriptor"
                    },
                    {
                        "properties": {
                            "girocode_url": {
                                "description": "Url to generated GiroCode",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "SmartTransactionsApplicationContextIframeOpts": {
                "properties": {
                    "payment_hint_title": {
                        "description": "payment hint title",
                        "type": "string",
                        "example": "Your Investment"
                    },
                    "payment_hint": {
                        "description": "payment hint",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SmartTransactionsReceipt"
                        }
                    },
                    "project_title": {
                        "description": "project name",
                        "type": "string",
                        "example": "Example project"
                    },
                    "submit_button_title": {
                        "description": "title of the submit button",
                        "type": "string",
                        "example": "Invest & pay now!"
                    },
                    "cancel_button_title": {
                        "description": "title of the cancel button",
                        "type": "string",
                        "example": "Back to project"
                    },
                    "language": {
                        "description": "language",
                        "type": "string",
                        "default": "de_DE",
                        "example": "en_US"
                    },
                    "basket_title": {
                        "description": "basket title",
                        "type": "string",
                        "example": "My super basket"
                    },
                    "hide_disclaimer": {
                        "description": "hide disclaimer",
                        "type": "boolean",
                        "default": false
                    },
                    "has_accepted_disclaimer": {
                        "description": "has accepted disclaimer",
                        "type": "boolean",
                        "default": false
                    }
                },
                "type": "object"
            },
            "PaymentContext": {
                "properties": {
                    "auto_capture": {
                        "description": "auto capture the smart transaction",
                        "type": "boolean",
                        "default": false
                    },
                    "payment_methods": {
                        "description": "PaymentContext",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "merchant_initiated": {
                        "description": "is this smart transaction created automatically by the merchant (process without customer interaction)",
                        "type": "boolean",
                        "default": false
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "count": {
                "name": "count",
                "in": "query",
                "description": "The maximum number of items to return",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "offset": {
                "name": "offset",
                "in": "query",
                "description": "The position within the whole result set to start returning items (zero-based)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "fields": {
                "name": "fields",
                "in": "query",
                "description": "List of fields to include in the result. Nested properties can be accessed with this notation: `prop1.prop2`.",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "example": "prop3,prop1.prop2"
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "description": "String with comma separated pairs of `field:order`.\n \nOptions for order:\n * `asc` ascending;\n * `dsc` descending.",
                "required": false,
                "schema": {
                    "type": "string"
                },
                "example": "contact.surname:asc,contact.companyname:desc"
            },
            "query": {
                "name": "q",
                "in": "query",
                "description": "A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form `property:condition`. Property names can be nested like `property.property`.\n\nExample: `customer.name:Meier`\n\nA condition may contain:\n * `?` as wildcard for one character;\n * `*` as wildcard for any number of characters.\n\nYou can also use value ranges in the form `[min TO max]`.\n\nExample: `customer.age:[30 TO 40]`\n\nYou can combine expressions logically by `expr AND expr` and `{expr} OR {expr}`. You can also negate an expression using `NOT {expr}`. Parenthesis `(...)` can be used to control precedence.\n\nExample: `(NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])`",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "securitySchemes": {
            "oauth_token": {
                "type": "oauth2",
                "flows": {
                    "clientCredentials": {
                        "tokenUrl": "https://connect.secucard.com/oauth/token",
                        "scopes": {
                            "https://scope.secucard.com/e/smartdevice": "smart devices",
                            "https://scope.secucard.com/e/api": "shops and marketplaces",
                            "https://scope.secucard.com/e/app.main/secucard": "secuoffice",
                            "https://scope.secucard.com/e/app.mobile/secucard/user": "secucard mobile app"
                        }
                    }
                }
            }
        }
    },
    "security": [
        {
            "oauth_token": []
        }
    ],
    "tags": [
        {
            "name": "Document Uploads",
            "description": "Upload files like logo images, PDFs with legal information,\nand so on."
        },
        {
            "name": "General Contracts",
            "description": "Manages the contracts of a merchant, including the specific\noptions and conditions. A merchant can have one contract, but also multiple \ncontracts for different purposes. There are separate views on the contracts for \npayment (s. Payment Contracts) and e-goods (s. Prepaid Contracts)."
        },
        {
            "name": "General Merchants",
            "description": "Contains all settings that are universally valid for the\nmerchant. One merchant can have multiple contracts, and multiple stores."
        },
        {
            "name": "General Stores",
            "description": "The stores of a merchant. Smart ZVT devices are assigned to \nstores. And Click & Collect arrangments are for specific stores."
        },
        {
            "name": "Loyalty Cardgroups",
            "description": "Card groups define different programmes offered by a \nmerchant. Every merchant card is assigned to one card group at a time. The card \ngroup can be changed during the lifetime of the card, for instance to lift a \ngift card to become a customer card, which is an important conversion goal. You \nwould also add customer data in this moment. The card credits are kept, when \nyou change the card group."
        },
        {
            "name": "Loyalty Cards",
            "description": "A secucard loyalty card is a physical or virtual card, \nidentified by its card number. It is rather the customer's view on the card. \nOne card can be used for multiple merchants. See merchant card for more \ninformation."
        },
        {
            "name": "Loyalty Customers",
            "description": "The optional loyalty customer holds the customer data of a \nloyalty card. A secucard issued as anonymous gift card can be personalized \nlater, for instance to use it as customer card then. S. a. Card Groups for more \ninformation."
        },
        {
            "name": "Loyalty Merchantcards",
            "description": "The merchant card is a per-merchant view on a loyalty card.\nSo a secucard loyalty card can be used for more than one merchant, having \nindividual card groups (programmes) and credit.\n\nFrom the perspective of the merchant, one card can have two different forms of \ncredit at the same time, monetary credit and bonus credit, one for money paid \nin, the other as reward for a revenue. They have different origins and are \nhandled differenty in book-keeping. However, they make virtually no difference \nto the customer whe he spends it."
        },
        {
            "name": "Loyalty Transactions",
            "description": "A loyalty transaction can be a charge of monetary credit or \nbonus credit, which can be spent (discharge) in another transaction. \nFurthermore loyalty transactions track revenues related to loyalty programmes."
        },
        {
            "name": "Payment Containers",
            "description": "Payment containers save payment instrument, holding either\na credit card, or a bank account used for SEPA direct debit. Payment containers \nbelong to payment customers, and cannot be used independently."
        },
        {
            "name": "Payment Contracts",
            "description": "Payment contracts offer a view to a merchant's contracts, \nand are used to create payment transactions. S. a. General Contracts."
        },
        {
            "name": "Payment Customers",
            "description": "The Payment Customer is used to store the customer details, \nand use it as biling or delivery address. It is also the owner of the Payment \nContainers."
        },
        {
            "name": "Payment Plan",
            "description": "The Payment Plan is used to store the plan details and use it in subscription process."
        },
        {
            "name": "Payment Secupay Creditcards",
            "description": "A convenient way to create a credit card transaction. S. a.\nPayment Transactions."
        },
        {
            "name": "Payment Secupay Debits",
            "description": "A convenient way to create a SEPA direct dedit transaction. \nS. a. Payment Transactions."
        },
        {
            "name": "Payment Secupay Invoices",
            "description": "A convenient way to create an invoice transaction. S. a.\nPayment Transactions."
        },
        {
            "name": "Payment Secupay Payout",
            "description": "A convenient way to create a payout transaction. Payouts \nare payments paid by a merchant and received by his customers. S. a. Payment \nTransactions."
        },
        {
            "name": "Payment Secupay Prepays",
            "description": "A convenient way to create a transaction for advance\npayment (prepaid). S. a. Payment Transactions."
        },
        {
            "name": "Payment Secupay Sofort",
            "description": "A convenient way to create a transaction to be used for\nSofortüberweisung. S. a. Payment Transactions."
        },
        {
            "name": "PaymentSubscription",
            "description": "The Payment Subscription."
        },
        {
            "name": "Payment Transactions",
            "description": "Payment Transactions authorize and execute the payment,\nhandle possible issues, and control the Payment Iframe."
        },
        {
            "name": "Prepaid Contracts Product",
            "description": "Mapping utility"
        },
        {
            "name": "Prepaid Items",
            "description": "Manages the available e-goods products, either PIN printing \nor POS activation (POSA). Examples for such products are phone charge, or \nvouchers for an online shop."
        },
        {
            "name": "Prepaid Sales Product",
            "description": "Prepaid transactions"
        },
        {
            "name": "Services Uploadidents Product",
            "description": "Creates a customer identification request, connected with a \nparticular payment transaction for payout."
        },
        {
            "name": "Smart Devices",
            "description": "A Smart Device is a device like a POS payment terminal, or \nan electronic cash register (ECR). You can innterconnect such devices with each \nother (s. Smart Routings), but they are also connected with our system. Every \ndevice belongs to a store (s. General Stores). There are also virtual devices \nfor specific tasks."
        },
        {
            "name": "Smart Routings",
            "description": "A routing defines a connection between two Smart ZVT \neligible devices (s. Smart Devices). For instance you can flexibly connect \nelectronic cash registers (ECR) with POS payment terminals. Our server can use \nthe same link to trigger ZVT functions for a different purpose, for instance to \nintegrate e-commerce with your point of sale (POS), which is commonly known as \ncross-channel, omni-channel, or multi-channel."
        },
        {
            "name": "Smart Templates",
            "description": ""
        },
        {
            "name": "Smart Transactions",
            "description": "In difference to a Payment Transaction, a Smart Transaction \ncovers a wider range of use cases. It is also more connected to the business \ncase than to the many details of the payment pocess. And it is the basis for \nSmart Checkout and Payment Link.\n\nSmart Transactions can be used for e-commerce and cross channel scenarios, to \nintegrate customer loyalty programmes at the POS, etc., etc. It is not \npredetermined to a specific payment method, and will manage the payment \ntransaction for you."
        }
    ],
    "x-tagGroups": [
        {
            "name": "General",
            "tags": [
                "General Merchants",
                "General Contracts",
                "General Stores"
            ]
        },
        {
            "name": "Payment",
            "tags": [
                "Payment Transactions",
                "Payment Customers",
                "Payment Containers",
                "Payment Contracts",
                "Payment Secupay Creditcards",
                "Payment Secupay Debits",
                "Payment Secupay Prepays",
                "Payment Secupay Invoices",
                "Payment Secupay Sofort",
                "Payment Secupay Payout"
            ]
        },
        {
            "name": "Loyalty",
            "tags": [
                "Loyalty Transactions",
                "Loyalty Customers",
                "Loyalty Cards",
                "Loyalty Cardgroups",
                "Loyalty Merchantcards"
            ]
        },
        {
            "name": "E-Goods",
            "tags": [
                "Prepaid Contracts Product",
                "Prepaid Items",
                "Prepaid Sales Product"
            ]
        },
        {
            "name": "Smart ZVT",
            "tags": [
                "Smart Devices",
                "Smart Routings"
            ]
        },
        {
            "name": "Smart Transactions",
            "tags": [
                "Smart Transactions"
            ]
        },
        {
            "name": "Document",
            "tags": [
                "Document Uploads"
            ]
        },
        {
            "name": "Ident",
            "tags": [
                "Services Uploadidents Product"
            ]
        }
    ]
}