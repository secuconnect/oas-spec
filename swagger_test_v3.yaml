openapi: 3.0.0
info:
  title: 'Secuconnect API'
  version: 2.0.0
servers:
  -
    url: 'https://connect-testing.secupay-ag.de/api/v2'
paths:
  '/Document/Uploads?multipart':
    post:
      tags:
        - documentUploads
      summary: 'POST Document/Uploads'
      description: 'Store uploaded file'
      operationId: Document/Uploads/documentUploadsMultipartPost
      parameters:
        -
          name: multipart
          in: query
          schema:
            type: string
      requestBody:
        description: 'Input data format'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fileToUpload'
      responses:
        '200':
          description: 'Document uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Document/Uploads:
    post:
      tags:
        - documentUploads
      summary: 'POST Document/Uploads'
      description: 'Store uploaded file'
      operationId: Document/Uploads/documentUploadsPost
      requestBody:
        description: Content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUploadsDTOContent'
      responses:
        '200':
          description: 'Document uploaded'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentUploadsBaseProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /General/Contracts:
    get:
      tags:
        - generalContracts
      summary: 'GET General/Contracts'
      description: 'Get a list of general contracts'
      operationId: General/Contracts/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of general contracts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralContractsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Contracts/{generalContractId}':
    get:
      tags:
        - generalContracts
      summary: 'GET General/Contracts/{generalContractId}'
      description: 'Get one general contract for a specific id'
      operationId: General/Contracts/getOne
      parameters:
        -
          name: generalContractId
          in: path
          description: 'General contract id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns general contract for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Contracts/{generalContractId}/getAvailablePaymentMethods':
    post:
      tags:
        - generalContracts
      summary: 'POST General/Contracts/{generalContractId}/getAvailablePaymentMethods'
      description: 'Get available payment methods for given contract'
      operationId: General/Contracts/getAvailablePaymentMethods
      parameters:
        -
          name: generalContractId
          in: path
          description: 'Contract identifier'
          required: true
          schema:
            type: string
      requestBody:
        description: options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAvailablePaymentMethodsDTO'
      responses:
        '200':
          description: 'General methods possible for given contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /General/Merchants:
    get:
      tags:
        - generalMerchants
      summary: 'GET General/Merchants'
      description: 'Get a list of general merchants'
      operationId: General/Merchants/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of general merchants'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMerchantsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Merchants/{generalMerchantId}':
    get:
      tags:
        - generalMerchants
      summary: 'GET General/Merchants/{generalMerchantId}'
      description: 'Get one general merchant for a specific id'
      operationId: General/Merchants/getOne
      parameters:
        -
          name: generalMerchantId
          in: path
          description: 'General merchant id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns general merchant for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralMerchantsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /General/Stores:
    get:
      tags:
        - generalStores
      summary: 'GET General/Stores'
      description: 'Get a list of general stores'
      operationId: General/Stores/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of general stores'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralStoresList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - generalStores
      summary: 'POST General/Stores'
      description: 'Create general store'
      operationId: General/Stores/addStore
      requestBody:
        description: 'General store properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralStoresDTO'
      responses:
        '200':
          description: 'General store'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralStoresProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Stores/{generalStoreId}':
    get:
      tags:
        - generalStores
      summary: 'GET General/Stores/{generalStoreId}'
      description: 'Get one general store for a specific id'
      operationId: General/Stores/getOne
      parameters:
        -
          name: generalStoreId
          in: path
          description: 'General store id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns general store for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralStoresProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - generalStores
      summary: 'PUT General/Stores/{generalStoreId}'
      description: 'Update general store'
      operationId: General/Stores/updateStore
      parameters:
        -
          name: generalStoreId
          in: path
          description: 'General store id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'General store properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralStoresDTO'
      responses:
        '200':
          description: 'Updated general store'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralStoresProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Stores/{generalStoreId}/checkin':
    post:
      tags:
        - generalStores
      summary: 'POST General/Stores/{generalStoreId}/checkin'
      description: 'Check in'
      operationId: General/Stores/checkIn
      parameters:
        -
          name: generalStoreId
          in: path
          description: 'General store id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'General store properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralStoresDTOType'
      responses:
        '200':
          description: 'Returned value is true or false'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Stores/{generalStoreId}/assign/{googleKey}':
    post:
      tags:
        - generalStores
      summary: 'POST General/Stores/{generalStoreId}/assign/{googleKey}'
      description: 'Assign some object to general store'
      operationId: General/Stores/assignGoogleKey
      parameters:
        -
          name: generalStoreId
          in: path
          description: 'General store id'
          required: true
          schema:
            type: string
        -
          name: googleKey
          in: path
          description: 'Google key'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'If a general store hasn''t assigned earlier, the returned value is true'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/General/Stores/{generalStoreId}/setDefault':
    post:
      tags:
        - generalStores
      summary: 'POST General/Stores/{generalStoreId}/setDefault'
      description: 'Set default flag on general store'
      operationId: General/Stores/setDefault
      parameters:
        -
          name: generalStoreId
          in: path
          description: 'General store id'
          required: true
          schema:
            type: string
      requestBody:
        description: Reason
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralStoresDTOReason'
      responses:
        '200':
          description: 'In the most cases returned value is true'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Loyalty/Cardgroups:
    get:
      tags:
        - loyaltyCardgroups
      summary: 'GET Loyalty/Cardgroups'
      description: 'Get a list of loyalty card groups'
      operationId: Loyalty/Cardgroups/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of loyalty card groups'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardgroupsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - loyaltyCardgroups
      summary: 'POST Loyalty/Cardgroups'
      description: 'Add loyalty card group'
      operationId: Loyalty/Cardgroups/addCardGroup
      requestBody:
        description: 'Loyalty card group properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardgroupsDTO'
      responses:
        '200':
          description: 'Added loyalty card group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Cardgroups/{loyaltyCardGroupId}':
    get:
      tags:
        - loyaltyCardgroups
      summary: 'GET Loyalty/Cardgroups/{loyaltyCardGroupId}'
      description: 'Get loyalty card group for a specific id'
      operationId: Loyalty/Cardgroups/getOne
      parameters:
        -
          name: loyaltyCardGroupId
          in: path
          description: 'Search one by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns loyalty card group for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - loyaltyCardgroups
      summary: 'PUT Loyalty/Cardgroups/{loyaltyCardGroupId}'
      description: 'Update loyalty card group'
      operationId: Loyalty/Cardgroups/updateCardGroup
      parameters:
        -
          name: loyaltyCardGroupId
          in: path
          description: 'Loyalty card group id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Loyalty card group properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardgroupsDTO'
      responses:
        '200':
          description: 'Updated loyalty card group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled':
    post:
      tags:
        - loyaltyCardgroups
      summary: 'POST Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled'
      description: 'Check whether passcode check is enabled'
      operationId: Loyalty/Cardgroups/checkPassCodeEnabled
      parameters:
        -
          name: loyaltyCardGroupId
          in: path
          description: 'Loyalty card group id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Check passcode details'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardgroupsDTOCheckPasscodeEnabled'
      responses:
        '200':
          description: 'Checked successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Loyalty/Cards:
    get:
      tags:
        - loyaltyCards
      summary: 'GET Loyalty/Cards'
      description: 'Get a list of loyalty cards'
      operationId: Loyalty/Cards/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of loyalty cards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Cards/{loyaltyCardId}':
    get:
      tags:
        - loyaltyCards
      summary: 'GET Loyalty/Cards/{loyaltyCardId}'
      description: 'Get loyalty card for a specific id'
      operationId: Loyalty/Cards/getOne
      parameters:
        -
          name: loyaltyCardId
          in: path
          description: 'Search one loyalty card by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns loyalty card for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}':
    post:
      tags:
        - loyaltyCards
      summary: 'POST Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}'
      description: 'Assign loyalty card to specific user account'
      operationId: Loyalty/Cards/assignUser
      parameters:
        -
          name: loyaltyCardId
          in: path
          description: 'Loyalty card id'
          required: true
          schema:
            type: string
        -
          name: generalAccountId
          in: path
          description: 'General account id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Loyalty card pin for the specific card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPin'
      responses:
        '200':
          description: 'Returns true if loyalty card was assigned to user successful, false in other case'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - loyaltyCards
      summary: 'DELETE Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}'
      description: 'Remove assigned loyalty card from specific user account'
      operationId: Loyalty/Cards/removeAssignedUser
      parameters:
        -
          name: loyaltyCardId
          in: path
          description: 'Loyalty card id'
          required: true
          schema:
            type: string
        -
          name: generalAccountId
          in: path
          description: 'General account id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns true if loyalty card assign was removed from user successful, false in other case'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Loyalty/Customers:
    get:
      tags:
        - loyaltyCustomers
      summary: 'GET Loyalty/Customers'
      description: 'Get a list of loyalty customers'
      operationId: Loyalty/Customers/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of loyalty customers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - loyaltyCustomers
      summary: 'POST Loyalty/Customers'
      description: 'Add loyalty customer'
      operationId: Loyalty/Customers/addCustomer
      requestBody:
        description: 'loyalty Customer container properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCustomersDTO'
      responses:
        '200':
          description: 'Newly created loyalty Customer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Customers/{loyaltyCustomerId}':
    get:
      tags:
        - loyaltyCustomers
      summary: 'GET Loyalty/Customers/{loyaltyCustomerId}'
      description: 'Get loyalty customer for a specific id'
      operationId: Loyalty/Customers/getOne
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'Search one loyalty customer by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns loyalty customer for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - loyaltyCustomers
      summary: 'PUT Loyalty/Customers/{loyaltyCustomerId}'
      description: 'Function to update customer''s data'
      operationId: Loyalty/Customers/updateCustomer
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'loyalty Customer Id CUS_XXX'
          required: true
          schema:
            type: string
      requestBody:
        description: 'loyalty Customer container properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCustomersDTO'
      responses:
        '200':
          description: 'Newly created loyalty Customer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - loyaltyCustomers
      summary: 'DELETE Loyalty/Customers/{loyaltyCustomerId}'
      description: 'Remove assigned loyalty customer'
      operationId: Loyalty/Customers/removeCustomer
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'Loyalty customer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns true if loyalty customer was removed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersRemoved'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}':
    post:
      tags:
        - loyaltyCustomers
      summary: 'POST Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}'
      description: 'Assigns LoyaltyPaymentContainer to customer'
      operationId: Loyalty/Customers/assignPaymentContainer
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'Loyalty customer id'
          required: true
          schema:
            type: string
        -
          name: loyaltyPaymentContainerId
          in: path
          description: 'LoyaltyPaymentContainer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'loyalty Customers data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - loyaltyCustomers
      summary: 'DELETE Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}'
      description: 'Removes an assigned LoyaltyPaymentContainer from customer'
      operationId: Loyalty/Customers/removeAssignedPaymentContainer
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'Loyalty customer id'
          required: true
          schema:
            type: string
        -
          name: loyaltyPaymentContainerId
          in: path
          description: 'LoyaltyPaymentContainer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'loyalty Customers data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/':
    post:
      tags:
        - loyaltyCustomers
      summary: 'POST Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/'
      description: 'check if there are duplicated customers for a given merchant'
      operationId: Loyalty/Customers/checkForDuplicates
      parameters:
        -
          name: loyaltyCustomerId
          in: path
          description: 'Loyalty customer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns duplicated customers and customers without merchantcard'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customers_without_merchantcard_and_duplicated_customers'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Loyalty/MerchantCards:
    get:
      tags:
        - loyaltyMerchantcards
      summary: 'GET Loyalty/MerchantCards'
      description: 'Get a list of loyalty merchant cards'
      operationId: Loyalty/MerchantCards/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of loyalty merchant cards'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards'
      description: 'Add new loyalty merchant card'
      operationId: Loyalty/MerchantCards/addMerchantCard
      requestBody:
        description: 'Loyalty merchant card properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTO'
      responses:
        '200':
          description: 'Newly created loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}':
    get:
      tags:
        - loyaltyMerchantcards
      summary: 'GET Loyalty/MerchantCards/{loyaltyMerchantCardId}'
      description: 'Get loyalty merchant card for a specific id'
      operationId: Loyalty/MerchantCards/getOne
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Search one by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns loyalty merchant card for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - loyaltyMerchantcards
      summary: 'PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}'
      description: 'Update loyalty merchant card'
      operationId: Loyalty/MerchantCards/updateMerchantCard
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Loyalty merchant card properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTO'
      responses:
        '200':
          description: 'Updated loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - loyaltyMerchantcards
      summary: 'DELETE Loyalty/MerchantCards/{loyaltyMerchantCardId}'
      description: 'Delete loyalty merchant card'
      operationId: Loyalty/MerchantCards/removeMerchantCard
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}':
    put:
      tags:
        - loyaltyMerchantcards
      summary: 'PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}'
      description: 'Update loyalty card group'
      operationId: Loyalty/MerchantCards/updateCardGroupOfMerchantCard
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
        -
          name: loyaltyCardGroupId
          in: path
          description: 'Loyalty card group id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Updated loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer'
      description: 'Register new customer for a card'
      operationId: Loyalty/MerchantCards/registerCustomer
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Loyalty customer properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCustomersDTO'
      responses:
        '200':
          description: 'Loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}'
      description: 'Set loyalty customer for a loyalty merchant card'
      operationId: Loyalty/MerchantCards/setCustomer
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
        -
          name: loyaltyCustomerId
          in: path
          description: 'Loyalty customer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Updated loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock':
    get:
      tags:
        - loyaltyMerchantcards
      summary: 'GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock'
      description: 'Get loyalty merchant card lock information for a specific id'
      operationId: Loyalty/MerchantCards/getLock
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns lock details for a specific merchant card id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsDTOLock'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock'
      description: 'Lock merchant card'
      operationId: Loyalty/MerchantCards/lock
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about lock'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOLock'
      responses:
        '200':
          description: 'Loyalty merchant card after lock'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock'
      description: 'Unlock merchant card'
      operationId: Loyalty/MerchantCards/unlock
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about unlock'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOLock'
      responses:
        '200':
          description: 'Loyalty merchant card after unlock'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}':
    get:
      tags:
        - loyaltyMerchantcards
      summary: 'GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}'
      description: 'Get virtual terminal data for merchant'
      operationId: Loyalty/MerchantCards/getVirtualTerminalData
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Merchant card id'
          required: true
          schema:
            type: string
        -
          name: loyaltyMerchantId
          in: path
          description: 'Merchant id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns virtual terminal data for merchant'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualTerminalDataModel'
        '201':
          description: 'Returns disabled'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction'
      description: 'Execute transaction from SDK'
      operationId: Loyalty/MerchantCards/executeTransaction
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Transaction properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOTransaction'
      responses:
        '200':
          description: 'Loyalty merchant card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsProductWithReceiptModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc'
      description: 'Check CSC'
      operationId: Loyalty/MerchantCards/checkCsc
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOCsc'
      responses:
        '200':
          description: 'If CSC is correct returned value is true, false in other case'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard'
      description: 'Function to check the merchant card'
      operationId: Loyalty/MerchantCards/validateMerchantCard
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOValidateMerchantCard'
      responses:
        '200':
          description: 'returns informations about Merchantcard'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsValidateMerchantCard'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode'
      description: 'Function to save new given passcode for given merchantcard identified by cardnumber'
      operationId: Loyalty/MerchantCards/newPassCode
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTONewPasscode'
      responses:
        '200':
          description: 'If new passcode was saved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode'
      description: 'Function to reset a passcode for given merchantcard'
      operationId: Loyalty/MerchantCards/resetPassCode
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOResetPasscode'
      responses:
        '200':
          description: 'If passcode was reseted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode'
      description: 'Function to check the Passcode card with cardnumber'
      operationId: Loyalty/MerchantCards/checkPassCode
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOCheckPasscode'
      responses:
        '200':
          description: 'If passcode was reseted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resultBoolean'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}'
      description: 'Function to create multiple merchantcards for given merchant with given cardgroup'
      operationId: Loyalty/MerchantCards/createMerchantcards
      parameters:
        -
          name: generalMerchantId
          in: path
          description: 'General merchant id'
          required: true
          schema:
            type: string
        -
          name: loyaltyCardgroupId
          in: path
          description: 'Loyalty card group id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Cards amount'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOCardsAmount'
      responses:
        '200':
          description: 'Loyalty merchant card'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/MerchantCards/{loyaltyMerchantCardId}/getCardBalanceReceipt':
    post:
      tags:
        - loyaltyMerchantcards
      summary: 'POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/getCardBalanceReceipt'
      description: 'Get card balance receipt and information about limit data and passcode protection'
      operationId: Loyalty/MerchantCards/CardBalanceReceipt
      parameters:
        -
          name: loyaltyMerchantCardId
          in: path
          description: 'Loyalty merchant card id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information about card & current terminal'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOCardBalanceReceipt'
      responses:
        '200':
          description: 'The receipt and additional information about the card'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyMerchantcardsCardBalanceReceipt'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID':
    get:
      tags:
        - loyaltySales
      summary: 'GET Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID'
      description: 'Get cardgroups by merchant id'
      operationId: Loyalty/Sales/getCardgroupsByMerchantId
      parameters:
        -
          name: generalMerchantId
          in: path
          description: 'Search by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns an array of cardgroups for a specific id'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Loyalty/Transactions:
    get:
      tags:
        - loyaltyTransactions
      summary: 'GET Loyalty/Transactions'
      description: 'Get a list of loyalty transactions'
      operationId: Loyalty/Transactions/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of loyalty card groups'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyTransactionsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Loyalty/Transactions/{loyaltyTransactionId}':
    get:
      tags:
        - loyaltyTransactions
      summary: 'GET Loyalty/Transactions/{loyaltyTransactionId}'
      description: 'Get loyalty transaction for a specific id'
      operationId: Loyalty/Transactions/getOne
      parameters:
        -
          name: loyaltyTransactionId
          in: path
          description: 'Search one by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns loyalty card group for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Containers:
    get:
      tags:
        - paymentContainers
      summary: 'GET Payment/Containers'
      description: 'Get a list of payment containers'
      operationId: Payment/Containers/paymentContainersGet
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of payment containers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContainersList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - paymentContainers
      summary: 'POST Payment/Containers'
      description: 'Add new containers'
      operationId: Payment/Containers/paymentContainersPost
      requestBody:
        description: 'Payment container properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContainersDTO'
      responses:
        '200':
          description: 'Newly created payment container'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Containers/{paymentContainerId}':
    get:
      tags:
        - paymentContainers
      summary: 'GET Payment/Containers/{paymentContainerId}'
      description: 'Get all payment containers'
      operationId: Payment/Containers/paymentContainersGetById
      parameters:
        -
          name: paymentContainerId
          in: path
          description: 'Search one by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns payment container for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - paymentContainers
      summary: 'PUT Payment/Containers/{paymentContainerId}'
      description: 'Update payment container'
      operationId: Payment/Containers/paymentContainersIdPut
      parameters:
        -
          name: paymentContainerId
          in: path
          description: 'Payment container id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Payment container properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContainersDTO'
      responses:
        '200':
          description: 'Updated payment container'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - paymentContainers
      summary: 'DELETE Payment/Containers/{paymentContainerId}'
      description: 'Delete payment container'
      operationId: Payment/Containers/paymentContainersIdDelete
      parameters:
        -
          name: paymentContainerId
          in: path
          description: 'Payment container id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted payment container'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}':
    post:
      tags:
        - paymentContainers
      summary: 'POST Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}'
      description: 'Assign an existing payment container to ...'
      operationId: Payment/Containers/paymentContainersIdAssignSecondaryIdPost
      parameters:
        -
          name: paymentContainerId
          in: path
          description: 'Payment container id'
          required: true
          schema:
            type: string
        -
          name: secondaryPaymentContainerId
          in: path
          description: 'Id to which container will be assigned'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Affected container'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - paymentContainers
      summary: 'DELETE Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}'
      description: 'Removes an existing payment container assignment'
      operationId: Payment/Containers/paymentContainersIdAssignSecondaryIdDelete
      parameters:
        -
          name: paymentContainerId
          in: path
          description: 'Payment container id'
          required: true
          schema:
            type: string
        -
          name: secondaryPaymentContainerId
          in: path
          description: 'Id for which container is currently assigned to'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Affected container'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentContainersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Contracts:
    get:
      tags:
        - paymentContracts
      summary: 'GET Payment/Contracts'
      description: 'Get a list of payment contracts'
      operationId: Payment/Contracts/paymentContractsGet
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of payment contracts'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - paymentContracts
      summary: 'POST Payment/Contracts'
      description: 'Add new contract'
      operationId: Payment/Contracts/paymentContractsPost
      requestBody:
        description: 'Payment contracts properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContractsDTO'
      responses:
        '200':
          description: 'Newly created payment contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Contracts/{paymentContractId}':
    get:
      tags:
        - paymentContracts
      summary: 'GET Payment/Contracts/{paymentContractId}'
      description: 'Get all payment contracts'
      operationId: Payment/Contracts/paymentContractsGetById
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Search one by provided id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns payment contract for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - paymentContracts
      summary: 'PUT Payment/Contracts/{paymentContractId}'
      description: 'Update payment contract'
      operationId: Payment/Contracts/paymentContractsIdPut
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Payment contract id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Payment contracts properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContractsDTO'
      responses:
        '200':
          description: 'Updated payment contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - paymentContracts
      summary: 'DELETE Payment/Contracts/{paymentContractId}'
      description: 'Delete payment contract'
      operationId: Payment/Contracts/paymentContractsIdDelete
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Payment contract id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted payment contract'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Contracts/{paymentContractId}/paymentMethods':
    get:
      tags:
        - paymentContracts
      summary: 'GET Payment/Contracts/{paymentContractId}/paymentMethods'
      description: 'Get available payment methods for given contract'
      operationId: Payment/Contracts/paymentContractsIdPaymentMethodsGet
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Contract identifier'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Payment methods possible for given contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Contracts/{paymentContractId}/clone':
    post:
      tags:
        - paymentContracts
      summary: 'POST Payment/Contracts/{paymentContractId}/clone'
      description: 'Clone an existing payment contract'
      operationId: Payment/Contracts/clone
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Contract identifier'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Payment contract clone properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContractsDTOClone'
      responses:
        '200':
          description: 'Updated payment contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Contracts/{paymentContractId}/requestId':
    post:
      tags:
        - paymentContracts
      summary: 'POST Payment/Contracts/{paymentContractId}/requestId'
      description: 'This method clones your payment contract, so that you can use this to separate the merchants of your marketplace. (Needs to be activated))'
      operationId: Payment/Contracts/requestId
      parameters:
        -
          name: paymentContractId
          in: path
          description: 'Contract identifier of the parent'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Payment contract request id properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentContractsDTORequestId'
      responses:
        '200':
          description: 'Proper response after cloning your payment contract'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentContractsRequestIdResult'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Customers:
    get:
      tags:
        - paymentCustomers
      summary: 'GET Payment/Customers'
      description: 'Get a list of payment customers'
      operationId: Payment/Containers/paymentCustomersGet
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of payment customers'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCustomersList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - paymentCustomers
      summary: 'POST Payment/Customers'
      description: 'Add new customer'
      operationId: Payment/Containers/paymentCustomersPost
      requestBody:
        description: 'Payment customer properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCustomersDTO'
      responses:
        '200':
          description: 'Newly created payment customer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Customers/{paymentCustomerId}':
    get:
      tags:
        - paymentCustomers
      summary: 'GET Payment/Customers/{paymentCustomerId}'
      description: 'Get all payment customers'
      operationId: Payment/Customers/paymentCustomersGetById
      parameters:
        -
          name: paymentCustomerId
          in: path
          description: 'Payment customer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns payment customer for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - paymentCustomers
      summary: 'PUT Payment/Customers/{paymentCustomerId}'
      description: 'Update payment customer'
      operationId: Payment/Customers/paymentCustomersIdPut
      parameters:
        -
          name: paymentCustomerId
          in: path
          description: 'Payment customer id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Payment customer properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCustomersDTO'
      responses:
        '200':
          description: 'Updated payment customer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - paymentCustomers
      summary: 'DELETE Payment/Customers/{paymentCustomerId}'
      description: 'Delete payment customer'
      operationId: Payment/Customers/paymentCustomersIdDelete
      parameters:
        -
          name: paymentCustomerId
          in: path
          description: 'Payment customer id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Deleted payment customer'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentCustomersProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}':
    post:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}'
      description: 'Assign external invoice pdf'
      operationId: assignExternalInvoicePdf
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
        -
          name: documentId
          in: path
          description: 'Document id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Request body for assigning external invoice pdf'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionDTOExternalInvoicePdf'
      responses:
        '200':
          description: 'Document details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionExternalInvoicePdf'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/cancel':
    post:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'POST Payment/{paymentMethod}/{paymentId}/cancel'
      description: 'Function to cancel the payment transaction'
      operationId: cancelPaymentTransactionById
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Cancel payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionCancelDTO'
      responses:
        '200':
          description: 'Canceled successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCancelResult'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/capture':
    post:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'POST Payment/{paymentMethod}/{paymentId}/capture'
      description: 'Function to cancel the payment transaction'
      operationId: capturePaymentTransactionById
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Capture payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionCaptureDTO'
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/basket':
    put:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'PUT Payment/{paymentMethod}/{paymentId}/basket'
      description: 'Update a basket of an existing payment transaction'
      operationId: updateBasketByPaymentId
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Update basket input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionUpdateBasketDTO'
      responses:
        '200':
          description: 'Updated payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/accrual':
    put:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'PUT Payment/{paymentMethod}/{paymentId}/accrual'
      description: 'Update the accrual flag of an existing payment transaction'
      operationId: reverseAccrualByPaymentId
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Reverse accrual input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionReverseAccrualDTO'
      responses:
        '200':
          description: 'Updated payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/{paymentMethod}/{paymentId}/shippingInformation':
    put:
      tags:
        - paymentSecupayCreditcards
        - paymentSecupayDebits
        - paymentSecupayInvoices
        - paymentSecupayPrepays
        - paymentSecupaySofort
      summary: 'PUT Payment/{paymentMethod}/{paymentId}/shippingInformation'
      description: 'Update the accrual flag of an existing payment transaction'
      operationId: setShippingInformationByPaymentId
      parameters:
        -
          name: paymentMethod
          in: path
          description: 'Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)'
          required: true
          schema:
            type: string
        -
          name: paymentId
          in: path
          description: 'Payment id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Shipping information propertie'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionSetShippingInformationDTO'
      responses:
        '200':
          description: 'Updated payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupaycreditcards/{paymentCreditCardsId}':
    get:
      tags:
        - paymentSecupayCreditcards
      summary: 'GET Payment/Secupaycreditcards/{paymentCreditCardsId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupaycreditcards/paymentSecupayCreditcardsGetById
      parameters:
        -
          name: paymentCreditCardsId
          in: path
          description: 'Payment credit cards id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupaycreditcards:
    post:
      tags:
        - paymentSecupayCreditcards
      summary: 'POST Payment/Secupaycreditcards'
      description: 'Start a credit card payment transaction'
      operationId: Payment/Secupaycreditcards/paymentSecupaycreditcardsPost
      requestBody:
        description: 'Credit card payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupaydebits/{paymentDebitId}':
    get:
      tags:
        - paymentSecupayDebits
      summary: 'GET Payment/Secupaydebits/{paymentDebitId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupaydebits/paymentSecupayDebitsGetById
      parameters:
        -
          name: paymentDebitId
          in: path
          description: 'Payment debit id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupaydebits:
    post:
      tags:
        - paymentSecupayDebits
      summary: 'POST Payment/Secupaydebits'
      description: 'Start a debit payment transaction'
      operationId: Payment/Secupaydebits/paymentSecupaydebitsPost
      requestBody:
        description: 'Debit payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Started debit payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupayinvoices/{paymentInvoiceId}':
    get:
      tags:
        - paymentSecupayInvoices
      summary: 'GET Payment/Secupayinvoices/{paymentInvoiceId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupayinvoices/paymentSecupayInvoicesGetById
      parameters:
        -
          name: paymentInvoiceId
          in: path
          description: 'Payment transaction ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupayinvoices:
    post:
      tags:
        - paymentSecupayInvoices
      summary: 'POST Payment/Secupayinvoices'
      description: 'Start a invoice payment transaction'
      operationId: Payment/Secupayinvoices/paymentSecupayinvoicesPost
      requestBody:
        description: 'Invoice payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Started invoice payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupaypayout/{paymentPayoutId}':
    get:
      tags:
        - paymentSecupayPayout
      summary: 'GET Payment/Secupaypayout/{paymentPayoutId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupaypayout/getSecupaypayout
      parameters:
        -
          name: paymentPayoutId
          in: path
          description: 'Payment payout id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayPayoutProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupaypayout:
    post:
      tags:
        - paymentSecupayPayout
      summary: 'POST Payment/Secupaypayout'
      description: 'Start a payout transaction'
      operationId: Payment/Secupaypayout/paymentSecupaypayoutPost
      requestBody:
        description: 'Payout payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayPayoutDTO'
      responses:
        '200':
          description: 'Started prepay payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayPayoutProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupayprepays/{paymentPrepayId}':
    get:
      tags:
        - paymentSecupayPrepays
      summary: 'GET Payment/Secupayprepays/{paymentPrepayId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupayprepays/paymentSecupayPrepaysGetById
      parameters:
        -
          name: paymentPrepayId
          in: path
          description: 'Payment prepay id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupayprepays:
    post:
      tags:
        - paymentSecupayPrepays
      summary: 'POST Payment/Secupayprepays'
      description: 'Start a prepay payment transaction'
      operationId: Payment/Secupayprepays/paymentSecupayprepaysPost
      requestBody:
        description: 'Prepay payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Started prepay payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Secupaysofort/{paymentPrepayId}':
    get:
      tags:
        - paymentSecupaySofort
      summary: 'GET Payment/Secupaysofort/{paymentPrepayId}'
      description: 'Get the details of a payment transaction'
      operationId: Payment/Secupaysofort/paymentSecupaySofortGetById
      parameters:
        -
          name: paymentPrepayId
          in: path
          description: 'Payment prepay id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Details of the payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Secupaysofort:
    post:
      tags:
        - paymentSecupaySofort
      summary: 'POST Payment/Secupaysofort'
      description: 'Start a prepay payment transaction'
      operationId: Payment/Secupaysofort/paymentSecupaysofortPost
      requestBody:
        description: 'Prepay payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Started prepay payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Payment/Transactions:
    get:
      tags:
        - paymentTransactions
      summary: 'GET Payment/Transactions'
      description: 'Get a list of payment transactions'
      operationId: Payment/Transactions/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of payment transactions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - paymentTransactions
      summary: 'POST Payment/Transactions'
      description: 'Create payment transaction'
      operationId: Payment/Transaction
      requestBody:
        description: 'Create payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecupayTransactionProductDTO'
      responses:
        '200':
          description: 'Returns a payment transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecupayTransactionProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Transactions/{paymentTransactionId}':
    get:
      tags:
        - paymentTransactions
      summary: 'GET Payment/Transactions/{paymentTransactionId}'
      description: 'Get all payment transactions'
      operationId: Payment/Transactions/getOne
      parameters:
        -
          name: paymentTransactionId
          in: path
          description: 'Payment transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns list with all payment transactions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Transactions/{paymentTransactionId}/cancel':
    post:
      tags:
        - paymentTransactions
      summary: 'POST Payment/Transactions/{paymentTransactionId}/cancel'
      description: 'Cancel a payment transaction'
      operationId: Payment/Transactions/cancel
      parameters:
        -
          name: paymentTransactionId
          in: path
          description: 'Payment transaction id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Cancel payment transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTransactionCancelDTO'
      responses:
        '200':
          description: 'Canceled payment transactions'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Transactions/{paymentTransactionId}/shippingUrl':
    get:
      tags:
        - paymentTransactions
      summary: 'GET Payment/Transactions/{paymentTransactionId}/shippingUrl'
      description: 'Get the url where you can fill the shipping information'
      operationId: Payment/Transactions/getShippingUrl
      parameters:
        -
          name: paymentTransactionId
          in: path
          description: 'Payment transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The url of the shipping information form'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsShippingUrl'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Payment/Transactions/{paymentTransactionId}/revokeAccrual':
    post:
      tags:
        - paymentTransactions
      summary: 'POST Payment/Transactions/{paymentTransactionId}/revokeAccrual'
      description: 'Revoke the accrual flag of a payment transaction'
      operationId: Payment/Transactions/revokeAccrual
      parameters:
        -
          name: paymentTransactionId
          in: path
          description: 'Payment transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Updated payment transactions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Prepaid/Contracts/{prepaidContractId}/mappingZvt':
    post:
      tags:
        - prepaidContractsProduct
      summary: 'POST Prepaid/Contracts/me/mappingZvt'
      description: 'Gets prepaid item id from product id which is configured in prepaid contracts'
      operationId: Prepaid/Contracts/mappingZvt
      parameters:
        -
          name: prepaidContractId
          in: path
          description: 'Prepaid contract id'
          required: true
          schema:
            type: string
            default: me
      requestBody:
        description: 'Prepaid transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidZvtDTO'
      responses:
        '200':
          description: 'Created new prepaid transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidMappingZvt'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Prepaid/Items:
    get:
      tags:
        - prepaidItems
      summary: 'GET Prepaid/Items'
      description: 'Get a list of prepaid items'
      operationId: Prepaid/Items/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of prepaid items'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidItemsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Prepaid/Items/{prepaidItemId}':
    get:
      tags:
        - prepaidItems
      summary: 'GET Prepaid/Items/{prepaidItemId}'
      description: 'Get one prepaid item for a specific id'
      operationId: Prepaid/Items/getOne
      parameters:
        -
          name: prepaidItemId
          in: path
          description: 'Prepaid item id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns prepaid item for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidItemsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Prepaid/Sales:
    post:
      tags:
        - prepaidSalesProduct
      summary: 'POST Prepaid/Sales'
      description: 'Create new prepaid transaction'
      operationId: Prepaid/Sales/addSale
      requestBody:
        description: 'Prepaid transaction input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrepaidSalesProductDTO'
      responses:
        '200':
          description: 'Created new prepaid transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepaidSalesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Services/Uploadidents:
    post:
      tags:
        - ServicesUploadidentsProduct
      summary: 'POST Services/Uploadidents'
      description: 'Create new upload ident'
      operationId: Services/Uploadidents/addUploadidents
      requestBody:
        description: 'Upload idents input properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadidentsProductDTO'
      responses:
        '200':
          description: 'Created new upload ident'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadidentsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Smart/Devices:
    get:
      tags:
        - smartDevices
      summary: 'GET Smart/Devices'
      description: 'Get a list of smart devices'
      operationId: Smart/Devices/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of smart devices'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - smartDevices
      summary: 'POST Smart/Devices'
      description: 'Create new smart device'
      operationId: Smart/Devices/addDevice
      requestBody:
        description: 'Smart device properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartDevicesDTO'
      responses:
        '200':
          description: 'Newly created smart device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Devices/{smartDeviceId}':
    get:
      tags:
        - smartDevices
      summary: 'GET Smart/Devices/{smartDeviceId}'
      description: 'Get one smart device for a specific id'
      operationId: Smart/Devices/getOne
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns smart device for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - smartDevices
      summary: 'PUT Smart/Devices/{smartDeviceId}'
      description: 'Update smart device'
      operationId: Smart/Devices/updateDevice
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Smart device properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartDevicesDTO'
      responses:
        '200':
          description: 'Updated smart device'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Devices/{smartDeviceId}/routing/type/{type}':
    get:
      tags:
        - smartDevices
      summary: 'GET Smart/Devices/{smartDeviceId}/routing/type/{type}'
      description: 'Get requested smart device if it is assigned to a single routing'
      operationId: Smart/Devices/getRouting
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
        -
          name: type
          in: path
          description: 'Smart Device Type'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The requested smart device which is assigned to a routing'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Devices/{smartDeviceId}/pin':
    put:
      tags:
        - smartDevices
      summary: 'PUT /Smart/Devices/{smartDeviceId}/pin'
      description: 'Update Smart Device Pin to authenticate device'
      operationId: Smart/Devices/updatePin
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Smart device properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartDeviceUserPin'
      responses:
        '200':
          description: 'current smart device object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartDevicesProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Smart/Routings:
    get:
      tags:
        - smartRoutings
      summary: 'GET Smart/Routings'
      description: 'Get a list of smart routings'
      operationId: Smart/Routings/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of smart routings'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - smartRoutings
      summary: 'POST Smart/Routings'
      description: 'Create new smart routing'
      operationId: Smart/Routings/addRouting
      requestBody:
        description: 'Smart routing properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartRoutingsDTO'
      responses:
        '200':
          description: 'Newly created smart routing'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Routings/{smartRoutingId}':
    get:
      tags:
        - smartRoutings
      summary: 'GET Smart/Routings/{smartRoutingId}'
      description: 'Get one smart routing for a specific id'
      operationId: Smart/Routings/getOne
      parameters:
        -
          name: smartRoutingId
          in: path
          description: 'Smart routing id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns smart routing for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - smartRoutings
      summary: 'PUT Smart/Routings/{smartRoutingId}'
      description: 'Update specific smart routing'
      operationId: Smart/Routings/updateRouting
      parameters:
        -
          name: smartRoutingId
          in: path
          description: 'Smart routing id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Smart routing properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartRoutingsDTO'
      responses:
        '200':
          description: 'Updated smart routing object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - smartRoutings
      summary: 'DELETE Smart/Routings/{smartRoutingId}'
      description: 'Remove specific smart roting'
      operationId: Smart/Routings/removeRouting
      parameters:
        -
          name: smartRoutingId
          in: path
          description: 'Smart routing id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns deleted smart routing for a specific id'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}':
    post:
      tags:
        - smartRoutings
      summary: 'POST Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}'
      description: 'Assign the specific smart device to the specific smart routing'
      operationId: Smart/Routings/assignDeviceToRouting
      parameters:
        -
          name: smartRoutingId
          in: path
          description: 'Smart routing id'
          required: true
          schema:
            type: string
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Smart routing assignment properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartRoutingPriority'
      responses:
        '200':
          description: 'Newly created smart routing'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    delete:
      tags:
        - smartRoutings
      summary: 'DELETE Smart/Routings/{smartRoutingId}/assign/{smartDeviceId}'
      description: 'Remove smart routing assignment'
      operationId: Smart/Routings/removeSmartRoutingAssignment
      parameters:
        -
          name: smartRoutingId
          in: path
          description: 'Smart routing id'
          required: true
          schema:
            type: string
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Smart routing with an updated list of assigned smart devices'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartRoutingsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  /Smart/Transactions:
    get:
      tags:
        - smartTransactions
      summary: 'GET Smart/Transactions'
      description: 'Get a list of smart transactions'
      operationId: Smart/Transactions/getAll
      parameters:
        -
          $ref: '#/components/parameters/count'
        -
          $ref: '#/components/parameters/offset'
        -
          $ref: '#/components/parameters/fields'
        -
          $ref: '#/components/parameters/query'
        -
          $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: 'Returns a list of smart transactions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsList'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions'
      description: 'Create new smart transaction'
      operationId: Smart/Transactions/addTransaction
      requestBody:
        description: 'Smart transaction properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartTransactionsDTO'
      responses:
        '200':
          description: 'Newly created smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}':
    get:
      tags:
        - smartTransactions
      summary: 'GET Smart/Transactions/{smartTransactionId}'
      description: 'Get one smart transaction for a specific id'
      operationId: Smart/Transactions/getOne
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Returns smart transaction for a specific id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
    put:
      tags:
        - smartTransactions
      summary: 'PUT Smart/Transactions/{smartTransactionId}'
      description: 'Update smart transaction'
      operationId: Smart/Transactions/updateTransaction
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Smart transaction properties'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartTransactionsDTO'
      responses:
        '200':
          description: 'Updated smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}/cancel':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartTransactionId}/cancel'
      description: 'Method to cancel the transaction with given idn'
      operationId: Smart/Transactions/cancelTransaction
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Newly created smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}/start/{paymentMethod}':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartTransactionId}/start/{paymentMethod}'
      description: 'Start smart transaction with given payment method'
      operationId: Smart/Transactions/startTransaction
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
        -
          name: paymentMethod
          in: path
          description: 'Payment method'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information which customer and container will be used to this operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartTransactionsPrepare'
      responses:
        '200':
          description: 'Smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}/canceltrx':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartTransactionId}/canceltrx'
      description: 'Starts Cancel ''Cash'' transaction on Terminal with ''receipt_number'' (''Beleg-Nr.'')'
      operationId: Smart/Transactions/cancelTrx
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Newly created smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartDeviceId}/diagnosis':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartDeviceId}/diagnosis'
      description: 'Starts extended Diagnose on Terminal, this method is normally called by SDK''s from cash register'
      operationId: Smart/Transactions/diagnose
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartDeviceId}/endOfDay':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartDeviceId}/endOfDay'
      description: 'Starts End of Day Report on Terminal, this method is normally called by SDK''s from cash register'
      operationId: Smart/Transactions/startEndOfDayReport
      parameters:
        -
          name: smartDeviceId
          in: path
          description: 'Smart device id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}/preTransaction':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/{smartTransactionId}/preTransaction'
      description: 'Function that checks balance of merchantcard from ident and if possible creates bonus product items for basket'
      operationId: Smart/Transactions/preTransaction
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Information about missing sum and bonus products'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsPreTransactionModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
  '/Smart/Transactions/{smartTransactionId}/prepare/{paymentMethod}':
    post:
      tags:
        - smartTransactions
      summary: 'POST Smart/Transactions/stx_xxx/prepare/{paymentMethod}'
      description: 'Create and score payment transaction assigned to given smart transaction'
      operationId: Smart/Transactions/prepare
      parameters:
        -
          name: smartTransactionId
          in: path
          description: 'Smart transaction id'
          required: true
          schema:
            type: string
        -
          name: paymentMethod
          in: path
          description: 'Payment method'
          required: true
          schema:
            type: string
      requestBody:
        description: 'Information which customer and container will be used to this operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartTransactionsPrepare'
      responses:
        '200':
          description: 'Smart transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartTransactionsProductModel'
        default:
          description: 'Response related to the error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductExceptionPayload'
components:
  schemas:
    ResultTrueOrFalse:
      properties:
        result:
          description: 'Result has true or false value'
          type: boolean
      type: object
    ResultAlwaysTrue:
      properties:
        result:
          description: 'Result (will always be equal to true)'
          type: boolean
      type: object
    ProductInstanceUID:
      description: 'Product name and instance id, uniquely identifying instance of Product'
      properties:
        object:
          description: 'Object type of instance'
          type: string
        id:
          description: 'ID of instance'
          type: string
      type: object
    ProductInstanceID:
      description: 'Product instance id, uniquely identifying instance of Product'
      properties:
        id:
          description: 'ID of instance'
          type: string
      type: object
    Address:
      description: Address
      properties:
        type:
          description: Type
          type: string
        street:
          description: Street
          type: string
        street_number:
          description: 'Street number'
          type: string
        city:
          description: City
          type: string
        postal_code:
          description: 'Postal code'
          type: string
        country:
          description: Country
          type: string
        additional_address_data:
          description: 'Additional address data'
          type: string
      type: object
    PaymentInformation:
      description: 'Payment information'
      properties:
        iban:
          description: IBAN
          type: string
        bic:
          description: BIC
          type: string
        owner:
          description: Owner
          type: string
        bankname:
          description: 'Bank name'
          type: string
      type: object
    BankAccountDescriptor:
      description: 'Bank account data like owner, iban, bic and bank name'
      properties:
        iban:
          description: IBAN
          type: string
        bic:
          description: BIC
          type: string
        owner:
          description: Owner
          type: string
        bankname:
          description: 'Bank name'
          type: string
        purpose:
          description: 'Purpose for the bank statement'
          type: string
      type: object
    CreditCardDescriptor:
      description: 'Credit card data like owner, iban, bic and bank name'
      properties:
        owner:
          description: Owner
          type: string
        pan:
          description: 'truncated Primary Account Number (PAN)'
          type: string
        expiration_date:
          description: 'Expiration date'
          type: string
          example: 2032-06
        issuer:
          description: 'Card issuer'
          type: string
        transact_container:
          description: 'transact container'
          type: string
        transact_skey_pubkey:
          description: 'transact public key'
          type: string
        transact_skey_keyname:
          description: 'transact keyname'
          type: string
        transact_hash:
          description: 'transact hash'
          type: string
      type: object
    ProductExceptionPayload:
      description: 'Payload of exceptions returned by API'
      properties:
        status:
          description: 'Request status (always equals to ''error'')'
          type: string
        error:
          description: 'Error type identifier'
          type: string
        error_details:
          description: 'Error details'
          type: string
        error_user:
          description: 'Error details in German'
          type: string
        code:
          description: 'HTTP code corresponding to error'
          type: string
        supportId:
          description: 'ID by which support team can relate error with action(s) that caused it'
          type: string
      type: object
    Contact:
      properties:
        forename:
          description: Forename
          type: string
        surname:
          description: Surname
          type: string
        companyname:
          description: 'Company name'
          type: string
        salutation:
          description: Salutation
          type: string
        gender:
          description: Gender
          type: string
        title:
          description: Title
          type: string
        email:
          description: Email
          type: string
        phone:
          description: Phone
          type: string
        mobile:
          description: Mobile
          type: string
        fax:
          description: Fax
          type: string
        dob:
          description: 'Date of birth'
          type: string
        picture:
          description: 'The document id of an user picture (To upload the picture use our document service.)'
          type: string
        url_website:
          description: 'URL to website'
          type: string
        birthplace:
          description: Birthplace
          type: string
        nationality:
          description: Nationality
          type: string
        address:
          description: Address
          type: object
          $ref: '#/components/schemas/Address'
      type: object
    GeoAddress:
      properties:
        type:
          description: 'Address type'
          type: string
        address_components:
          description: 'Address components'
          type: object
          $ref: '#/components/schemas/AddressComponents'
        address_formatted:
          description: 'Address formatted'
          type: string
        geometry:
          description: Geometry
          type: object
          $ref: '#/components/schemas/GeoAddressGeometry'
      type: object
    GeoAddressGeometry:
      description: Geometry
      properties:
        lat:
          description: latitude
          type: string
        lon:
          description: longitude
          type: string
      type: object
    AddressComponents:
      properties:
        long_name:
          description: 'Long name'
          type: string
        short_name:
          description: 'Short name'
          type: string
        types:
          description: Types
          type: array
          items:
            type: string
      type: object
    ParentModel:
      properties:
        object:
          description: 'Object of parent'
          type: string
        id:
          description: 'Id of parent'
          type: string
        type:
          description: 'Type of parent'
          type: string
      type: object
    AssignedBy:
      properties:
        object:
          description: 'Object of assigned by'
          type: string
        id:
          description: 'Id of assigned by'
          type: string
        owner:
          description: Owner
          type: boolean
      type: object
    InvitedBy:
      properties:
        object:
          description: 'Object of invited by'
          type: string
        id:
          description: 'Id of invited by'
          type: string
        invited:
          description: Invited
          type: string
      type: object
    Store:
      properties:
        object:
          description: 'Object of store'
          type: string
        id:
          description: 'Id of store'
          type: string
          format: id
        name:
          description: 'Store name'
          type: string
      type: object
    OpenHours:
      description: 'Open hours'
      properties:
        open:
          description: Open
          type: object
          $ref: '#/components/schemas/DayTime'
        close:
          description: Close
          type: object
          $ref: '#/components/schemas/DayTime'
      type: object
    DayTime:
      description: 'Day and time'
      properties:
        day:
          description: Day
          type: integer
        time:
          description: Time
          type: string
      type: object
    ItemGroup:
      properties:
        object:
          description: 'Object of item group'
          type: string
        id:
          description: 'Id of item group'
          type: string
          format: id
        description:
          description: Description
          type: string
        logo:
          description: Logo
          type: string
        enabled:
          description: Enabled
          type: boolean
      type: object
    resultBoolean:
      properties:
        result:
          description: 'Result has true or false value'
          type: boolean
      type: object
    StringList:
      type: array
      items:
        type: string
    BaseProductModel:
      properties:
        object:
          description: 'Object of the model'
          type: string
        id:
          description: 'Id of the model'
          type: string
          format: id
      type: object
    ParentObj:
      properties:
        object:
          description: 'Object of parent'
          type: string
        id:
          description: 'Id of parent'
          type: string
          format: id
        trans_id:
          description: 'Transaction ID'
          type: integer
        ref_type_id:
          description: 'Ref type ID'
          type: integer
        relation_type:
          description: 'Relation type'
          type: string
      type: object
    DocumentUploadsDTOContent:
      properties:
        content:
          description: Content
          type: string
      type: object
    DocumentUploadsBaseProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            created:
              description: 'Created at date'
              type: string
          type: object
    DocumentUploadsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/DocumentUploadsBaseProductModel'
        -
          properties:
            type:
              description: Type
              type: string
            name:
              description: Name
              type: string
            size:
              description: Size
              type: integer
          type: object
    fileToUpload:
      description: 'File to upload'
      properties:
        file:
          type: string
          format: binary
          example: /path/to/file.txt
      type: object
    GeneralContractsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            parent:
              description: 'Parent of general contract user'
              type: object
              $ref: '#/components/schemas/ParentModel'
            merchant:
              description: 'General merchant of general store'
              type: object
              $ref: '#/components/schemas/ProductInstanceUID'
            pay_in_advance_account:
              description: 'Bank account data like owner, iban, bic and bank name'
              type: object
              $ref: '#/components/schemas/BankAccountDescriptor'
          type: object
    GetAvailablePaymentMethodsDTO:
      required:
        - currency
        - is_demo
      properties:
        currency:
          description: Currency-Code
          type: string
          example: EUR
        is_demo:
          description: Demo
          type: boolean
          example: 'false'
      type: object
    GeneralContractsList:
      properties:
        count:
          description: 'Number of existing general contracts'
          type: integer
        data:
          description: GeneralContractsList
          type: array
          items:
            $ref: '#/components/schemas/GeneralContractsProductModel'
      type: object
    GeneralMerchantsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            id_old:
              description: 'Old id of general merchant'
              type: string
              format: id
            type:
              description: 'Type of general merchant'
              type: string
            user:
              description: 'General merchant user'
              type: object
              $ref: '#/components/schemas/GeneralMerchantsUser'
            parent:
              description: 'Parent of general merchant user'
              type: object
              $ref: '#/components/schemas/ParentModel'
            assigned_by:
              description: 'Assigned by'
              type: array
              items:
                $ref: '#/components/schemas/AssignedBy'
            invited_by:
              description: 'Invited by'
              type: array
              items:
                $ref: '#/components/schemas/InvitedBy'
            legal_details:
              description: 'Legal details'
              type: object
              $ref: '#/components/schemas/GeneralMerchantsLegalDetails'
            checkout_options:
              description: 'Checkout options'
              type: object
              $ref: '#/components/schemas/GeneralMerchantsCheckoutOptions'
            urls:
              description: Urls
              type: object
              $ref: '#/components/schemas/GeneralMerchantsUrls'
            store_name:
              description: 'store name'
              type: string
          type: object
    GeneralMerchantsDTO:
      properties:
        salutation:
          description: Salutation
          type: string
        companyname:
          description: companyname
          type: string
        forename:
          description: forename
          type: string
        surname:
          description: surname
          type: string
        dob:
          description: 'Date of birth'
          type: string
        homepage:
          description: 'Merchant homepage url or shop url'
          type: string
        email:
          description: 'Merchant email address'
          type: string
        phone:
          description: 'Merchant phone number'
          type: string
        address:
          description: Address
          type: object
          $ref: '#/components/schemas/Address'
        payment_data:
          description: 'Merchants bank account for the payout'
          type: object
          $ref: '#/components/schemas/PaymentInformation'
        legal_details:
          description: 'Legal details'
          type: array
          items:
            $ref: '#/components/schemas/GeneralMerchantsLegalDetails'
        checkout_options:
          description: 'Checkout options'
          type: object
          $ref: '#/components/schemas/GeneralMerchantsCheckoutOptions'
        urls:
          description: Urls
          type: array
          items:
            $ref: '#/components/schemas/GeneralMerchantsUrls'
      type: object
    GeneralMerchantsUser:
      properties:
        object:
          description: 'Object of general merchant user'
          type: string
        id:
          description: 'Id of general merchant user'
          type: string
        name:
          description: 'Name of general merchant user'
          type: string
        companyname:
          description: 'Company name of general merchant user'
          type: string
        address:
          description: 'Address of general merchant user'
          type: array
          items:
            $ref: '#/components/schemas/GeoAddress'
      type: object
    GeneralMerchantsLegalDetails:
      properties:
        url:
          description: Url
          type: string
        type:
          description: Type
          type: string
        content_type:
          description: 'Content type'
          type: string
        language:
          description: Language
          type: string
      type: object
    GeneralMerchantsCheckoutOptions:
      properties:
        enabled:
          description: Enabled
          type: boolean
        shipping:
          description: Shipping
          type: object
          $ref: '#/components/schemas/GeneralMerchantsCheckoutOptionsShipping'
        collection:
          description: Collection
          type: object
          $ref: '#/components/schemas/GeneralMerchantsCheckoutOptionsCollection'
      type: object
    GeneralMerchantsCheckoutOptionsShipping:
      properties:
        enabled:
          description: Enabled
          type: boolean
      type: object
    GeneralMerchantsCheckoutOptionsCollection:
      properties:
        enabled:
          description: Enabled
          type: boolean
        smart_devices:
          description: 'Smart devices'
          type: object
          $ref: '#/components/schemas/GeneralMerchantsCheckoutOptionsCollectionSmartDevices'
      type: object
    GeneralMerchantsCheckoutOptionsCollectionSmartDevices:
      properties:
        object:
          description: 'Object of smart device'
          type: string
        id:
          description: 'Id of smart device'
          type: string
          format: id
        description:
          description: 'Description of smart device'
          type: string
        store:
          description: Store
          type: object
          $ref: '#/components/schemas/Store'
      type: object
    GeneralMerchantsUrls:
      properties:
        type:
          description: 'Type of urls'
          type: string
        url:
          description: Url
          type: string
      type: object
    GeneralMerchantsList:
      properties:
        count:
          description: 'Number of existing general merchants'
          type: integer
        data:
          description: GeneralMerchantsList
          type: array
          items:
            $ref: '#/components/schemas/GeneralMerchantsProductModel'
      type: object
    GeneralStoresProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            id_old:
              description: 'Old id of general store'
              type: string
              format: id
            merchant:
              description: 'General merchant of general store'
              type: object
              $ref: '#/components/schemas/ProductInstanceUID'
            store_name:
              description: 'Store Name'
              type: string
            facebook_id:
              description: 'Facebook id'
              type: string
            source:
              description: Source
              type: string
            key:
              description: Key
              type: string
            hash:
              description: Hash
              type: string
            address_components:
              description: 'Address components'
              type: array
              items:
                $ref: '#/components/schemas/AddressComponents'
            address_formatted:
              description: 'General store formatted address'
              type: string
            phone_number_formatted:
              description: 'General store formatted phone number'
              type: string
            geometry:
              description: 'General store geometry'
              type: object
              $ref: '#/components/schemas/GeoAddressGeometry'
            name:
              description: 'General store name'
              type: string
            name_raw:
              description: 'General store raw name'
              type: string
            photo_main:
              description: 'General store main photo'
              type: string
            photo:
              description: 'General store photos'
              type: array
              items:
                type: string
            category_main:
              description: 'General store main category'
              type: string
            category:
              description: 'General store category'
              type: array
              items:
                type: string
            url_googleplus:
              description: 'Url to general store google plus'
              type: string
            url_website:
              description: 'Url to general store website'
              type: string
            open_hours:
              description: 'Open hours in every day'
              type: array
              items:
                $ref: '#/components/schemas/OpenHours'
            open_now:
              description: 'Open now'
              type: boolean
            open_time:
              description: 'Open time'
              type: string
            utc_offset:
              description: 'Utc offset'
              type: string
            assigned_by:
              description: 'Assigned by'
              type: array
              items:
                $ref: '#/components/schemas/AssignedBy'
            invited_by:
              description: 'Invited by'
              type: array
              items:
                $ref: '#/components/schemas/InvitedBy'
            has_beacon:
              description: 'Has beacon'
              type: boolean
            acceptance_point:
              description: 'Is Acceptance Point'
              type: boolean
          type: object
    GeneralStoresDTOReason:
      properties:
        reason:
          description: Reason
          type: string
      type: object
    GeneralStoresDTOType:
      properties:
        type:
          description: Type
          type: string
      type: object
    GeneralStoresDTO:
      properties:
        name:
          description: Name
          type: string
        merchant:
          description: Merchant
          type: string
        address:
          description: 'New address'
          type: object
          $ref: '#/components/schemas/Address'
        facebook_id:
          description: 'New facebook id'
          type: string
        phone:
          description: 'New phone number'
          type: string
        url_website:
          description: 'New url to general store website'
          type: string
        photo_main:
          description: 'New main photo'
          type: string
        photo:
          description: 'New photos'
          type: array
          items:
            type: string
        open_hours:
          description: 'Open hours in every day'
          type: array
          items:
            $ref: '#/components/schemas/OpenHours'
      type: object
    GeneralStoresList:
      properties:
        count:
          description: 'Number of existing general stores'
          type: integer
        data:
          description: GeneralStoresList
          type: array
          items:
            $ref: '#/components/schemas/GeneralStoresProductModel'
      type: object
    LoyaltyCardgroupsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            merchant:
              description: 'Loyalty card group merchant'
              $ref: '#/components/schemas/LoyaltyCardgroupsDTOMerchant'
            display_name:
              description: 'Loyalty card group display name'
              type: string
            display_name_raw:
              description: 'Loyalty card group display name raw'
              type: string
            stock_warn_limit:
              description: 'Loyalty card group stock warn limit'
              type: string
            picture:
              description: 'Loyalty card group picture'
              type: string
          type: object
    LoyaltyCardgroupsDTO:
      properties:
        display_name:
          description: 'Display name'
          type: string
        display_name_raw:
          description: 'Display name raw'
          type: string
        stock_warn_limit:
          description: 'Stock warn limit'
          type: string
        picture:
          description: Picture
          type: string
        merchant:
          type: object
          $ref: '#/components/schemas/LoyaltyCardgroupsDTOMerchant'
      type: object
    LoyaltyCardgroupsDTOMerchant:
      properties:
        id:
          description: 'Merchant id'
          type: string
      type: object
    LoyaltyCardgroupsDTOCheckPasscodeEnabled:
      properties:
        action:
          description: 'Action type'
          type: string
        cardnumber:
          description: 'Secucard number'
          type: string
      type: object
    LoyaltyCardgroupsList:
      properties:
        count:
          description: 'Number of existing loyalty card groups'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
      type: object
    LoyaltyCardsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            account:
              description: 'Loyalty card account'
              $ref: '#/components/schemas/LoyaltyCardsDTOAccount'
            cardnumber:
              description: 'Loyalty card number'
              type: string
            created:
              description: 'Creation date'
              type: string
          type: object
    LoyaltyCardsDTOAccount:
      properties:
        object:
          description: LoyaltyCardsDTOAccount
          type: string
        id:
          description: LoyaltyCardsDTOAccount
          type: string
      type: object
    CardPin:
      properties:
        pin:
          description: 'Loyalty card pin consisting of four numbers'
          type: integer
      type: object
    LoyaltyCardsList:
      properties:
        count:
          description: 'Number of existing loyalty cards'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyCardsProductModel'
      type: object
    LoyaltyCustomersProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            merchant:
              description: merchant
              $ref: '#/components/schemas/ProductInstanceUID'
            contact:
              description: Contact
              $ref: '#/components/schemas/Contact'
            merchant_contact:
              description: 'merchant contact'
              $ref: '#/components/schemas/Contact'
            account_contact:
              description: 'merchant contact'
              $ref: '#/components/schemas/Contact'
            payment_container:
              description: 'payment container'
              type: array
              items:
                $ref: '#/components/schemas/LoyaltyCustomersPaymentContainerModel'
            customernumber:
              description: 'Customer number'
              type: string
            note:
              description: 'Customer number'
              type: string
            created:
              description: 'Creation date'
              type: string
          type: object
    LoyaltyCustomersContactDTO:
      properties:
        forename:
          description: Forename
          type: string
        surname:
          description: Surname
          type: string
        name:
          description: Name
          type: string
        phone:
          description: Phone
          type: string
        address:
          description: Address
          type: object
          $ref: '#/components/schemas/Address'
      type: object
    LoyaltyCustomersDTO:
      properties:
        merchant:
          description: merchant
          type: string
        merchant_contact:
          description: Contact
          $ref: '#/components/schemas/Contact'
        age:
          description: Age
          type: integer
        days_until_birthday:
          description: 'Number of days until birthday'
          type: integer
        customernumber:
          description: 'Customer number'
          type: string
        note:
          description: note
          type: string
        additional_data:
          description: 'Consent for communication'
          type: object
      type: object
    LoyaltyCustomersPaymentContainerModel:
      properties:
        object:
          description: LoyaltyCustomersPaymentContainerModel
          type: string
        id:
          description: LoyaltyCustomersPaymentContainerModel
          type: string
        type:
          description: LoyaltyCustomersPaymentContainerModel
          type: string
        payment_information:
          description: 'Payment instrument data'
          $ref: '#/components/schemas/BankAccountDescriptor'
        last_usage:
          description: 'Last Usage date'
          type: string
      type: object
    LoyaltyCustomersList:
      properties:
        count:
          description: 'Number of existing loyalty customers'
          type: integer
        data:
          description: LoyaltyCustomersList
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyCustomersProductModel'
      type: object
    customers_without_merchantcard_and_duplicated_customers:
      properties:
        customers_without_merchantcard:
          description: 'customers without merchantcard'
          type: array
          items:
            type: string
        duplicated_customers:
          description: 'duplicated customers'
          type: array
          items:
            type: string
      type: object
    LoyaltyCustomersRemoved:
      properties:
        deleted:
          description: 'Result is true or false'
          type: boolean
      type: object
    LoyaltyMerchantcardsProductModel:
      description: 'Loyalty merchant card'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            card:
              description: 'Id of loyalty store group'
              $ref: '#/components/schemas/LoyaltyCardsProductModel'
            merchant:
              description: 'Current merchant id'
              $ref: '#/components/schemas/ProductInstanceUID'
            created_for_merchant:
              description: 'Merchant id, that loyalty merchant card object was created for'
              $ref: '#/components/schemas/ProductInstanceUID'
            created_for_store:
              description: 'Store id, that loyalty merchant card object was created for'
              $ref: '#/components/schemas/ProductInstanceUID'
            customer:
              description: 'Loyalty merchant card customer'
              $ref: '#/components/schemas/LoyaltyCustomersProductModel'
            cardgroup:
              description: 'Loyalty merchant card card group'
              $ref: '#/components/schemas/LoyaltyCardgroupsProductModel'
            payment_container:
              description: 'Loyalty merchant card payment container'
              $ref: '#/components/schemas/LoyaltyMerchantcardsDTOPaymentContainer'
            balance:
              description: 'Loyalty merchant card balance'
              type: integer
            points:
              description: 'Loyalty merchant card points'
              type: integer
            bonus_balance:
              description: 'Loyalty merchant card bonus balance'
              type: integer
            cash_balance:
              description: 'Loyalty merchant card cash balance'
              type: integer
            stock_status:
              description: 'Loyalty merchant card stock status'
              type: string
            lock_status:
              description: 'Loyalty merchant card lock status'
              type: string
            last_usage:
              description: 'Loyalty merchant card last usage'
              type: string
            last_charge:
              description: 'Loyalty merchant card last charge'
              type: string
            is_base_card:
              description: 'Information whether loyalty merchant card is base card'
              type: boolean
            passcode:
              description: 'Loyalty merchant card passcode'
              type: integer
          type: object
    LoyaltyMerchantcardsProductWithReceiptModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
        -
          properties:
            receipt_header:
              description: 'Receipt header'
              type: array
              items:
                $ref: '#/components/schemas/ReceiptType'
            receipt:
              description: Receipt
              type: array
              items:
                $ref: '#/components/schemas/ReceiptTypeValue'
            trans_id:
              description: 'Created TransactionId'
              type: integer
            amount:
              description: Amount
              type: integer
          type: object
    ReceiptTypeValue:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/ReceiptType'
        -
          properties:
            value:
              description: 'Value object'
              type: object
              $ref: '#/components/schemas/ReceiptValue'
          type: object
    ReceiptType:
      properties:
        type:
          description: Type
          type: string
      type: object
    ReceiptValue:
      properties:
        caption:
          description: Caption
          type: string
        name:
          description: Name
          type: string
        value:
          description: Value
          type: string
        text:
          description: Text
          type: string
        decoration:
          description: Decoration
          type: array
          items:
            type: string
      type: object
    LoyaltyMerchantcardsValidateMerchantCard:
      properties:
        isValid:
          description: 'Result has true or false value'
          type: boolean
        hasPasscode:
          description: 'Result has true or false value'
          type: boolean
        isLocked:
          description: 'Result has true or false value'
          type: boolean
      type: object
    LoyaltyMerchantcardsCardBalanceReceipt:
      properties:
        valid:
          description: 'Result has true or false value'
          type: boolean
        balance:
          description: 'The total cash balance of the card'
          type: integer
        points:
          description: 'The total points balance of the card'
          type: integer
        new_passcode:
          description: 'Result has true or false value'
          type: boolean
        receipt_header:
          description: 'Receipt header'
          type: array
          items:
            $ref: '#/components/schemas/ReceiptType'
        receipt:
          description: Receipt
          type: array
          items:
            $ref: '#/components/schemas/ReceiptTypeValue'
        amount_split_enabled:
          description: 'Result has true or false value'
          type: boolean
        limit_allowed:
          description: 'Result has true or false value'
          type: boolean
        limit_str:
          description: 'A formatted string of the limit in euro with currency code'
          type: string
        limit:
          description: 'How much the card balance can be negative, zero means unlimited in case limit_allowed is true'
          type: integer
      type: object
    LoyaltyMerchantcardsDTOPaymentContainer:
      properties:
        object:
          description: 'Object of payment container'
          type: string
        id:
          description: 'Id of payment container'
          type: string
          format: id
        type:
          description: 'Type of payment container'
          type: string
        payment_information:
          description: 'Payment information'
          type: object
          $ref: '#/components/schemas/PaymentInformation'
      type: object
    LoyaltyMerchantcardsDTO:
      properties:
        merchant:
          description: 'General merchant id'
          type: string
        card:
          description: 'Loyalty card id'
          type: string
        payment_container:
          description: 'Loyalty payment container id'
          type: string
        created_by_merchant:
          description: 'Created by general merchant or not'
          type: boolean
        used_by_merchant:
          description: 'Used by general merchant or not'
          type: boolean
      type: object
    LoyaltyMerchantcardsDTOLock:
      properties:
        lock_status:
          description: 'Lock status'
          type: string
        reason:
          description: 'Lock reason'
          type: string
        note:
          description: 'Lock note'
          type: string
      type: object
    VirtualTerminalDataModel:
      properties:
        store:
          description: Store
          type: object
        tid:
          description: 'Terminal id'
          type: string
        actions:
          description: Actions
          type: array
          items:
            type: string
        gift_terminal:
          description: 'Gift terminal'
          type: integer
        amount_split_enabled:
          description: 'Amount split enabled'
          type: integer
        disabled:
          description: Disabled
          type: integer
          default: '0'
      type: object
    LoyaltyMerchantcardsDTOCsc:
      properties:
        cardnumber:
          description: 'Card number'
          type: integer
        csc:
          description: 'Card security code'
          type: integer
      type: object
    LoyaltyMerchantcardsDTOTransaction:
      properties:
        action:
          description: Action
          type: string
        terminal_id:
          description: 'Terminal id'
          type: string
        amount:
          description: Amount
          type: integer
        tid:
          description: Tid
          type: string
        store:
          description: 'Store id'
          type: string
        cardnumber:
          description: 'Card number'
          type: integer
        bonus_amount:
          description: 'Bonus amount'
          type: integer
        amount_split_allowed:
          description: 'Amount split allowed'
          type: string
        merchant_id:
          description: 'Merchant id'
          type: string
      type: object
    LoyaltyMerchantcardsDTOValidateMerchantCard:
      properties:
        merchant:
          description: 'General Merchant id'
          type: string
        cardnumber:
          description: 'Loyalty Card number'
          type: integer
      type: object
    LoyaltyMerchantcardsDTONewPasscode:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/LoyaltyMerchantcardsDTOValidateMerchantCard'
        -
          properties:
            passcode:
              description: 'Loyalty Card passcode'
              type: integer
          type: object
    LoyaltyMerchantcardsDTOCheckPasscode:
      properties:
        cardnumber:
          description: 'Loyalty Card number'
          type: integer
        pin:
          description: 'Loyalty Card pin'
          type: integer
      type: object
    LoyaltyMerchantcardsDTOResetPasscode:
      properties:
        cardnumber:
          description: 'Loyalty Card number'
          type: integer
        passcode:
          description: 'Loyalty Card passcode'
          type: integer
      type: object
    LoyaltyMerchantcardsDTOCardsAmount:
      properties:
        cards_amount:
          description: 'Cards amount'
          type: integer
      type: object
    LoyaltyMerchantcardsDTOCardBalanceReceipt:
      properties:
        cardnumber:
          description: 'Loyalty Card number'
          type: integer
        terminal_id:
          description: 'Terminal id'
          type: string
      type: object
    LoyaltyMerchantcardsList:
      properties:
        count:
          description: 'Number of existing loyalty merchant cards'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
      type: object
    disabled:
      properties:
        disabled:
          description: Disabled
          type: integer
      type: object
    raw_merchantcard_id:
      properties:
        result:
          description: 'Result contains raw merchant card id or null'
          type: string
      type: object
    LoyaltyTransactionsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            merchant:
              description: 'Loyalty transaction merchant'
              $ref: '#/components/schemas/LoyaltyTransactionsDTOMerchant'
            cardgroup:
              description: 'Loyalty transaction card group'
              $ref: '#/components/schemas/LoyaltyTransactionsDTOCardgroup'
            store:
              description: 'Loyalty transaction store'
              $ref: '#/components/schemas/LoyaltyTransactionsDTOStore'
            merchantcard:
              description: 'Loyalty transaction merchantcard'
              $ref: '#/components/schemas/LoyaltyTransactionsDTOMerchantcard'
            card:
              description: 'Loyalty transaction card'
              $ref: '#/components/schemas/LoyaltyTransactionsDTOCard'
            parents:
              description: LoyaltyTransactionsProductModel
              type: array
              items:
                $ref: '#/components/schemas/LoyaltyTransactionsDTORelatedTransactions'
            children:
              description: LoyaltyTransactionsProductModel
              type: array
              items:
                $ref: '#/components/schemas/LoyaltyTransactionsDTORelatedTransactions'
            tid:
              description: 'The TID of the processed Smart Device'
              type: string
            status:
              description: 'The status text of the Loyalty Transaction'
              type: string
            amount:
              description: 'Loyalty Transaction amount'
              type: integer
            currency:
              description: 'The currency of the Loyalty Transaction'
              type: string
            balance:
              description: 'The balance of the merchantcard after this Loyalty Transaction'
              type: integer
            description:
              description: 'Loyalty Transaction type'
              type: string
            created:
              description: 'Created at date'
              type: string
            last_changee:
              description: 'Last change oif this transaction, most like a status change'
              type: string
            receipt:
              description: Receipt
              type: array
              items:
                $ref: '#/components/schemas/ReceiptTypeValue'
            is_cancelling:
              description: 'Indicator for a cancelling transaction (1 = full-cancel, 3 = partial-cancel)'
              type: integer
          type: object
    LoyaltyTransactionsDTOMerchant:
      properties:
        id:
          description: 'Merchant id'
          type: string
      type: object
    LoyaltyTransactionsDTOCardgroup:
      properties:
        id:
          description: 'Cardgroup id'
          type: string
        display_name:
          description: 'Cardgroup Name'
          type: string
        stock_warn_limit:
          description: 'Warn limit for Cardgroup stock'
          type: integer
      type: object
    LoyaltyTransactionsDTOStore:
      properties:
        id:
          description: 'General Store id'
          type: string
        name:
          description: 'General Store Name'
          type: string
      type: object
    LoyaltyTransactionsDTOMerchantcard:
      properties:
        id:
          description: 'Merchantcard id'
          type: string
      type: object
    LoyaltyTransactionsDTOCard:
      properties:
        id:
          description: 'Loyalty Card id'
          type: string
        cardnumber:
          description: 'Loyalty Card Cardnumber'
          type: string
      type: object
    LoyaltyTransactionsDTORelatedTransactions:
      properties:
        id:
          description: 'Loyalty Transaction id'
          type: string
        trans_id:
          description: 'Loyalty Transaction trans_id'
          type: integer
        ref_type_id:
          description: 'Indicator for relation type of Loyalty Transactions'
          type: integer
      type: object
    LoyaltyTransactionsList:
      properties:
        count:
          description: 'Number of existing loyalty transactions'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/LoyaltyTransactionsProductModel'
      type: object
    PaymentContainersProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            contract:
              description: 'Payment container contract'
              $ref: '#/components/schemas/PaymentContractsProductModel'
            customer:
              description: 'Payment container customer'
              $ref: '#/components/schemas/PaymentCustomersProductModel'
            assign:
              description: 'Assign to'
              $ref: '#/components/schemas/ProductInstanceUID'
            type:
              description: 'Type of payment container'
              type: string
            public:
              description: 'Public payment instrument data'
              $ref: '#/components/schemas/OneOfPaymentContainersDTOModelPrivate'
            private:
              description: 'Private payment instrument data'
              $ref: '#/components/schemas/OneOfPaymentContainersDTOModelPrivate'
            created:
              description: 'Creation date'
              type: string
            updated:
              description: 'Last update date'
              type: string
            mandate:
              description: 'Payment container mandate'
              $ref: '#/components/schemas/PaymentContainerMandate'
          type: object
    PaymentContainersDTO:
      properties:
        customer:
          description: 'The customer of this payment container'
          properties:
            id:
              description: 'Customer identifier'
              type: string
          type: object
          deprecated: true
        customer_id:
          description: Payment-Customer-ID
          type: string
        type:
          description: 'Type of Payment Containers'
          type: string
        private:
          description: 'Private payment instrument data'
          $ref: '#/components/schemas/OneOfPaymentContainersDTOModelPrivate'
      type: object
    PaymentContainerMandate:
      properties:
        sepa_mandate_id:
          description: 'Sepa mandate id'
          type: string
        iban:
          description: IBAN
          type: string
        bic:
          description: BIC
          type: string
        type:
          description: Type
          type: string
        status:
          description: Status
          type: string
        identification:
          description: Identification
          type: string
        creditor_id:
          description: 'Creditor ID'
          type: string
      type: object
    PaymentContainersList:
      properties:
        count:
          description: 'Number of existing payment containers'
          type: integer
        data:
          description: PaymentContainersList
          type: array
          items:
            $ref: '#/components/schemas/PaymentContainersProductModel'
      type: object
    OneOfPaymentContainersDTOModelPrivate:
      description: 'Payment instrument data'
      type: object
      discriminator:
        propertyName: type
        mapping:
          bank_account: '#/components/schemas/BankAccountDescriptor'
          credit_card: '#/components/schemas/CreditCardDescriptor'
      oneOf:
        -
          $ref: '#/components/schemas/BankAccountDescriptor'
        -
          $ref: '#/components/schemas/CreditCardDescriptor'
    PaymentContractsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            parent:
              description: 'Payment contract'
              $ref: '#/components/schemas/ProductInstanceUID'
            demo:
              description: 'Is this a demo contract'
              type: boolean
            created:
              description: 'Created at date'
              type: string
            updated:
              description: 'Updated at date'
              type: string
          type: object
    PaymentContractsDTO:
      properties:
        merchant:
          description: 'Contracts Merchant'
          type: string
        internal_reference:
          description: 'The internal user id'
          type: string
        contract_id:
          description: 'Contracts id'
          type: string
        demo:
          description: 'Is this a demo contract'
          type: string
        url_push:
          description: 'An URL where your service listen for push notifications of the secuconnect service'
          type: string
        unique_order_id:
          description: 'Bool, default FALSE. If TRUE, an error message will be thrown if you try to create a new payment transaction with the same order_id of an previous transaction.'
          type: boolean
        scoring:
          description: 'Bool, default TRUE. If FALSE, the customer scoring is disabled for your payment contract'
          type: boolean
      type: object
    PaymentContractsDTOClone:
      properties:
        project:
          description: 'Name of the project (must be unique)'
          type: string
          example: 'My super fancy project #1'
        payment_data:
          description: 'Merchants bank account for the payout'
          type: object
          $ref: '#/components/schemas/PaymentInformation'
        payin_account:
          description: 'Pay in account'
          type: boolean
          default: 'false'
        url_push:
          description: 'The default URL where your service listen for push notifications of the secuconnect service'
          type: string
          example: 'https://example.com/'
      type: object
    PaymentContractsDTORequestId:
      properties:
        contact:
          description: Contact
          type: object
          $ref: '#/components/schemas/Contact'
        project:
          description: 'Name of the project (must be unique)'
          type: string
          example: 'My super fancy project #1'
        payout_account:
          description: 'Merchants bank account for the payout'
          type: object
          $ref: '#/components/schemas/PaymentInformation'
        iframe_opts:
          description: 'IFrame opts'
          type: object
          $ref: '#/components/schemas/PaymentContractsDTOIFrameOpts'
        payin_account:
          description: 'Pay in account'
          type: boolean
          default: 'false'
        create_first_store:
          description: 'Create first store'
          type: boolean
          default: 'false'
        store_name:
          description: 'Store name'
          type: string
      type: object
    PaymentContractsDTOIFrameOpts:
      properties:
        show_basket:
          description: 'Display the basket items to the customer during the checkout'
          type: boolean
          example: 'true'
        basket_title:
          description: 'Default headline of the checkout page'
          type: string
          example: 'Projext XY unterstützen'
        submit_button_title:
          description: 'Default naming of the Submit-Button'
          type: string
          example: 'Zahlungspflichtig unterstützen'
        logo_base64:
          description: 'Logo base64-enconded'
          type: string
        cession:
          description: 'Cession (''formal'', ''personal'')'
          type: string
          default: personal
      type: object
    PaymentContractsList:
      properties:
        count:
          description: 'Number of existing payment contracts'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentContractsProductModel'
      type: object
    PaymentContractsRequestIdResult:
      properties:
        contract:
          description: 'The payment contract object'
          $ref: '#/components/schemas/ProductInstanceUID'
        merchant:
          description: Merchant
          $ref: '#/components/schemas/ProductInstanceUID'
        store:
          description: Store
          $ref: '#/components/schemas/ProductInstanceUID'
        apikey:
          description: 'Returns the apikey of the created merchant'
          type: string
        payin_account:
          description: 'The bank account you can use for pay in.'
          type: object
          $ref: '#/components/schemas/PaymentInformation'
      type: object
    PaymentCustomersProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            contract:
              description: 'Payment contract'
              $ref: '#/components/schemas/ProductInstanceUID'
            contact:
              description: 'Customer contact info'
              $ref: '#/components/schemas/Contact'
            created:
              description: 'Created at date'
              type: string
            updated:
              description: 'Updated at date'
              type: string
          type: object
    PaymentCustomersDTO:
      properties:
        contact:
          type: object
          $ref: '#/components/schemas/Contact'
      type: object
    PaymentCustomersList:
      properties:
        count:
          description: 'Number of existing payment customers'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCustomersProductModel'
      type: object
    SecupayTransactionProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            trans_id:
              description: 'Transaction identifier'
              type: integer
            status:
              description: 'Transaction status'
              type: string
            amount:
              description: 'Total amount of payment in cents (or the smallest cash unit of the relevant currency)'
              type: integer
            currency:
              description: 'ISO 4217 code of currency, eg EUR for Euro.'
              type: string
            purpose:
              description: 'The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.'
              type: string
            order_id:
              description: 'Specifying an order number. Depending on the contract setting, this must be unique for each payment.'
              type: string
            payment_id:
              description: 'Payment ID'
              type: string
            basket:
              description: 'A list of items that are being purchased.'
              type: array
              items:
                $ref: '#/components/schemas/SecupayBasketItem'
            transaction_status:
              description: 'Transaction status (number)'
              type: string
            accrual:
              description: 'Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.'
              type: boolean
            payment_action:
              description: 'Specifies whether a pre-authorization ("authorization") or instant payment ( "sale") is to be performed. Standard value here is "sale". The collection of the pre-authorized payment is made with the "capture" command.'
              type: string
            transfer_purpose:
              description: 'The purpose the payer needs to use for his transfer'
              type: string
            transfer_account:
              description: 'The bank account the payer needs to use for his transfer'
              type: object
              $ref: '#/components/schemas/PaymentInformation'
            customer:
              description: 'The customer object'
              type: object
              $ref: '#/components/schemas/PaymentCustomersProductModel'
            used_payment_instrument:
              description: 'The payment data which has the payer used (like bank account, credit card, ...). This data is always masked.'
              properties:
                type:
                  description: 'The type of the payment instrument data, like: ''bank_account'' or ''credit_card'''
                  type: string
                data:
                  description: 'Used payment instrument data'
                  $ref: '#/components/schemas/OneOfPaymentContainersDTOModelPrivate'
              type: object
            redirect_url:
              description: 'A list of redirect urls used for the payment checkout page'
              type: object
              $ref: '#/components/schemas/SecupayRedirectUrl'
            subscription:
              description: 'Recurring payments information'
              type: object
              $ref: '#/components/schemas/SecupayTransactionProductDTOSubscription'
            iframe_url:
              description: 'The url of the payment checkout iframe'
              type: string
            container:
              description: 'The container object'
              type: object
              $ref: '#/components/schemas/PaymentContainersProductModel'
            sub_transactions:
              description: 'A list of sub transactions (for mixed basket)'
              type: array
              items:
                $ref: '#/components/schemas/SecupaySubTransactionProductModel'
            mandate:
              description: 'SEPA mandate infromation'
              $ref: '#/components/schemas/PaymentContainerMandate'
          type: object
    SecupayTransactionProductDTO:
      properties:
        amount:
          description: 'Total amount of payment in cents (or the smallest cash unit of the relevant currency)'
          type: integer
        currency:
          description: 'ISO 4217 code of currency, eg EUR for Euro.'
          type: string
        purpose:
          description: 'The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.'
          type: string
        payment_methods:
          description: 'payment methods'
          type: array
          items:
            type: string
            example: twint
        order_id:
          description: 'Specifying an order number. Depending on the contract setting, this must be unique for each payment.'
          type: string
        basket:
          description: 'A list of items that are being purchased.'
          type: array
          items:
            $ref: '#/components/schemas/SecupayBasketItem'
        accrual:
          description: 'Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.'
          type: boolean
        payment_action:
          description: 'Specifies whether a pre-authorization ("authorization") or instant payment ("sale") is to be performed. Standard value here is "sale". The collection of the pre-authorized payment is made with the "capture" command.'
          type: string
        customer:
          description: 'The customer object'
          type: object
          $ref: '#/components/schemas/PaymentCustomersProductModel'
        redirect_url:
          description: 'A list of redirect urls used for the payment checkout page'
          type: object
          $ref: '#/components/schemas/SecupayRedirectUrl'
        contract:
          description: 'Contract id'
          type: string
        container:
          description: 'Container id'
          type: string
        opt_data:
          description: 'Options for customizing the checkout page'
          properties:
            has_accepted_disclaimer:
              description: 'Customer accepted disclaimer'
              type: string
            language:
              description: 'Client language'
              type: string
          type: object
        subscription:
          description: 'Recurring payments'
          type: object
          $ref: '#/components/schemas/SecupayTransactionProductDTOSubscription'
        demo:
          description: Demo
          type: boolean
        experience:
          description: 'Customer experience score'
          properties:
            positive:
              description: 'Score of positive experience (paid orders)'
              type: integer
            negative:
              description: 'Score of negative experience (open/unpaid orders)'
              type: integer
          type: object
      type: object
    SecupayTransactionProductDTOSubscription:
      description: 'Recurring payments'
      properties:
        purpose:
          description: 'The purpose of the subscription'
          type: string
        id:
          description: 'Id of subscription, if exists'
          type: integer
      type: object
    SecupaySubTransactionProductModel:
      description: SecupaySubTransactionProductModel
      properties:
        id:
          description: id
          type: string
        trans_id:
          description: trans_id
          type: integer
        reference_id:
          description: reference_id
          type: string
      type: object
    SecupayRedirectUrl:
      properties:
        iframe_url:
          description: 'The url of the payment checkout iframe'
          type: string
        url_success:
          description: 'After successfully entering the cash data of the payer is returned to this page.'
          type: string
        url_failure:
          description: 'After canceling or on errors the payer will be redirected to this page and can select there an another payment method.'
          type: string
        url_push:
          description: 'The secupay system will be send status change notifications to this URL.'
          type: string
      type: object
    SecupayBaseBasketItem:
      description: 'Item describing single position in basket in transaction'
      properties:
        item_type:
          description: 'Category of item'
          type: string
          default: article
        article_number:
          description: 'Article number of item'
          type: string
        quantity:
          description: 'Quantity of articles in item'
          type: integer
        name:
          description: 'Descriptive name of item'
          type: string
        model:
          description: 'Model of item'
          type: string
        ean:
          description: 'EAN, European Article Number'
          type: string
        tax:
          description: 'Applicable tax in percentages'
          type: string
        total:
          description: 'Total price'
          type: integer
        price:
          description: 'Price of single article, if item is of article category'
          type: integer
        apikey:
          description: 'Special param for stakeholder payments'
          type: string
        transaction_hash:
          description: 'Special param for payout payments'
          type: string
        contract_id:
          description: 'Contract id - Special param for stakeholder payments'
          type: string
        reference_id:
          description: 'Reference id - must be unique for the entire basket'
          type: string
      type: object
    SecupayBasketItem:
      description: 'Item describing single position in basket in transaction'
      allOf:
        -
          $ref: '#/components/schemas/SecupayBaseBasketItem'
        -
          properties:
            sub_basket:
              description: 'Mixed-Basket: All basket items for one merchant.'
              type: array
              items:
                $ref: '#/components/schemas/SecupayBasketItem'
          type: object
    SecupayTransactionDTOExternalInvoicePdf:
      properties:
        update_existing:
          description: 'Update existing invoice PDF'
          type: boolean
      type: object
    SecupayTransactionExternalInvoicePdf:
      properties:
        document:
          description: 'Information about the saved document'
          properties:
            id:
              description: 'The Document File ID'
              type: string
            mime_type:
              description: 'The MIME Type'
              type: string
            name:
              description: 'The file name'
              type: string
            size:
              description: 'The size of the file in bytes'
              type: integer
            url:
              description: 'The download-url to this file'
              type: string
          type: object
      type: object
    SecupayTransactionCancelDTO:
      properties:
        contract:
          description: 'The payment contract object'
          type: object
        amount:
          description: 'partial or full refund amount, "0" means full refund'
          type: integer
          default: '0'
        reduce_stakeholder_payment:
          description: 'Mixed-Basket: (percentage) reduce the stakeholder amount too'
          type: boolean
          default: 'false'
      type: object
    SecupayTransactionCaptureDTO:
      properties:
        contract:
          description: 'The payment contract object'
          type: object
      type: object
    SecupayTransactionUpdateBasketDTO:
      properties:
        contract:
          description: 'The payment contract object'
          type: object
        basket:
          description: 'A list of items that are being purchased.'
          type: array
          items:
            $ref: '#/components/schemas/SecupayBasketItem'
      type: object
    SecupayTransactionReverseAccrualDTO:
      properties:
        accrual:
          description: 'Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE).'
          type: boolean
          default: 'false'
      type: object
    SecupayTransactionSetShippingInformationDTO:
      properties:
        carrier:
          description: 'Shipping provider name'
          type: string
        tracking_id:
          description: Tracking-ID
          type: string
        invoice_number:
          description: 'Merchants invoice number'
          type: string
      type: object
    PaymentCancelResult:
      description: 'Refund information'
      properties:
        new_trans_id:
          description: 'The transaction ID of the refund transaction'
          type: integer
          default: '0'
        demo:
          description: Demo
          type: boolean
          default: 'false'
        result:
          description: 'Refund information'
          type: object
      type: object
    PaymentCancelResultDetails:
      description: 'Refund information'
      properties:
        new_trans_id:
          description: 'The transaction ID of the refund transaction'
          type: integer
          default: '0'
        remaining_amount:
          description: 'The remaining amount in case of a partial refund/cancel'
          type: integer
          default: '0'
        refund_waiting_for_payment:
          description: 'If the merchant needs to transfer money back, this will be true'
          type: boolean
          default: 'false'
      type: object
    SecupayPayoutProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            trans_id:
              description: 'ID of transaction'
              type: integer
            status:
              description: 'Transaction status'
              type: string
            amount:
              description: 'Total amount of transaction lit''s items'
              type: integer
            currency:
              description: 'ISO 4217 code of currency, eg EUR for Euro.'
              type: string
            purpose:
              description: 'The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.'
              type: string
            order_id:
              description: 'Specifying an order number. Depending on the contract setting, this must be unique for each payment.'
              type: string
            transaction_status:
              description: 'Transaction status (number)'
              type: string
            transaction_list:
              description: 'A list of transaction items'
              type: array
              items:
                $ref: '#/components/schemas/SecupayTransactionListItem'
            transfer_purpose:
              description: 'The purpose the payer needs to use for his transfer'
              type: string
            transfer_account:
              description: 'The bank account the payer needs to use for his transfer'
              type: object
              $ref: '#/components/schemas/PaymentInformation'
          type: object
    SecupayTransactionListItem:
      properties:
        item_type:
          description: 'Category of item'
          type: string
          default: transaction_payout
        reference_id:
          description: 'Reference id - must be unique for the entire basket'
          type: string
        name:
          description: 'Item name'
          type: string
        transaction_hash:
          description: 'Id of transaction'
          type: string
          example:
            - pbkacphkbuem2772626
        transaction_id:
          description: 'Id of transaction'
          type: string
          example:
            - PCI_WR67G325XTG2R45JJDNBG048PW4BN4
        container_id:
          description: 'Payment Container ID'
          type: string
          example:
            - PCT_2BV27QVYR2N26P2S5H3G98G66X9JAJ
        total:
          description: 'Total price'
          type: integer
      type: object
    SecupayPayoutDTO:
      properties:
        redirect_url:
          description: 'A list of redirect urls used for the payment checkout page'
          type: object
          $ref: '#/components/schemas/SecupayRedirectUrl'
        contract:
          description: 'The contract ID'
          type: string
        customer:
          description: 'The customer object'
          type: object
          $ref: '#/components/schemas/PaymentCustomersProductModel'
        opt_data:
          description: 'Options for customizing the checkout page'
          properties:
            language:
              description: 'Client language'
              type: string
          type: object
        amount:
          description: 'Total amount of transaction lit''s items'
          type: integer
        currency:
          description: 'ISO 4217 code of currency, eg EUR for Euro.'
          type: string
        purpose:
          description: 'The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.'
          type: string
        order_id:
          description: 'Specifying an order number. Depending on the contract setting, this must be unique for each payment.'
          type: string
        transaction_list:
          description: 'A list of transaction items'
          type: array
          items:
            $ref: '#/components/schemas/SecupayTransactionListItem'
      type: object
    PaymentTransactionsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            platform:
              description: Platform
              $ref: '#/components/schemas/ProductInstanceUID'
            merchant:
              description: 'Merchant information'
              $ref: '#/components/schemas/GeneralMerchantsProductModel'
            store:
              description: 'Merchants store information'
              $ref: '#/components/schemas/GeneralStoresProductModel'
            trans_id:
              description: 'Transaction identifier'
              type: integer
            parents:
              description: Parents
              type: array
              items:
                $ref: '#/components/schemas/ParentObj'
            product_id:
              description: 'Product identifier'
              type: integer
            product:
              description: 'Product type'
              type: string
            product_raw:
              description: 'the name of the payment product'
              type: string
            zahlungsmittel_id:
              description: 'The internal id of the stored payment instrument.'
              type: integer
            contract_id:
              description: 'Contract identifier'
              type: integer
            amount:
              description: 'Total amount of payment in cents (or the smallest cash unit of the relevant currency)'
              type: integer
            currency:
              description: 'ISO 4217 code of currency, eg EUR for Euro.'
              type: string
              example:
                - EUR
            created:
              description: 'Created at date'
              type: string
            updated:
              description: 'Updated at date'
              type: string
            status:
              description: 'Transaction status ID'
              type: integer
            status_text:
              description: 'Transaction status description'
              type: string
            incoming_payment_date:
              description: 'Date when the payment was received'
              type: string
            details:
              description: 'Transaction details'
              properties:
                amount:
                  description: 'Total amount of payment in cents (or the smallest cash unit of the relevant currency)'
                  type: integer
                cleared:
                  description: 'Clearing status'
                  type: string
                status:
                  description: 'Transaction status ID'
                  type: integer
                status_text:
                  description: 'Transaction status description'
                  type: string
                status_simple:
                  description: 'Transaction simple-status ID'
                  type: integer
                status_text_simple:
                  description: 'Transaction simple-status description'
                  type: string
                description:
                  description: 'Transaction description'
                  type: string
                description_raw:
                  description: 'Transaction description (plain text)'
                  type: string
              type: object
            customer:
              description: PaymentTransactionsProductModel
              properties:
                companyname:
                  description: 'Customer company name'
                  type: string
                salutation:
                  description: 'Customer salutation'
                  type: string
                title:
                  description: 'Customer title'
                  type: string
                forename:
                  description: 'Customer forename'
                  type: string
                surname:
                  description: 'Customer surname'
                  type: string
              type: object
            tid:
              description: Terminal-ID
              type: string
            payment_data:
              description: 'Data of the used payment instrument'
              type: string
            store_name:
              description: 'Store name'
              type: string
            payout_date:
              description: 'Date when the payout was created'
              type: string
            invoice_number:
              description: 'Invoice number (from merchant)'
              type: string
            transaction_hash:
              description: Payment-ID
              type: string
            reference_id:
              description: 'Reference ID'
              type: string
            account_owner:
              description: 'Name of the bank account owner'
              type: string
            accrual:
              description: 'Accrual Flag'
              type: boolean
          type: object
    PaymentTransactionsInstructions:
      properties:
        lang:
          description: Language
          type: string
        amount:
          description: Amount
          type: integer
        currency:
          description: Currency
          type: string
        payment:
          description: 'Payment data'
          $ref: '#/components/schemas/BankAccountDescriptor'
      type: object
    PaymentTransactionCancelDTO:
      properties:
        reason:
          description: 'The reason of this cancel or refund'
          type: string
        amount:
          description: 'partial or full refund amount, "0" means full refund'
          type: integer
          default: '0'
        reduce_stakeholder_payment:
          description: 'Mixed-Basket: (percentage) reduce the stakeholder amount too'
          type: boolean
          default: 'false'
        container_id:
          description: 'Payment Container ID'
          type: string
      type: object
    PaymentTransactionsList:
      properties:
        count:
          description: 'Number of existing payment transactions'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentTransactionsProductModel'
      type: object
    PaymentTransactionsCancelList:
      type: array
      items:
        $ref: '#/components/schemas/PaymentTransactionsProductModel'
    PaymentTransactionsShippingUrl:
      properties:
        url:
          description: 'The url of the shipping information form'
          type: string
      type: object
    PrepaidMappingZvt:
      properties:
        item:
          description: 'Prepaid item'
          properties:
            id:
              description: 'prepaid item id'
              type: integer
          type: object
        vtc_id:
          description: 'Vtc id'
          type: string
      type: object
    PrepaidZvtDTO:
      properties:
        amount:
          description: amount
          type: integer
        product_id:
          description: 'Product identifier'
          type: integer
      type: object
    PrepaidItemsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            retail_price:
              description: 'Retail price'
              type: integer
            currency:
              description: Currency
              type: string
            description:
              description: Description
              type: string
            logo:
              description: Logo
              type: string
            commission:
              description: Commission
              type: integer
            vtc_id:
              description: 'Vtc id'
              type: string
            itemgroup:
              description: 'Item group'
              $ref: '#/components/schemas/ItemGroup'
            stock_limit_max:
              description: 'Stock limit max'
              type: integer
            stock_limit_min:
              description: 'Stock limit min'
              type: integer
            taxable:
              description: Taxable
              type: boolean
            type:
              description: Type
              type: string
          type: object
    PrepaidItemsList:
      properties:
        count:
          description: 'Number of existing prepaid items'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/PrepaidItemsProductModel'
      type: object
    PrepaidSalesProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            status:
              description: Status
              type: string
            stock:
              description: 'Prepaid stock'
              $ref: '#/components/schemas/ProductInstanceUID'
            item:
              description: 'Prepaid item'
              $ref: '#/components/schemas/PrepaidSalesItem'
            itemgroup:
              description: 'Prepaid item group'
              $ref: '#/components/schemas/ItemGroup'
            smart_device:
              description: 'Smart device'
              $ref: '#/components/schemas/PrepaidSalesSmartDevice'
            merchant:
              description: 'General merchant'
              $ref: '#/components/schemas/ProductInstanceUID'
            store:
              description: 'General store'
              $ref: '#/components/schemas/Store'
            contract:
              description: 'Prepaid contract'
              $ref: '#/components/schemas/ProductInstanceUID'
            created:
              description: 'Prepaid sale creation date'
              type: string
            demo:
              description: Demo
              type: boolean
            description:
              description: Description
              type: string
            amount:
              description: Amount
              type: integer
            currency:
              description: Currency
              type: string
            commission:
              description: Commission
              type: integer
            commission_currency:
              description: 'Commission currency'
              type: string
            code:
              description: Code
              type: string
            serial:
              description: Serial
              type: string
            cardnumber:
              description: 'Card number'
              type: string
            expire_date:
              description: 'Expire date'
              type: string
            provider_delivery_number:
              description: 'Provider delivery number'
              type: string
            receipt_header:
              description: 'Receipt header'
              type: string
            receipt_customer:
              description: 'Receipt customer'
              type: string
            receipt_zvt:
              description: 'Receipt zvt'
              type: string
            receipt_dealer:
              description: 'Receipt dealer'
              type: string
            vtc_tid:
              description: 'Vtc tid'
              type: string
          type: object
    PrepaidSalesItem:
      properties:
        object:
          description: 'Object of item'
          type: string
        id:
          description: 'Id of item'
          type: string
          format: id
        description:
          description: 'Item description'
          type: string
        logo:
          description: 'Item logo'
          type: string
        type:
          description: 'Item type'
          type: string
      type: object
    PrepaidSalesSmartDevice:
      properties:
        object:
          description: 'Object of smart device'
          type: string
        id:
          description: 'Id of smart device'
          type: string
        description:
          description: 'Smart device description'
          type: string
        vendor_uid:
          description: 'Smart device vendor uid'
          type: string
      type: object
    PrepaidSalesProductDTO:
      properties:
        item:
          description: 'prepaid sales transaction id'
          type: string
      type: object
    UploadidentsProductModel:
      properties:
        service_issue_id:
          description: 'Service issue id'
          type: integer
      type: object
    UploadidentsProductDTO:
      properties:
        merchant_id:
          description: 'Merchant ID'
          type: string
        payment_id:
          description: 'Payment ID'
          type: string
        contract_id:
          description: 'Contract ID'
          type: string
        apikey:
          description: 'Api Key'
          type: string
        service_issue_id:
          description: 'Service issue id'
          type: integer
        document_ids:
          description: 'List of documents ids'
          type: array
          items:
            type: string
      type: object
    SmartDevicesProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            merchant:
              description: Merchant
              $ref: '#/components/schemas/ProductInstanceUID'
            store:
              description: Store
              $ref: '#/components/schemas/Store'
            contract:
              description: Contract
              $ref: '#/components/schemas/ProductInstanceUID'
            vendor:
              description: Vendor
              type: string
            vendor_uid:
              description: 'Vendor uid'
              type: string
            type:
              description: Type
              type: string
            device:
              description: Device
              $ref: '#/components/schemas/SmartDevicesDevice'
            routing:
              description: Routing
              $ref: '#/components/schemas/ProductInstanceUID'
            user_pin:
              description: 'User pin'
              type: string
            products:
              description: Products
              $ref: '#/components/schemas/SmartDevicesProducts'
            description:
              description: Description
              type: string
            tid:
              description: TID
              type: string
            idle_screen_register:
              description: 'Idle screen register'
              type: string
            idle_screen_terminal:
              description: 'Idle screen terminal'
              type: string
            created:
              description: 'Created at date'
              type: string
            online:
              description: Online
              type: boolean
            refresh:
              description: 'Last refresh timestamp'
              type: integer
            terminal_type:
              description: 'Terminal type'
              type: string
            base_version:
              description: 'Base version'
              type: string
          type: object
    SmartDevicesProducts:
      properties:
        loyalty:
          description: Loyalty
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        smart:
          description: Smart
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        cashreg:
          description: Cashreg
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        collect:
          description: Collect
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        showcase:
          description: Showcase
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        vtm:
          description: Vtm
          $ref: '#/components/schemas/SmartDeviceProductsEnabled'
        prepaid:
          description: Prepaid
          $ref: '#/components/schemas/SmartDeviceProductsPrepaid'
      type: object
    SmartDeviceProductsEnabled:
      properties:
        enabled:
          description: Enabled
          type: boolean
      type: object
    SmartDeviceProductsPrepaid:
      properties:
        enabled:
          description: Enabled
          type: boolean
        simulate_force:
          description: 'Simulate force'
          type: boolean
        demo_force:
          description: 'Demo force'
          type: boolean
        vtc_tid:
          description: 'Vtc tid'
          type: string
      type: object
    SmartDevicesDevice:
      properties:
        object:
          description: 'Object of device'
          type: string
        id:
          description: 'Id of device'
          type: string
        serial_number:
          description: 'Serial number'
          type: string
      type: object
    SmartDevicesDTO:
      properties:
        merchant:
          description: Merchant
          type: string
        store:
          description: Store
          type: string
        device:
          description: Device
          type: string
        contract:
          description: Contract
          type: string
        vendor:
          description: Vendor
          type: string
        vendor_uid:
          description: 'Vendor uid'
          type: string
        type:
          description: Type
          type: string
        description:
          description: Description
          type: string
        tid:
          description: TID
          type: string
        products:
          description: Products
          $ref: '#/components/schemas/SmartDevicesProducts'
        terminal_type:
          description: 'Terminal type'
          type: string
        base_version:
          description: 'Base version'
          type: string
      type: object
    SmartDevicesList:
      properties:
        count:
          description: 'Number of existing smart devices'
          type: integer
        data:
          description: SmartDevicesList
          type: array
          items:
            $ref: '#/components/schemas/SmartDevicesProductModel'
      type: object
    SmartDeviceUserPin:
      properties:
        user_pin:
          description: 'user code from authentication response'
          type: string
      type: object
    SmartRoutingsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            merchant:
              description: Merchant
              $ref: '#/components/schemas/ProductInstanceUID'
            store:
              description: Store
              $ref: '#/components/schemas/Store'
            description:
              description: Description
              type: string
            created:
              description: 'Created at date'
              type: string
            updated:
              description: 'Updated at date'
              type: string
            assign:
              description: Assign
              type: array
              items:
                $ref: '#/components/schemas/SmartRoutingsAssign'
          type: object
    SmartRoutingsAssign:
      properties:
        object:
          description: 'Object of smart routing assign'
          type: string
        id:
          description: 'Id of smart routing assign'
          type: string
          format: id
        priority:
          description: Priority
          type: integer
        type:
          description: Type
          type: string
        description:
          description: Description
          type: string
      type: object
    SmartRoutingsDTO:
      properties:
        store:
          description: 'General store ID'
          type: string
        description:
          description: Description
          type: string
      type: object
    SmartRoutingsList:
      properties:
        count:
          description: 'Number of existing smart routings'
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SmartRoutingsProductModel'
      type: object
    SmartRoutingPriority:
      properties:
        priority:
          description: Priority
          type: integer
      type: object
    SmartTransactionsProductModel:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/BaseProductModel'
        -
          properties:
            status:
              description: 'Status of smart transaction'
              type: string
            merchant:
              description: Merchant
              $ref: '#/components/schemas/SmartTransactionsMerchant'
            contract:
              description: Contract
              $ref: '#/components/schemas/ProductInstanceUID'
            provider_contract:
              description: 'Provider contract'
              $ref: '#/components/schemas/ProductInstanceUID'
            customer:
              description: Customer
              $ref: '#/components/schemas/PaymentCustomersProductModel'
            shipping_address:
              description: 'Customers delivery address'
              $ref: '#/components/schemas/PaymentCustomersProductModel'
            container:
              description: 'Payment Container'
              $ref: '#/components/schemas/ProductInstanceUID'
            checkin:
              description: 'Check in'
              $ref: '#/components/schemas/SmartTransactionsCheckin'
            merchantRef:
              description: 'Merchant reference'
              type: string
            transactionRef:
              description: 'Transaction reference'
              type: string
            store:
              description: Store
              $ref: '#/components/schemas/ProductInstanceUID'
            device_source:
              description: 'Device source'
              $ref: '#/components/schemas/ProductInstanceUID'
            device_destination:
              description: 'Device destination'
              $ref: '#/components/schemas/ProductInstanceUID'
            created:
              description: 'Created at date'
              type: string
            updated:
              description: 'Updated at date'
              type: string
            receipt_number:
              description: 'Receipt number'
              type: integer
            receipt:
              description: Receipt
              type: array
              items:
                $ref: '#/components/schemas/SmartTransactionsReceipt'
            receipt_merchant:
              description: 'Receipt merchant'
              type: array
              items:
                $ref: '#/components/schemas/SmartTransactionsReceipt'
            receipt_merchant_print:
              description: 'Receipt merchant print'
              type: boolean
            basket_info:
              description: 'Basket info'
              $ref: '#/components/schemas/SmartTransactionsBasketInfo'
            basket:
              description: Basket
              $ref: '#/components/schemas/SmartTransactionsBasket'
            idents:
              description: Idents
              type: array
              items:
                $ref: '#/components/schemas/SmartTransactionsIdent'
            tax_rate:
              description: 'Tax rate'
              type: integer
            tax_amount:
              description: 'Tax amount'
              type: integer
            cashier:
              description: Cashier
              type: string
            market:
              description: Market
              type: string
            order_option:
              description: 'Order option'
              type: string
              example:
                - shipping
            pickup_options:
              description: 'Pickup options'
              $ref: '#/components/schemas/SmartTransactionsPickupOptions'
            shipment_details:
              description: 'Shipment details'
              $ref: '#/components/schemas/SmartTransactionsShipmentDetails'
            product:
              description: Product
              type: string
            trans_id:
              description: 'Transaction id'
              type: integer
            payment_method:
              description: 'Payment method'
              type: string
              example:
                - debit
            transactions:
              description: 'Payment Transactions'
              type: array
              items:
                $ref: '#/components/schemas/PaymentTransactionsProductModel'
            last_visited_page:
              description: 'Last visited page'
              type: string
            is_demo:
              description: 'Demo payment'
              type: boolean
            checkout_links:
              description: 'Checkout Links'
              $ref: '#/components/schemas/SmartTransactionsCheckoutLinks'
            iframe_url:
              description: 'IFrame URL'
              type: string
          type: object
    SmartTransactionsShipmentDetails:
      properties:
        shipped_at:
          description: 'Shipment Date'
          type: string
        shipped_by:
          description: 'Parcel Provider'
          type: string
        tracking_code:
          description: 'Tracking Code'
          type: string
        invoice_number:
          description: 'Invoice Number'
          type: string
      type: object
    SmartTransactionsCheckoutLinks:
      properties:
        url_success:
          description: 'Success URL'
          type: string
        url_failure:
          description: 'Failure URL'
          type: string
        url_abort:
          description: 'Abort URL'
          type: string
        url_error:
          description: 'Error URL'
          type: string
        url_checkout:
          description: 'Smart Checkout URL'
          type: string
      type: object
    SmartTransactionsPreTransactionModel:
      properties:
        missing_sum:
          description: 'missing sum'
          type: integer
        bonus_products:
          description: SmartTransactionsPreTransactionModel
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsBonusProducts'
      type: object
    SmartTransactionsBaseProduct:
      properties:
        id:
          description: 'Bonus Product ID'
          type: integer
        tax:
          description: Tax
          type: integer
        priceOne:
          description: 'price of one bonus product'
          type: integer
        quantity:
          description: 'amount of bonus products'
          type: integer
        desc:
          description: description
          type: string
        articleNumber:
          description: 'article Number'
          type: string
        ean:
          description: 'international article number'
          type: string
      type: object
    SmartTransactionsBonusProducts:
      type: object
      allOf:
        -
          $ref: '#/components/schemas/SmartTransactionsBaseProduct'
        -
          properties:
            serialNumber:
              description: 'The serialnumber of the scanned posa card'
              type: string
          type: object
    SmartTransactionsCheckin:
      properties:
        object:
          description: 'Object of smart transaction check in'
          type: string
        id:
          description: 'Id of smart transaction check in'
          type: string
          format: id
        email:
          description: Email
          type: string
      type: object
    SmartTransactionsBasketInfo:
      properties:
        sum:
          description: Sum
          type: integer
        gratuity:
          description: Gratuity
          type: integer
        currency:
          description: Currency
          type: string
      type: object
    SmartTransactionsBasket:
      properties:
        products:
          description: Products
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsBasketProduct'
        type:
          description: 'Basket Type'
          type: string
      type: object
    SmartTransactionsBasketProduct:
      properties:
        id:
          description: 'Product id'
          type: integer
        parent:
          description: Parent
          type: integer
        item_type:
          description: 'Category of item'
          type: string
        desc:
          description: Desc
          type: string
        articleNumber:
          description: 'Article number'
          type: string
        serialNumber:
          description: 'The serialnumber of the scanned posa card'
          type: string
        ean:
          description: 'international article number'
          type: string
        quantity:
          description: Quantity
          type: integer
        priceOne:
          description: 'Price one'
          type: integer
        sum:
          description: 'it is the value of the sum of the product with all items in sub_basket'
          type: integer
        tax:
          description: Tax
          type: integer
        reference_id:
          description: 'The reference_id must be unique, it''s a Reference for to the reference_id of SmartTransactionsSubBasketProduct [example: SmartTransactionsBasketProduct->reference_id is 1000 then all SmartTransactionsSubBasketProduct must have unique reference_id like 1000.1, 1000.2 etc.]'
          type: string
        contract_id:
          description: 'contract id'
          type: string
        group:
          description: Group
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsBasketProductGroup'
        sub_basket:
          description: 'sub basket Product'
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsSubBasketProduct'
      type: object
    SmartTransactionsSubBasketProduct:
      properties:
        id:
          description: 'Product id'
          type: integer
        parent:
          description: Parent
          type: integer
        item_type:
          description: 'Category of item'
          type: string
        desc:
          description: 'Description of the sub-basket product'
          type: string
        articleNumber:
          description: 'Article number'
          type: string
        serialNumber:
          description: 'The serialnumber of the scanned posa card'
          type: string
        ean:
          description: 'international article number'
          type: string
        quantity:
          description: Quantity
          type: integer
        priceOne:
          description: 'Price one'
          type: integer
        sum:
          description: ''
          type: integer
        tax:
          description: Tax
          type: integer
        reference_id:
          description: 'The reference_id must be unique, it''s Referring to the reference_id of SmartTransactionsBasketProduct [example: SmartTransactionsBasketProduct->reference_id is 1000 then all SmartTransactionsSubBasketProduct must have unique reference_id like 1000.1, 1000.2 etc.]'
          type: string
        contract_id:
          description: 'contract id'
          type: string
        group:
          description: Group
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsBasketProductGroup'
      type: object
    SmartTransactionsBasketProductGroup:
      properties:
        id:
          description: 'Group id'
          type: string
        desc:
          description: Desc
          type: string
        level:
          description: Level
          type: integer
      type: object
    SmartTransactionsIdent:
      properties:
        object:
          description: 'Object of smart transaction ident'
          type: string
        id:
          description: 'Id of smart transaction ident'
          type: string
          format: id
        prefix:
          description: Prefix
          type: string
        name:
          description: Name
          type: string
        type:
          description: Type
          type: string
        value:
          description: Value
          type: string
        valid:
          description: Valid
          type: boolean
        merchantcard:
          description: 'Loyalty merchant card'
          $ref: '#/components/schemas/LoyaltyMerchantcardsProductModel'
      type: object
    SmartTransactionsPickupOptions:
      properties:
        code:
          description: Code
          type: string
        date:
          description: Date
          type: string
        store:
          description: Store
          $ref: '#/components/schemas/ProductInstanceUID'
      type: object
    SmartTransactionsMerchant:
      properties:
        object:
          description: 'Object type of instance'
          type: string
        id:
          description: 'ID of instance'
          type: string
        companyname:
          description: 'Company name'
          type: string
      type: object
    SmartTransactionsReceipt:
      properties:
        type:
          description: Type
          type: string
        value:
          description: Value
          $ref: '#/components/schemas/SmartTransactionsReceiptValue'
      type: object
    SmartTransactionsReceiptValue:
      properties:
        caption:
          description: Caption
          type: string
        text:
          description: Text
          type: string
        decoration:
          description: Decoration
          items:
            type: string
        name:
          description: Name
          type: string
        value:
          description: Value
          type: string
      type: object
    SmartTransactionsPrepare:
      properties:
        customer:
          description: Customer
          $ref: '#/components/schemas/ProductInstanceUID'
        container:
          description: Container
          $ref: '#/components/schemas/ProductInstanceUID'
        method:
          description: Method
          type: string
        callback_urls:
          description: 'Callback URLs'
          $ref: '#/components/schemas/SmartTransactionsPrepareCallbackUrls'
        email:
          description: Email
          type: string
        mode:
          description: Mode
          type: string
        is_paypal_basic:
          description: 'Is paypal basic or not'
          type: boolean
        is_demo:
          description: 'Is demo or not'
          type: boolean
      type: object
    SmartTransactionsPrepareCallbackUrls:
      properties:
        success_url:
          description: 'Success URL'
          type: string
        failure_url:
          description: 'Failure URL'
          type: string
      type: object
    SmartTransactionsDTO:
      properties:
        merchant:
          description: Merchant
          type: string
        provider_contract:
          description: 'Provider contract'
          $ref: '#/components/schemas/ProductInstanceUID'
        order_option:
          description: 'Order option'
          type: string
        status:
          description: Status
          type: string
        transactionRef:
          description: 'Transaction ref'
          type: string
        merchantRef:
          description: 'Merchant ref'
          type: string
        basket:
          description: Basket
          $ref: '#/components/schemas/SmartTransactionsBasket'
        basket_info:
          description: 'Basket info'
          $ref: '#/components/schemas/SmartTransactionsBasketInfo'
        idents:
          description: Idents
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsIdent'
        tax_amount:
          description: 'Tax amount'
          type: integer
        tax_rate:
          description: 'Tax rate'
          type: integer
        market:
          description: Market
          type: string
        cashier:
          description: Cashier
          type: string
        product:
          description: Product
          type: string
        receipt:
          description: Receipt
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsReceipt'
        receipt_number:
          description: 'Receipt number'
          type: integer
        device_source:
          description: 'Device source'
          type: string
        trans_id:
          description: 'Transaction id'
          type: integer
        contract:
          description: Contract
          $ref: '#/components/schemas/ProductInstanceID'
        pickup_options:
          description: 'Pickup options'
          $ref: '#/components/schemas/SmartTransactionsPickupOptions'
        last_visited_page:
          description: 'Last visited page'
          type: string
        customer:
          description: Customer
          $ref: '#/components/schemas/PaymentCustomersProductModel'
        shipping_address:
          description: 'Customers delivery address'
          $ref: '#/components/schemas/PaymentCustomersProductModel'
        container:
          description: 'Payment Container'
          $ref: '#/components/schemas/ProductInstanceUID'
        checkin:
          description: 'Check in'
          $ref: '#/components/schemas/SmartTransactionsCheckin'
        payment_method:
          description: 'Payment method'
          type: string
          example:
            - debit
        is_demo:
          description: 'Demo payment'
          type: boolean
        checkout_links:
          description: 'Checkout Links'
          $ref: '#/components/schemas/SmartTransactionsCheckoutLinks'
      type: object
    SmartTransactionPreparePayloadDataModel:
      properties:
        callback_urls:
          description: 'Callback urls'
          type: array
          items:
            type: string
        email:
          description: Email
          type: string
        mode:
          description: Mode
          type: string
        is_paypal_basic:
          description: 'Information whether a smart transaction is PayPal basic or not'
          type: boolean
      type: object
    SmartTransactionsList:
      properties:
        count:
          description: 'Number of existing smart transactions'
          type: integer
        data:
          description: SmartTransactionsList
          type: array
          items:
            $ref: '#/components/schemas/SmartTransactionsProductModel'
      type: object
  parameters:
    count:
      name: count
      in: query
      description: 'The number of items to return.'
      required: false
      schema:
        type: integer
    offset:
      name: offset
      in: query
      description: 'The position within the whole result set to start returning items (First element is at 0).'
      required: false
      schema:
        type: integer
    fields:
      name: fields
      in: query
      description: 'List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2'
      required: false
      schema:
        type: string
    sort:
      name: sort
      in: query
      description: 'String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending ''asc'', or descending ''dsc'' order.'
      required: false
      schema:
        type: string
    query:
      name: q
      in: query
      description: "A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.\n *                   A condition may contain:\n *                       - wildcard \"*\" for any number of characters\n *                       - wildcard \"?\" for one character\n *                       - ranges in the form [value TO value]\n *\n *                   Single expressions may combined by 'AND', 'OR', 'NOT' operators and parenthesis '(', ')' for grouping.\n *                   Property names can be nested like \"prop1.prop2\".\n *                   Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])\n *                   "
      required: false
      schema:
        type: string
  securitySchemes:
    oauth_token:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://connect-testing.secupay-ag.de/oauth/token'
          scopes:
            'https://scope.secucard.com/e/smartdevice': 'smart devices'
            'https://scope.secucard.com/e/api': 'shops and marketplaces'
            'https://scope.secucard.com/e/app.main/secucard': secuoffice
            'https://scope.secucard.com/e/app.mobile/secucard/user': 'secucard mobile app'
security:
  -
    oauth_token: []
